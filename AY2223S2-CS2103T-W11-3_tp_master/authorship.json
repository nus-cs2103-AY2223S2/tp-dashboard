[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"## Product name: PowerCards","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"1. Main Screen - add new flashcards or decks, edit existing flashcards or decks","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"2. Review Screen - study a particular masterDeck of cards","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"### Target user profile: University Students","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"### Value proposition: ","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"- Enable users to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"- The application will present the question to the user which the user can respond to with their guess. ","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"- The application can track the learning of the user through the number of errors made.","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"# Links","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"- [About Us](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/docs/AboutUs.md)","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"- [Developer Guide](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/docs/DeveloperGuide.md)","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"- [User Guide](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/docs/UserGuide.md)","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"# Acknowledgements","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"- This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"ruiyigan":10,"unfazing":4,"-":6,"HJ-PRK":1}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"    archiveFileName \u003d \u0027powercards.jar\u0027","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"run {","lastModifiedDate":"2023-03-27"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ruiyigan":3,"-":73}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"### Rui Yi Gan","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/ruiyigan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"[[homepage](https://sg.linkedin.com/in/rui-yi-gan)]","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"[[github](https://github.com/ruiyigan)]","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"[[portfolio](team/ruiyigan.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Role: Project Advisor","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"### Lian Kok Hai","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/unfazing.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"[[homepage](https://liankokhai.com)]","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/unfazing)]","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"[[portfolio](team/unfazing.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"### Park Hyunjin","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/hj-prk.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/HJ-PRK] ","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"[[portfolio](team/hj-prk.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"### Tran Hieu Nghia","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/rockman007372.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/rockman007372)]","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"[[portfolio](team/rockman007372.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":"### Bryan Juniano","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/junianob.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/junianob)]","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"junianob"},"content":"[[portfolio](team/junianob.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"junianob":22,"-":39}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"* Our application is based on the [AB3](https://se-education.org/addressbook-level3/) project created by the [SE-EDU initiative](https://se-education.org/)","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"* Our application makes use of [JavaFX](https://openjfx.io/) as the UI framework.","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2223S2-CS2103T-W11-3/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"* depends on some classes in the `Model` component, as it displays `Card` object residing in the `Model`.","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"**API** : [`Logic.java`](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2023-03-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"1. When `Logic` is called upon to execute a  command, it uses the `MasterDeckParser` class (more precisely, a method within `MasterDeckParser` which depends on the current mode of the application) to parse the user command.","lastModifiedDate":"2023-03-24"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"2. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-03-24"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"3. The command can communicate with the `Model` when it is executed (e.g. to add a card).","lastModifiedDate":"2023-03-24"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-03-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"ruiyigan"},"content":"* When called upon to parse a user command, the `MasterDeckParser` class parse the command differently based on the current mode (MAIN, DECK, REVIEW) of the application and creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `MasterDeckParser` returns back as a `Command` object.","lastModifiedDate":"2023-03-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"ruiyigan"},"content":"* stores the master deck data i.e., all `Card` objects (which are contained in a `UniqueCardList` object) and all `Deck` objects (which are contained in a `UniqueDeckList` object).","lastModifiedDate":"2023-03-24"},{"lineNumber":126,"author":{"gitId":"ruiyigan"},"content":"* stores the currently \u0027selected\u0027 `Card` objects (e.g., results of a selecting a deck) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cCard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2023-03-24"},{"lineNumber":127,"author":{"gitId":"ruiyigan"},"content":"* stores the currently \u0027selected\u0027 `Deck` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cDeck\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"ruiyigan"},"content":"Each `Card` object,","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"ruiyigan"},"content":"* stores one `Question`, one `Answer`, one \u0027Deck\u0027 which the `Card` object references from the `Deck` list, and one optional `Tag`.","lastModifiedDate":"2023-03-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"ruiyigan"},"content":"[//]: # (\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative \u0026#40;arguably, a more OOP\u0026#41; model is given below. It has a `Tag` list in the `MasterDeck`, which `Card` references. This allows `MasterDeck` to only require one `Tag` object per unique tag, instead of each `Card` needing their own `Tag` objects.\u003cbr\u003e)","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"ruiyigan"},"content":"[//]: # ()","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"ruiyigan"},"content":"[//]: # (\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e)","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":139,"author":{"gitId":"ruiyigan"},"content":"[//]: # ()","lastModifiedDate":"2023-03-24"},{"lineNumber":140,"author":{"gitId":"ruiyigan"},"content":"[//]: # (\u003c/div\u003e)","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"ruiyigan"},"content":"**API** : [`Storage.java`](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2023-03-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"ruiyigan"},"content":"* can save both master deck data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2023-03-22"},{"lineNumber":151,"author":{"gitId":"ruiyigan"},"content":"* inherits from both `MasterDeckStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2023-03-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"ruiyigan"},"content":"### Implementation of Commands based on Application\u0027s Mode","lastModifiedDate":"2023-03-24"},{"lineNumber":165,"author":{"gitId":"ruiyigan"},"content":"The following activity diagram summarises how the application handles a new user command:","lastModifiedDate":"2023-03-24"},{"lineNumber":166,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":167,"author":{"gitId":"ruiyigan"},"content":"![CommandActivityFlowDiagram](images/CommandActivityFlowDiagram.png)","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":169,"author":{"gitId":"ruiyigan"},"content":"The rake symbol (in the Check validity of command action above) is used to show that the action is described in another subsidiary activity diagram elsewhere. That diagram is given below.","lastModifiedDate":"2023-03-24"},{"lineNumber":170,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"ruiyigan"},"content":"#### Activity: Check validity of command ","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"ruiyigan"},"content":"![CommandValidityActivityDiagram](images/CommandValidityActivityDiagram.png)","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"ruiyigan"},"content":"### Implementation of Main Mode Features","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":176,"author":{"gitId":"ruiyigan"},"content":"### Implementation of Card Mode Features","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"ruiyigan"},"content":"### Implementation of Review Mode Features","lastModifiedDate":"2023-03-24"},{"lineNumber":179,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"ruiyigan"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `MasterDeck` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2023-03-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"unfazing"},"content":"Step 2. The user executes `delete 5` command to delete the 5th card in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2023-03-10"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"unfazing"},"content":"Step 3. The user executes `add n/David …​` to add a new card. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2023-03-10"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"unfazing"},"content":"Step 4. The user now decides that adding the card was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2023-03-10"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"unfazing"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the card being deleted).","lastModifiedDate":"2023-03-10"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":272,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"HJ-PRK"},"content":"* Needs to study a group of terms and definitions efficiently","lastModifiedDate":"2023-03-05"},{"lineNumber":284,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":287,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"ruiyigan"},"content":"**Value proposition**: study various topics using flashcards on the computer","lastModifiedDate":"2023-03-22"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"| Priority | As a …​  | I want to …​                                                                               | So that I can…​                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"rockman007372"},"content":"|----------|----------|--------------------------------------------------------------------------------------------|--------------------------------------------------------|","lastModifiedDate":"2023-03-24"},{"lineNumber":298,"author":{"gitId":"-"},"content":"| `* * *`  | new user | see usage instructions                                                                     | refer to instructions when I forget how to use the App |","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"rockman007372"},"content":"| `Epic`   | user     | **manage PowerCards**                                                                      ||","lastModifiedDate":"2023-03-24"},{"lineNumber":300,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | create a new PowerCard with a question and answer pair                                     ||","lastModifiedDate":"2023-03-05"},{"lineNumber":301,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | search for PowerCards using keywords in the questions                                      ||","lastModifiedDate":"2023-03-05"},{"lineNumber":302,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | rewrite the question or the answer in the PowerCard                                        ||","lastModifiedDate":"2023-03-05"},{"lineNumber":303,"author":{"gitId":"rockman007372"},"content":"| `Epic`   | user     | **group PowerCards into decks of the same topic**                                          ||","lastModifiedDate":"2023-03-24"},{"lineNumber":304,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | set the name of a masterDeck                                                               ||","lastModifiedDate":"2023-03-11"},{"lineNumber":305,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | list all decks I have created                                                              ||","lastModifiedDate":"2023-03-05"},{"lineNumber":306,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | list all the PowerCards in a masterDeck                                                    ||","lastModifiedDate":"2023-03-11"},{"lineNumber":307,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | add PowerCards in a masterDeck                                                             ||","lastModifiedDate":"2023-03-11"},{"lineNumber":308,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | remove PowerCards in a masterDeck                                                          ||","lastModifiedDate":"2023-03-11"},{"lineNumber":309,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | rename a masterDeck                                                                        ||","lastModifiedDate":"2023-03-11"},{"lineNumber":310,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | delete a masterDeck                                                                        ||","lastModifiedDate":"2023-03-11"},{"lineNumber":311,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | add the description of each masterDeck                                                     | I can check later what this masterDeck is about.       |","lastModifiedDate":"2023-03-11"},{"lineNumber":312,"author":{"gitId":"rockman007372"},"content":"| `Epic`   | user     | **review decks of PowerCards**                                                             ||","lastModifiedDate":"2023-03-24"},{"lineNumber":313,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | review a single masterDeck of PowerCards                                                   | I can test my knowledge of the topic                   |","lastModifiedDate":"2023-03-11"},{"lineNumber":314,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | mark a flash card to be correct / wrong during review                                      ||","lastModifiedDate":"2023-03-05"},{"lineNumber":315,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | review multiple decks of PowerCards                                                        | I can test my knowledge of multiple topics             |","lastModifiedDate":"2023-03-05"},{"lineNumber":316,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | see how many PowerCards I have left to review in one masterDeck                            ||","lastModifiedDate":"2023-03-11"},{"lineNumber":317,"author":{"gitId":"rockman007372"},"content":"| `Epic`   | user     | **keep track of how effective my learning has been**                                       ||","lastModifiedDate":"2023-03-24"},{"lineNumber":318,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | record the number of questions I got right                                                 | I can see my progress                                  |","lastModifiedDate":"2023-03-05"},{"lineNumber":319,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | see which are the PowerCards I struggle with / succeed at                                  ||","lastModifiedDate":"2023-03-05"},{"lineNumber":320,"author":{"gitId":"HJ-PRK"},"content":"| `*`      | user     | see which topics (decks) I am stronger / weaker in                                         ||","lastModifiedDate":"2023-03-05"},{"lineNumber":321,"author":{"gitId":"HJ-PRK"},"content":"| `*`      | user     | see how many times I have reviewed a PowerCard or masterDeck                               ||","lastModifiedDate":"2023-03-11"},{"lineNumber":322,"author":{"gitId":"HJ-PRK"},"content":"| `*`      | user     | see how long I spent on each question during review                                        ||","lastModifiedDate":"2023-03-05"},{"lineNumber":323,"author":{"gitId":"HJ-PRK"},"content":"| `*`      | user     | revise PowerCards that I got wrong for                                                     | I can see what I’m weak at                             |","lastModifiedDate":"2023-03-05"},{"lineNumber":324,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | reset the statistics                                                                       ||","lastModifiedDate":"2023-03-05"},{"lineNumber":325,"author":{"gitId":"rockman007372"},"content":"| `Epic`   | user     | **share and receive decks from my friends**                                                ||","lastModifiedDate":"2023-03-24"},{"lineNumber":326,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | import decks from other users.                                                             ||","lastModifiedDate":"2023-03-05"},{"lineNumber":327,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user     | export decks for other users.                                                              ||","lastModifiedDate":"2023-03-05"},{"lineNumber":328,"author":{"gitId":"rockman007372"},"content":"| `Epic`   | user     | **undo and redo changes I make**                                                           ||","lastModifiedDate":"2023-03-24"},{"lineNumber":329,"author":{"gitId":"HJ-PRK"},"content":"| `*`      | user     | retrieve a masterDeck or flash card should I accidentally delete a PowerCard or masterDeck ||","lastModifiedDate":"2023-03-11"},{"lineNumber":330,"author":{"gitId":"HJ-PRK"},"content":"| `*`      | user     | redo changes that I had undone.                                                            ||","lastModifiedDate":"2023-03-05"},{"lineNumber":331,"author":{"gitId":"rockman007372"},"content":"| `Epic`   | user     | **adjust the frequency of certain PowerCards appearing based on my input**                 ||","lastModifiedDate":"2023-03-24"},{"lineNumber":332,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | tag PowerCards that are hard                                                               | they will appear more frequently                       |","lastModifiedDate":"2023-03-05"},{"lineNumber":333,"author":{"gitId":"HJ-PRK"},"content":"| `* *`    | user     | tag PowerCards that are easy                                                               | they will appear less frequently                       |","lastModifiedDate":"2023-03-05"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"rockman007372"},"content":"For all use cases below, the **System** is the `Powercard` and the **Actor** is the `user`, unless specified otherwise.","lastModifiedDate":"2023-03-11"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"rockman007372"},"content":"**Use case: UC1 - Add a powerdeck**","lastModifiedDate":"2023-03-11"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":344,"author":{"gitId":"rockman007372"},"content":"1. User requests to create a new deck with a specified name.","lastModifiedDate":"2023-03-11"},{"lineNumber":345,"author":{"gitId":"rockman007372"},"content":"2. System creates a new deck with the given name.   ","lastModifiedDate":"2023-03-11"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"rockman007372"},"content":"**Use case: UC2 - Select a powerdeck**","lastModifiedDate":"2023-03-24"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":352,"author":{"gitId":"rockman007372"},"content":"1. User chooses a deck to add powercard to.","lastModifiedDate":"2023-03-11"},{"lineNumber":353,"author":{"gitId":"rockman007372"},"content":"2. System enters the chosen deck and shows cards in that deck.","lastModifiedDate":"2023-03-24"},{"lineNumber":354,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":355,"author":{"gitId":"rockman007372"},"content":"   Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":356,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":357,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":358,"author":{"gitId":"rockman007372"},"content":"**Use case: UC - Add a powercard**","lastModifiedDate":"2023-03-24"},{"lineNumber":359,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":360,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-24"},{"lineNumber":361,"author":{"gitId":"rockman007372"},"content":"1. User \u003cu\u003eselects a powerdeck (UC2)\u003c/u\u003e to add powercard to.","lastModifiedDate":"2023-03-24"},{"lineNumber":362,"author":{"gitId":"rockman007372"},"content":"2. User enters the question and answer details for the card.","lastModifiedDate":"2023-03-24"},{"lineNumber":363,"author":{"gitId":"rockman007372"},"content":"3. System adds the card to the chosen deck.","lastModifiedDate":"2023-03-24"},{"lineNumber":364,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":365,"author":{"gitId":"rockman007372"},"content":"   Steps 3-4 are repeated for as many times as required until the User finishes adding more cards to the deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":366,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"rockman007372"},"content":"**Use case: UC - Delete a powercard**","lastModifiedDate":"2023-03-24"},{"lineNumber":370,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":371,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":372,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":373,"author":{"gitId":"rockman007372"},"content":"1. User \u003cu\u003eselects a powerdeck (UC2)\u003c/u\u003e to delete powercard from.","lastModifiedDate":"2023-03-24"},{"lineNumber":374,"author":{"gitId":"rockman007372"},"content":"2. User requests to delete a specific powercard in the deck.","lastModifiedDate":"2023-03-24"},{"lineNumber":375,"author":{"gitId":"rockman007372"},"content":"3. System deletes the powercard.  ","lastModifiedDate":"2023-03-24"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":377,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2023-03-05"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":379,"author":{"gitId":"rockman007372"},"content":"**Extensions:**","lastModifiedDate":"2023-03-11"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":381,"author":{"gitId":"rockman007372"},"content":"* 2a. The list is empty.  ","lastModifiedDate":"2023-03-24"},{"lineNumber":382,"author":{"gitId":"rockman007372"},"content":"       ","lastModifiedDate":"2023-03-24"},{"lineNumber":383,"author":{"gitId":"rockman007372"},"content":"  Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":385,"author":{"gitId":"rockman007372"},"content":"* 3a1. System shows an error message.  ","lastModifiedDate":"2023-03-24"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":387,"author":{"gitId":"rockman007372"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2023-03-24"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":390,"author":{"gitId":"rockman007372"},"content":"**Use case: UC - Find a powercard**","lastModifiedDate":"2023-03-24"},{"lineNumber":391,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":392,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":393,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":394,"author":{"gitId":"rockman007372"},"content":"1. User requests to find powercards containing a certain string in the question.","lastModifiedDate":"2023-03-11"},{"lineNumber":395,"author":{"gitId":"rockman007372"},"content":"2. System shows a list of cards matching the query.","lastModifiedDate":"2023-03-11"},{"lineNumber":396,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":397,"author":{"gitId":"HJ-PRK"},"content":"   Use case ends.","lastModifiedDate":"2023-03-05"},{"lineNumber":398,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":399,"author":{"gitId":"rockman007372"},"content":"**Extensions:**","lastModifiedDate":"2023-03-11"},{"lineNumber":400,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":401,"author":{"gitId":"rockman007372"},"content":"* 2a. There are no powercards the match the query.    ","lastModifiedDate":"2023-03-24"},{"lineNumber":402,"author":{"gitId":"rockman007372"},"content":"  ","lastModifiedDate":"2023-03-24"},{"lineNumber":403,"author":{"gitId":"rockman007372"},"content":"  Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":404,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":405,"author":{"gitId":"rockman007372"},"content":"**Use case: UC - Review  a deck**","lastModifiedDate":"2023-03-24"},{"lineNumber":406,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":407,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":408,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":409,"author":{"gitId":"HJ-PRK"},"content":"1. User requests to review a particular deck","lastModifiedDate":"2023-03-05"},{"lineNumber":410,"author":{"gitId":"rockman007372"},"content":"2. Application shows a random, non-repeating card in the deck","lastModifiedDate":"2023-03-11"},{"lineNumber":411,"author":{"gitId":"rockman007372"},"content":"3. User attempts to answer the question in the card.","lastModifiedDate":"2023-03-11"},{"lineNumber":412,"author":{"gitId":"rockman007372"},"content":"4. Application reveals the answer to the powercard.","lastModifiedDate":"2023-03-11"},{"lineNumber":413,"author":{"gitId":"rockman007372"},"content":"5. User self-grades question as easy/medium/difficult.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":414,"author":{"gitId":"rockman007372"},"content":"   Repeat step 2-5 until all powercards in deck have been exhausted.","lastModifiedDate":"2023-03-11"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":416,"author":{"gitId":"HJ-PRK"},"content":"   Use case ends.","lastModifiedDate":"2023-03-05"},{"lineNumber":417,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":418,"author":{"gitId":"rockman007372"},"content":"**Extensions:**","lastModifiedDate":"2023-03-11"},{"lineNumber":419,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":420,"author":{"gitId":"rockman007372"},"content":"* 1a. There are no decks with the name requested by the user.  ","lastModifiedDate":"2023-03-24"},{"lineNumber":421,"author":{"gitId":"rockman007372"},"content":"  Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"rockman007372"},"content":"* *a. User decides to end the review early.  ","lastModifiedDate":"2023-03-24"},{"lineNumber":424,"author":{"gitId":"rockman007372"},"content":"  * *a1. User requests to end the review session.  ","lastModifiedDate":"2023-03-24"},{"lineNumber":425,"author":{"gitId":"rockman007372"},"content":"  * *a2. Powercard ends the session and brings the user back to the area before the review started.  ","lastModifiedDate":"2023-03-24"},{"lineNumber":426,"author":{"gitId":"rockman007372"},"content":"    Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"HJ-PRK"},"content":"2. Should be able to hold up to 1000 Powercards without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2023-03-05"},{"lineNumber":432,"author":{"gitId":"HJ-PRK"},"content":"3. A Powercard should load when prompted without any noticeable lag","lastModifiedDate":"2023-03-05"},{"lineNumber":433,"author":{"gitId":"HJ-PRK"},"content":"4. Every command should provide a response within 2 seconds","lastModifiedDate":"2023-03-05"},{"lineNumber":434,"author":{"gitId":"HJ-PRK"},"content":"5. The Powercard program is not expected to determine the correctness of the user’s response","lastModifiedDate":"2023-03-05"},{"lineNumber":435,"author":{"gitId":"HJ-PRK"},"content":"6. A Powercard should be easily added/deleted in less than 3 commands after opening the program","lastModifiedDate":"2023-03-05"},{"lineNumber":436,"author":{"gitId":"HJ-PRK"},"content":"7. The data stored by Powercard should be forward compatible such that old data can still be loaded in newer versions of the program","lastModifiedDate":"2023-03-05"},{"lineNumber":437,"author":{"gitId":"HJ-PRK"},"content":"8. The maximum character limit of a powercard text should be [TO BE DETERMINED]","lastModifiedDate":"2023-03-05"},{"lineNumber":438,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":441,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"HJ-PRK"},"content":"* **Deck**: A group of PowerCards (flashcards) of a specific topic","lastModifiedDate":"2023-03-05"},{"lineNumber":445,"author":{"gitId":"HJ-PRK"},"content":"*{More to be added}*","lastModifiedDate":"2023-03-05"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":447,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"ruiyigan"},"content":"   2. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2023-03-27"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"ruiyigan"},"content":"2. Saving window preferences","lastModifiedDate":"2023-03-27"},{"lineNumber":467,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"ruiyigan"},"content":"   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":471,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"ruiyigan"},"content":"3. _{ more test cases …​ }_","lastModifiedDate":"2023-03-27"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"unfazing"},"content":"### Deleting a card","lastModifiedDate":"2023-03-10"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"unfazing"},"content":"1. Deleting a card while all cards are being shown","lastModifiedDate":"2023-03-10"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"unfazing"},"content":"   1. Prerequisites: List all cards using the `list` command. Multiple cards in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"ruiyigan"},"content":"   2. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":482,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"ruiyigan"},"content":"   3. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":485,"author":{"gitId":"unfazing"},"content":"      Expected: No card is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2023-03-10"},{"lineNumber":486,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"ruiyigan"},"content":"   4. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":488,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"ruiyigan"},"content":"2. _{ more test cases …​ }_","lastModifiedDate":"2023-03-27"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"ruiyigan"},"content":"2. _{ more test cases …​ }_","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"rockman007372":62,"ruiyigan":53,"unfazing":8,"-":321,"HJ-PRK":54}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"# Introduction","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"Welcome to PowerCards, a **lightweight flashcard application** that helps students streamline their learning process, enabling faster mastery of course materials through the use of flashcards _(which we will simply refer as **cards** from now on)_.","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"As a university student, you can capitalise on our **powerful card management system** and **minimalist interface** to create multiple decks of cards quickly to manage your course content and spend more time on learning instead.","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"This user guide will help you use PowerCards with ease and integrate it into your learning workflow in no time. It explains the key features of PowerCards and provides guidance on how to use them effectively to meet your specific learning needs.","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"## How to use the User Guide","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"* For a quick and easy way to **get started** with PowerCards, you can visit the [Quick Start](#quick-start) section.","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"* To **understand the terms** we use in PowerCards, you can visit the [Key Terms](#key-terms) section.","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"* To learn about the **features** that PowerCards provides and how to use them, you can visit the [Features](#features) section.","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"* Having **issues**? Check out the [FAQ](#faq) section and see if you can find your solutions there!","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"* Have a **question** for us or require our **assistance**? Feel free to [contact us](#contact-us), and we will do our best to assist you!","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"**:bulb: Tip:**\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"* There\u0027s a lot of information in this guide, so it\u0027s a good idea to skim through the contents first. This will give you a better understanding on how PowerCards works. Then, you can dive into the sections that interest you the most. We hope this approach will make it easier for you to digest the content.","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"## Components of PowerCards","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"![UiComponent](images/UiComponent.png)","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"## Description of the components","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"| Component          | Description                                                                                                  |","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"|--------------------|--------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"| **Left Panel**     | This shows either a **list of decks** or the **current review statistics** depending on the mode you are in. |","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"| **Right Panel**    | This shows either a **list of cards** or the **current card in review** depending on the mode you are in.    |","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"| **Command Box**    | This is where you enter your **commands**.                                                                   |","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"| **Result Display** | This is where the **results** of your commands will be shown.                                                |","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"## Quick Start","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"1. Ensure you have Java `11` or above installed in your Computer. If you don\u0027t have it, you can download and install it by clicking here (for [Windows]([url](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-microsoft-windows-platforms.html#:~:text\u003dthe%20JDK%20Silently-,Downloading%20the%20JDK%20Installer,patch_windows%2Dx64_bin.exe%20.)) users) or here (for [Mac]([url](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-macos.html)) users).","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"2. Download the latest `powercards.jar` from [here](https://github.com/AY2223S2-CS2103T-W11-3/tp/releases).","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your PCs.","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"4. Open a command terminal, enter the folder you put the jar file in using the `cd` command, and use the `java -jar powercards.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"5. Type any command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"## Key Terms","lastModifiedDate":"2023-03-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"### Deck","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"A deck refers to a collection of flashcards that are organized together based on a specific topic or subject.","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"For example, you might create a deck of flashcards to study for a math test, with each card containing a different math problem and solution.","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"### Card","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"A card refers to a flashcard within a deck. A card contains a question or prompt, and the corresponding answer or solution.","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"During a review session, the card will only show the question, encouraging you to actively recall the answer.","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"Once you attempt the question, you can command the card to reveal the answer and test your knowledge.","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"# Features","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"## Command Components","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"This section explains some common components in a command.","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"| Component                 | Example              | Usage                                                                                                                                                                                                                                                                                                                    |","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"|---------------------------|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"| **Parameter**             | `QUESTION`, `ANSWER` | Parameters are placeholders where you have to insert your input.\u003cbr/\u003e \u003cbr/\u003eSuppose `add q\\QUESTION a\\ANSWER` is a valid command to add a card. You can simply replace `QUESTION` and `ANSWER` with the question and answer of your choice.                                                                               |  ","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"rockman007372"},"content":"| **Prefix**                | `q\\ `, `a\\ `, `t\\ `  | Prefixes are used to identify the parameters of a command. \u003cbr\u003e\u003cbr\u003e For example, prefix `q\\ ` identifies the parameter `QUESTION` in the command `add q\\QUESTION`.                                                                                                                                                       |","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"rockman007372"},"content":"| **Optional Component**    | `[t\\TAG]`            | Optional components can be omitted in the certain commands.\u003cbr/\u003e \u003cbr/\u003eFor example, `add q\\QUESTION a\\QUESTION [t\\TAG]` is a valid command to add a card.\u003cbr\u003e\u003cbr\u003eThe first two components `q\\QUESTION`, `a\\ANSWER` are compulsory.\u003cbr\u003eThe last component `t\\TAG` is optional.                                             |","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"rockman007372"},"content":"| **Multi-value Parameter** | `KEYWORDS...`        | These are parameters that can appear **multiple times**. \u003cbr\u003e\u003cbr\u003e For example, the command `findCards KEYWORD...` filters all the cards based on the keywords specified.\u003cbr\u003e\u003cbr\u003eThis means that the parameter `KEYWORD` can:\u003cbr\u003e- Appear one time: `findCards cell`\u003cbr\u003e- Appear multiple times: `findCards cell biology` | ","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"| **Index**                 | `INDEX`              | Index refers to the index of the card/deck you want to target from the list. The index must be positive integer (1, 2, 3...). \u003cbr/\u003e \u003cbr/\u003eFor example, `deleteDeck 1` deletes the first deck in the deck list.                                                                                                            |","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"| **Flag**                  | `-e`, `-m`, `-h`     | Flags are used to toggle a particular setting or behavior.\u003cbr/\u003e\u003cbr/\u003e For example, `review 1 -e` lets you review questions in the first deck that are tagged as easy only.                                                                                                                                                |","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"- If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be considered.","lastModifiedDate":"2023-03-30"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"  e.g. if you specify `q\\What is photosynthesis q\\What is a cell`, only `q\\What is a cell` will be considered.","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"- Extraneous parameters succeeding commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored. e.g. if the command specified is `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"## Main Mode","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"rockman007372"},"content":"Welcome to the Main Mode of the PowerCards application! This is the default mode you will see when you open the app. ","lastModifiedDate":"2023-03-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":100,"author":{"gitId":"rockman007372"},"content":"In the Main Mode, you can quickly and easily create new decks, add new cards to your decks, delete and modify existing cards or decks as needed, and more!","lastModifiedDate":"2023-03-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"![UiComponent](images/MainModeComponent.png)","lastModifiedDate":"2023-03-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"ruiyigan"},"content":"| Component         | Description                                                                                                                    |","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"|-------------------|--------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-31"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"| **Deck**          | A **deck** contains a list of **cards**. The existing decks are displayed in the left panel.                                   |","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"rockman007372"},"content":"| **Selected Deck** | The **deck** currently selected. The cards in this deck are displayed in the right panel.                                      |","lastModifiedDate":"2023-03-30"},{"lineNumber":108,"author":{"gitId":"rockman007372"},"content":"| **Card**          | A card contains a question, an answer and an optional difficulty tag.                                                          |","lastModifiedDate":"2023-03-30"},{"lineNumber":109,"author":{"gitId":"rockman007372"},"content":"| **Question**      | The question that you assign to the card.                                                                                      |","lastModifiedDate":"2023-03-30"},{"lineNumber":110,"author":{"gitId":"rockman007372"},"content":"| **Answer**        | The corresponding answer to the question.                                                                                      |","lastModifiedDate":"2023-03-30"},{"lineNumber":111,"author":{"gitId":"unfazing"},"content":"| **Tag**           | The tag indicating the difficulty level of the card, based on your evaluation. Each card can only be tagged with 1 difficulty. |","lastModifiedDate":"2023-03-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"## Main Mode - Before Selecting a Deck","lastModifiedDate":"2023-03-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"HJ-PRK"},"content":"### Adding a new Deck : `addDeck`","lastModifiedDate":"2023-03-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"Before you can add any cards, you must first create a deck. Creating a deck is done through the simple command below. ","lastModifiedDate":"2023-03-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":119,"author":{"gitId":"HJ-PRK"},"content":"Format: `addDeck DECK_NAME`","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"- `DECK_NAME` is the name of the deck you want to create. ","lastModifiedDate":"2023-03-30"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"  - Deck name cannot be duplicated, e.g., if you already have a deck named Science, you cannot create another Science deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"  - You do not need any prefix before deck name.","lastModifiedDate":"2023-03-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":124,"author":{"gitId":"rockman007372"},"content":"Example:","lastModifiedDate":"2023-03-30"},{"lineNumber":125,"author":{"gitId":"rockman007372"},"content":"* `addDeck Science` will create a deck titled Science.","lastModifiedDate":"2023-03-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":127,"author":{"gitId":"HJ-PRK"},"content":"### Editing a Deck : `editDeck`","lastModifiedDate":"2023-03-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"You just created a deck, but you realised you made a typo! Fret not, you can easily edit the name of the deck with this command.  ","lastModifiedDate":"2023-03-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"Editing a deck name will not affect the cards stored inside it.","lastModifiedDate":"2023-03-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":133,"author":{"gitId":"rockman007372"},"content":"Format: `editDeck INDEX DECK_NAME`","lastModifiedDate":"2023-03-30"},{"lineNumber":134,"author":{"gitId":"rockman007372"},"content":"- `INDEX` is the index of the deck you want to edit.","lastModifiedDate":"2023-03-30"},{"lineNumber":135,"author":{"gitId":"rockman007372"},"content":"- `DECK_NAME` is the new name you want to assign to the specified deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":136,"author":{"gitId":"rockman007372"},"content":"  - The new deck name cannot be the name of an existing deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":137,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":138,"author":{"gitId":"rockman007372"},"content":"Example: ","lastModifiedDate":"2023-03-30"},{"lineNumber":139,"author":{"gitId":"rockman007372"},"content":"- `editDeck 1 Chemistry` will edit the name of the first deck in the deck list to Chemistry.","lastModifiedDate":"2023-03-30"},{"lineNumber":140,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":141,"author":{"gitId":"ruiyigan"},"content":"### Deleting a Deck : `deleteDeck`","lastModifiedDate":"2023-03-26"},{"lineNumber":142,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"Once you have no use for a deck, you can delete the deck and all the cards within it with this command.  ","lastModifiedDate":"2023-03-30"},{"lineNumber":144,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":145,"author":{"gitId":"rockman007372"},"content":"Be careful, a deck once deleted cannot be retrieved! ","lastModifiedDate":"2023-03-30"},{"lineNumber":146,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":147,"author":{"gitId":"ruiyigan"},"content":"Format: `deleteDeck INDEX`","lastModifiedDate":"2023-03-26"},{"lineNumber":148,"author":{"gitId":"rockman007372"},"content":"- `INDEX` is the index of the deck in the deck list.","lastModifiedDate":"2023-03-30"},{"lineNumber":149,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":150,"author":{"gitId":"rockman007372"},"content":"Example: `deleteDeck 1` deletes the deck at index 1 and all the cards in deck 1. ","lastModifiedDate":"2023-03-30"},{"lineNumber":151,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":152,"author":{"gitId":"HJ-PRK"},"content":"### Selecting a Deck : `selectDeck`","lastModifiedDate":"2023-03-20"},{"lineNumber":153,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":154,"author":{"gitId":"rockman007372"},"content":"Once you have created your deck, you can access the list of cards inside it with this command. ","lastModifiedDate":"2023-03-30"},{"lineNumber":155,"author":{"gitId":"unfazing"},"content":"Refer to the [Main Mode - After Selecting a Deck](#Main-Mode---After-Selecting-a-Deck) section to find out what commands you can run with a deck selected!","lastModifiedDate":"2023-03-31"},{"lineNumber":156,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":157,"author":{"gitId":"HJ-PRK"},"content":"Format: `selectDeck INDEX`","lastModifiedDate":"2023-03-20"},{"lineNumber":158,"author":{"gitId":"rockman007372"},"content":"- `INDEX` is the index of the deck in the deck list.","lastModifiedDate":"2023-03-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-03-05"},{"lineNumber":161,"author":{"gitId":"rockman007372"},"content":"* `selectDeck 2` will select the deck at index 2. ","lastModifiedDate":"2023-03-30"},{"lineNumber":162,"author":{"gitId":"rockman007372"},"content":"  * The cards in this deck (if exist) will be displayed on the right panel. ","lastModifiedDate":"2023-03-30"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":164,"author":{"gitId":"rockman007372"},"content":"## Main Mode - After Selecting a Deck","lastModifiedDate":"2023-03-30"},{"lineNumber":165,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":166,"author":{"gitId":"unfazing"},"content":"With a deck selected, you can see all the cards in the deck on the right panel! ","lastModifiedDate":"2023-03-30"},{"lineNumber":167,"author":{"gitId":"unfazing"},"content":"Now you can `addCard`, `deleteCard`, `editCard` or `findCards` in the deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":168,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":169,"author":{"gitId":"unfazing"},"content":"You will not be able to make any deck-related changes (e.g. `addDeck`, `deleteDeck`) until you unselect the current deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":170,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":171,"author":{"gitId":"HJ-PRK"},"content":"### Unselecting a Deck : `unselectDeck`","lastModifiedDate":"2023-03-20"},{"lineNumber":172,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":173,"author":{"gitId":"unfazing"},"content":"Unselects the currently selected deck. ","lastModifiedDate":"2023-03-30"},{"lineNumber":174,"author":{"gitId":"unfazing"},"content":"Refer to the [Main Mode - Before Selecting a Deck](#Main-Mode---Before-Selecting-a-Deck) section to find out what commands you can run without a deck selected!","lastModifiedDate":"2023-03-31"},{"lineNumber":175,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":176,"author":{"gitId":"HJ-PRK"},"content":"Format: `unselectDeck`","lastModifiedDate":"2023-03-20"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":178,"author":{"gitId":"unfazing"},"content":"### Adding a Card: `addCard`","lastModifiedDate":"2023-03-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"unfazing"},"content":"Adds a card to the **selected** deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"unfazing"},"content":"Format: `addCard q\\QUESTION a\\ANSWER [t\\TAG]`","lastModifiedDate":"2023-03-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"ruiyigan"},"content":"\u003c!-- \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2023-03-05"},{"lineNumber":185,"author":{"gitId":"ruiyigan"},"content":"Tagging is optional and should be of value Easy, Medium, or Hard.","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"ruiyigan"},"content":"\u003c/div\u003e --\u003e","lastModifiedDate":"2023-03-05"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"HJ-PRK"},"content":"* `add q\\What is chemical symbol for Oxygen? a\\O`","lastModifiedDate":"2023-03-20"},{"lineNumber":190,"author":{"gitId":"HJ-PRK"},"content":"* `add q\\What is gravity? a\\A force of attraction between objects due to their mass t\\Easy`","lastModifiedDate":"2023-03-20"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"unfazing"},"content":"### Deleting a Card : `deleteCard`","lastModifiedDate":"2023-03-30"},{"lineNumber":193,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"Deletes an existing card from the **selected** Deck. ","lastModifiedDate":"2023-03-30"},{"lineNumber":195,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":196,"author":{"gitId":"unfazing"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2023-03-30"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"Note that this is irreversible!","lastModifiedDate":"2023-03-30"},{"lineNumber":198,"author":{"gitId":"unfazing"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":200,"author":{"gitId":"unfazing"},"content":"Format: `deleteCard INDEX`","lastModifiedDate":"2023-03-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":202,"author":{"gitId":"unfazing"},"content":"* Deletes the card at the specified `INDEX`. The card\u0027s index can be found in the displayed card list.","lastModifiedDate":"2023-03-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"unfazing"},"content":"Example:","lastModifiedDate":"2023-03-30"},{"lineNumber":205,"author":{"gitId":"unfazing"},"content":"- `deleteCard 2`","lastModifiedDate":"2023-03-30"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"unfazing"},"content":"### Editing a Card : `editCard`","lastModifiedDate":"2023-03-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"unfazing"},"content":"Edits an existing card in the **selected** Deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"unfazing"},"content":"Format: `editCard INDEX [q\\QUESTION] [a\\ANSWER] [t\\TAG]`","lastModifiedDate":"2023-03-30"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"unfazing"},"content":"* Edits the card at the specified `INDEX`. The card\u0027s index can be found in the displayed card list.","lastModifiedDate":"2023-03-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"unfazing"},"content":"*  `editCard 1 q\\What is chemical symbol for Carbon? a\\C` Edits the question and answer of the 1st card to be `What is chemical symbol for Carbon?` and `C` respectively.","lastModifiedDate":"2023-03-30"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"unfazing"},"content":"### Finding Cards by Keywords in Question : `findCards`","lastModifiedDate":"2023-03-30"},{"lineNumber":221,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":222,"author":{"gitId":"unfazing"},"content":"Show only cards in the **selected** Deck with questions containing any of the given keyword(s).","lastModifiedDate":"2023-03-30"},{"lineNumber":223,"author":{"gitId":"unfazing"},"content":"Note that the find function does not support partial words.","lastModifiedDate":"2023-03-30"},{"lineNumber":224,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":225,"author":{"gitId":"unfazing"},"content":"Format: `findCards KEYWORD...`","lastModifiedDate":"2023-03-30"},{"lineNumber":226,"author":{"gitId":"unfazing"},"content":"- You can include multiple KEYWORDS - as long as a card\u0027s question contains at least one keyword, the card will be found","lastModifiedDate":"2023-03-30"},{"lineNumber":227,"author":{"gitId":"unfazing"},"content":"- At least one KEYWORD must be given.","lastModifiedDate":"2023-03-30"},{"lineNumber":228,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":229,"author":{"gitId":"unfazing"},"content":"### Showing all Cards : `showCards`","lastModifiedDate":"2023-03-30"},{"lineNumber":230,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":231,"author":{"gitId":"unfazing"},"content":"Show all the cards in the **selected** Deck.","lastModifiedDate":"2023-03-30"},{"lineNumber":232,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":233,"author":{"gitId":"unfazing"},"content":"Format: `showCards`","lastModifiedDate":"2023-03-30"},{"lineNumber":234,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":235,"author":{"gitId":"unfazing"},"content":"### Clearing the data : `clear`","lastModifiedDate":"2023-03-30"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":237,"author":{"gitId":"unfazing"},"content":"Clears existing decks and cards.","lastModifiedDate":"2023-03-30"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"unfazing"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2023-03-30"},{"lineNumber":240,"author":{"gitId":"unfazing"},"content":"Note that this is irreversible!","lastModifiedDate":"2023-03-30"},{"lineNumber":241,"author":{"gitId":"unfazing"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"unfazing"},"content":"Format: `clear`","lastModifiedDate":"2023-03-30"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"unfazing"},"content":"## Before entering Review Mode","lastModifiedDate":"2023-03-31"},{"lineNumber":246,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":247,"author":{"gitId":"unfazing"},"content":"### Setting the Limit of Cards per Review: `setLimit`","lastModifiedDate":"2023-03-31"},{"lineNumber":248,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":249,"author":{"gitId":"unfazing"},"content":"Suppose you have a really long deck of cards but you only want to test yourself on 20 cards this session, use this function to set an upper limit on the number of cards per review.","lastModifiedDate":"2023-03-31"},{"lineNumber":250,"author":{"gitId":"unfazing"},"content":"While a limit is set, the review deck will be truncated to the card limit. ","lastModifiedDate":"2023-03-31"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":252,"author":{"gitId":"unfazing"},"content":"You can set the limit back to \u0027none\u0027 to view all cards in the deck for future reviews.","lastModifiedDate":"2023-03-31"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":254,"author":{"gitId":"unfazing"},"content":"Format: `setLimit LIMIT_NUM` or `setLimit none`","lastModifiedDate":"2023-03-31"},{"lineNumber":255,"author":{"gitId":"unfazing"},"content":"- LIMIT_NUM is a non-zero positive integer","lastModifiedDate":"2023-03-31"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-03-31"},{"lineNumber":258,"author":{"gitId":"unfazing"},"content":"* `setLimit 30`","lastModifiedDate":"2023-03-31"},{"lineNumber":259,"author":{"gitId":"unfazing"},"content":"* `setLimit none`","lastModifiedDate":"2023-03-31"},{"lineNumber":260,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":261,"author":{"gitId":"unfazing"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-03-30"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"unfazing"},"content":"## Review Mode","lastModifiedDate":"2023-03-30"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"unfazing"},"content":"Once ready, you can enter the Review Mode to test yourself on the cards of a deck. You can also specify the difficulties of the cards of the deck you want to test - e.g. you just want test medium and hard cards only.","lastModifiedDate":"2023-03-30"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":267,"author":{"gitId":"unfazing"},"content":"In the review mode, you will see:","lastModifiedDate":"2023-03-30"},{"lineNumber":268,"author":{"gitId":"unfazing"},"content":"- On the left panel - updated statistics of the current review (current deck, current card number, number of cards tagged each difficulty) and a navigation guide of the keys.","lastModifiedDate":"2023-03-30"},{"lineNumber":269,"author":{"gitId":"unfazing"},"content":"- On the right panel - the card that is currently under review, which you can flip to reveal the answer and then tag with a given difficulty.","lastModifiedDate":"2023-03-30"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":271,"author":{"gitId":"unfazing"},"content":"To review a card, you can attempt the question on the card (in your mind or on a paper if you prefer!) before flipping it. ","lastModifiedDate":"2023-03-30"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":273,"author":{"gitId":"unfazing"},"content":"Flipping a card reveals the answer - based on how close your guess was to the answer or how confident you were when attempting, you can tag the card with a difficulty of easy, medium or hard.","lastModifiedDate":"2023-03-30"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"unfazing"},"content":"Your goal would be to eventually have all cards in a deck be tagged as easy!","lastModifiedDate":"2023-03-30"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":277,"author":{"gitId":"unfazing"},"content":"### Starting a Review: `review`","lastModifiedDate":"2023-03-31"},{"lineNumber":278,"author":{"gitId":"unfazing"},"content":"From the Main Mode, run this command to enter the Review Mode!","lastModifiedDate":"2023-03-30"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":280,"author":{"gitId":"unfazing"},"content":"Format: `review INDEX [-e] [-m] [-h]`","lastModifiedDate":"2023-03-30"},{"lineNumber":281,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":282,"author":{"gitId":"unfazing"},"content":"* Reviews the cards from the deck with the specified INDEX. The deck\u0027s index can be found in the displayed deck list.","lastModifiedDate":"2023-03-30"},{"lineNumber":283,"author":{"gitId":"unfazing"},"content":"  - `-e` include this flag to test cards tagged as \"easy\"","lastModifiedDate":"2023-03-30"},{"lineNumber":284,"author":{"gitId":"unfazing"},"content":"  - `-m` include this flag to test cards tagged as \"medium\"","lastModifiedDate":"2023-03-30"},{"lineNumber":285,"author":{"gitId":"unfazing"},"content":"  - `-h` include this flag to test cards tagged as \"hard\"","lastModifiedDate":"2023-03-30"},{"lineNumber":286,"author":{"gitId":"unfazing"},"content":"  - Omit any flags to test all cards in the deck","lastModifiedDate":"2023-03-30"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":288,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-03-30"},{"lineNumber":289,"author":{"gitId":"unfazing"},"content":"* `review 5 -e -h`","lastModifiedDate":"2023-03-30"},{"lineNumber":290,"author":{"gitId":"unfazing"},"content":"* `review 2`","lastModifiedDate":"2023-03-30"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":292,"author":{"gitId":"ruiyigan"},"content":"### Ending the Review: `endReview`","lastModifiedDate":"2023-03-26"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":294,"author":{"gitId":"unfazing"},"content":"Ends the review and returns to the main mode. You can use this when you reach the end of the review deck or at any point during the review.","lastModifiedDate":"2023-03-30"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":296,"author":{"gitId":"ruiyigan"},"content":"Format: `endReview`","lastModifiedDate":"2023-03-26"},{"lineNumber":297,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":298,"author":{"gitId":"unfazing"},"content":"### Review Keystrokes","lastModifiedDate":"2023-03-31"},{"lineNumber":299,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":300,"author":{"gitId":"unfazing"},"content":"![ReviewKeystrokes](images/ReviewKeystrokes.png)","lastModifiedDate":"2023-03-31"},{"lineNumber":301,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":302,"author":{"gitId":"unfazing"},"content":"The diagram above shows the keystrokes you will use to interact with the cards in the Review mode. ","lastModifiedDate":"2023-03-31"},{"lineNumber":303,"author":{"gitId":"unfazing"},"content":"Notice that the keys are all close to the enter key so that you can breeze through decks of cards with ease!","lastModifiedDate":"2023-03-31"},{"lineNumber":304,"author":{"gitId":"unfazing"},"content":"- The top row of keys are commands to flip cards, or move to the previous/next cards. ","lastModifiedDate":"2023-03-31"},{"lineNumber":305,"author":{"gitId":"unfazing"},"content":"- The bottom row of keys are commands to tag the difficulty of the current card.","lastModifiedDate":"2023-03-31"},{"lineNumber":306,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":307,"author":{"gitId":"unfazing"},"content":"### Flipping the Card: `p`","lastModifiedDate":"2023-03-30"},{"lineNumber":308,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":309,"author":{"gitId":"unfazing"},"content":"Flips the card to reveal the answer. ","lastModifiedDate":"2023-03-30"},{"lineNumber":310,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":311,"author":{"gitId":"unfazing"},"content":"Format: `p`","lastModifiedDate":"2023-03-30"},{"lineNumber":312,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":313,"author":{"gitId":"unfazing"},"content":"### Next Card: `]`","lastModifiedDate":"2023-03-31"},{"lineNumber":314,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":315,"author":{"gitId":"unfazing"},"content":"Displays the next card. After tagging the current card, you use this command to move on to the next card.","lastModifiedDate":"2023-03-31"},{"lineNumber":316,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":317,"author":{"gitId":"unfazing"},"content":"Format: `]`","lastModifiedDate":"2023-03-31"},{"lineNumber":318,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":319,"author":{"gitId":"unfazing"},"content":"### Previous Card: `[`","lastModifiedDate":"2023-03-31"},{"lineNumber":320,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":321,"author":{"gitId":"unfazing"},"content":"Displays the previous card. Useful if you want to amend the tag of the previous card!","lastModifiedDate":"2023-03-31"},{"lineNumber":322,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":323,"author":{"gitId":"unfazing"},"content":"Format: `[`","lastModifiedDate":"2023-03-31"},{"lineNumber":324,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":325,"author":{"gitId":"unfazing"},"content":"### Tagging the Card as Easy: `l`","lastModifiedDate":"2023-03-30"},{"lineNumber":326,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":327,"author":{"gitId":"unfazing"},"content":"Tags the current card as easy. This replaces any previous tags.","lastModifiedDate":"2023-03-30"},{"lineNumber":328,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":329,"author":{"gitId":"unfazing"},"content":"Format: `l`","lastModifiedDate":"2023-03-30"},{"lineNumber":330,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":331,"author":{"gitId":"unfazing"},"content":"### Tagging the Card as Medium: `;`","lastModifiedDate":"2023-03-30"},{"lineNumber":332,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":333,"author":{"gitId":"unfazing"},"content":"Tags the current card as medium. This replaces any previous tags.","lastModifiedDate":"2023-03-30"},{"lineNumber":334,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":335,"author":{"gitId":"unfazing"},"content":"Format: `;`","lastModifiedDate":"2023-03-30"},{"lineNumber":336,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":337,"author":{"gitId":"unfazing"},"content":"### Tagging the Card as Hard: `\u0027`","lastModifiedDate":"2023-03-30"},{"lineNumber":338,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":339,"author":{"gitId":"unfazing"},"content":"Tags the current card as hard. This replaces any previous tags.","lastModifiedDate":"2023-03-30"},{"lineNumber":340,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":341,"author":{"gitId":"HJ-PRK"},"content":"Format: `\u0027`","lastModifiedDate":"2023-03-20"},{"lineNumber":342,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":343,"author":{"gitId":"unfazing"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":344,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":345,"author":{"gitId":"unfazing"},"content":"### Viewing help : `help`","lastModifiedDate":"2023-03-31"},{"lineNumber":346,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":347,"author":{"gitId":"unfazing"},"content":"If you are unsure about how to use PowerCard, you can always execute this command.","lastModifiedDate":"2023-03-31"},{"lineNumber":348,"author":{"gitId":"unfazing"},"content":"This command creates a pop-up with a link to this User Guide, where you can access clear and concise instructions for each command and features of the app.","lastModifiedDate":"2023-03-31"},{"lineNumber":349,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":350,"author":{"gitId":"unfazing"},"content":"[//]: # (![help message]\u0026#40;images/helpMessage.png\u0026#41;)","lastModifiedDate":"2023-03-31"},{"lineNumber":351,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":352,"author":{"gitId":"unfazing"},"content":"Format: `help`","lastModifiedDate":"2023-03-31"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":354,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2023-03-30"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":356,"author":{"gitId":"unfazing"},"content":"At any point, run this command to exit the programme.","lastModifiedDate":"2023-03-30"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":358,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2023-03-30"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":360,"author":{"gitId":"HJ-PRK"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":361,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":362,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2023-03-20"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":364,"author":{"gitId":"HJ-PRK"},"content":"PCs data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-03-20"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":366,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2023-03-20"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":368,"author":{"gitId":"HJ-PRK"},"content":"PCs data are saved as a JSON file `[JAR file location]/data/masterdeck.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-03-21"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":370,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2023-03-20"},{"lineNumber":371,"author":{"gitId":"unfazing"},"content":"If your changes to the data file makes its format invalid, PowerCards will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2023-03-31"},{"lineNumber":372,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":374,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2023-03-20"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":376,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2023-03-20"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":378,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":379,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"ruiyigan"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous PCs home folder.","lastModifiedDate":"2023-03-05"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"ruiyigan"},"content":"**Q**: Will my data be automatically saved?\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":387,"author":{"gitId":"ruiyigan"},"content":"**A**: **Yes**, PowerCards automatically saves your data after every command entered.","lastModifiedDate":"2023-03-30"},{"lineNumber":388,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":389,"author":{"gitId":"ruiyigan"},"content":"**Q**: Where is my data saved?\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":390,"author":{"gitId":"ruiyigan"},"content":"**A**: Go to where you have downloaded your `powercards.jar` file, there a `/data` folder will be created and the data will be saved under `powercards.json`.","lastModifiedDate":"2023-03-30"},{"lineNumber":391,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":392,"author":{"gitId":"ruiyigan"},"content":"**Q**: Can I rename my saved data file?\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":393,"author":{"gitId":"ruiyigan"},"content":"**A**: **No**, PowerCards currently only supports the use of `powercards.json` as the name of the saved data file.","lastModifiedDate":"2023-03-30"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":395,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"unfazing"},"content":"## Command Summary","lastModifiedDate":"2023-03-30"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"unfazing"},"content":"### Main Mode - before selecting a Deck","lastModifiedDate":"2023-03-30"},{"lineNumber":400,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":401,"author":{"gitId":"ruiyigan"},"content":"| Action         | Format, Examples                                             |","lastModifiedDate":"2023-03-26"},{"lineNumber":402,"author":{"gitId":"unfazing"},"content":"|----------------|--------------------------------------------------------------|","lastModifiedDate":"2023-03-30"},{"lineNumber":403,"author":{"gitId":"ruiyigan"},"content":"| Select Deck    | `selectDeck INDEX` \u003cbr /\u003e e.g., `selectDeck 2`               |","lastModifiedDate":"2023-03-26"},{"lineNumber":404,"author":{"gitId":"unfazing"},"content":"| Add Deck       | `addDeck DECK_NAME` \u003cbr /\u003e e.g., `addDeck Science`           |","lastModifiedDate":"2023-03-30"},{"lineNumber":405,"author":{"gitId":"unfazing"},"content":"| Edit Deck      | `editDeck INDEX DECK_NAME` \u003cbr /\u003e e.g., `editDeck 3 Physics` |","lastModifiedDate":"2023-03-30"},{"lineNumber":406,"author":{"gitId":"ruiyigan"},"content":"| Delete Deck    | `deleteDeck INDEX`                                           |","lastModifiedDate":"2023-03-26"},{"lineNumber":407,"author":{"gitId":"unfazing"},"content":"| Find Decks     | `findDecks KEYWORDS...`                                      |","lastModifiedDate":"2023-03-30"},{"lineNumber":408,"author":{"gitId":"unfazing"},"content":"| Show All Decks | `showDecks`                                                  |","lastModifiedDate":"2023-03-30"},{"lineNumber":409,"author":{"gitId":"unfazing"},"content":"| Start Review   | `review INDEX`                                               |","lastModifiedDate":"2023-03-30"},{"lineNumber":410,"author":{"gitId":"unfazing"},"content":"| Set Limit      | `setLimit LIMIT_NUM` \u003cbr /\u003e e.g., `setLimit 30`              |","lastModifiedDate":"2023-03-30"},{"lineNumber":411,"author":{"gitId":"ruiyigan"},"content":"| Clear          | `clear`                                                      |","lastModifiedDate":"2023-03-26"},{"lineNumber":412,"author":{"gitId":"ruiyigan"},"content":"| Help           | `help`                                                       |","lastModifiedDate":"2023-03-26"},{"lineNumber":413,"author":{"gitId":"ruiyigan"},"content":"| Exit           | `exit`                                                       |","lastModifiedDate":"2023-03-26"},{"lineNumber":414,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":415,"author":{"gitId":"unfazing"},"content":"### Main Mode - after selecting a Deck","lastModifiedDate":"2023-03-30"},{"lineNumber":416,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":417,"author":{"gitId":"ruiyigan"},"content":"| Action         | Format, Examples                                                                                                                                 |","lastModifiedDate":"2023-03-26"},{"lineNumber":418,"author":{"gitId":"unfazing"},"content":"|----------------|--------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-30"},{"lineNumber":419,"author":{"gitId":"unfazing"},"content":"| Unselect Deck  | `unselectDeck`                                                                                                                                   |","lastModifiedDate":"2023-03-30"},{"lineNumber":420,"author":{"gitId":"unfazing"},"content":"| Add Card       | `addCard q\\QUESTION a\\ANSWER [t\\TAG]` \u003cbr /\u003e e.g., `addCard q\\What is gravity? a\\A force of attraction between objects due to their mass t\\Easy` |","lastModifiedDate":"2023-03-30"},{"lineNumber":421,"author":{"gitId":"unfazing"},"content":"| Edit Card      | `editCard INDEX [q\\QUESTION] [a\\ANSWER] [t\\TAG]` \u003cbr /\u003e e.g., `editCard 1 q\\What is chemical symbol for Caarbon? a\\C t\\Hard`                     |","lastModifiedDate":"2023-03-30"},{"lineNumber":422,"author":{"gitId":"unfazing"},"content":"| Delete Card    | `deleteCard INDEX`                                                                                                                               |","lastModifiedDate":"2023-03-30"},{"lineNumber":423,"author":{"gitId":"unfazing"},"content":"| Find Cards     | `findCards KEYWORDS...`                                                                                                                          |","lastModifiedDate":"2023-03-30"},{"lineNumber":424,"author":{"gitId":"unfazing"},"content":"| Show All Cards | `showCards`                                                                                                                                      |","lastModifiedDate":"2023-03-30"},{"lineNumber":425,"author":{"gitId":"unfazing"},"content":"| Start Review   | `review INDEX`                                                                                                                                   |","lastModifiedDate":"2023-03-30"},{"lineNumber":426,"author":{"gitId":"unfazing"},"content":"| Set Limit      | `setLimit LIMIT_NUM` \u003cbr /\u003e e.g., `setLimit 30`                                                                                                  |","lastModifiedDate":"2023-03-30"},{"lineNumber":427,"author":{"gitId":"unfazing"},"content":"| Clear          | `clear`                                                                                                                                          |","lastModifiedDate":"2023-03-30"},{"lineNumber":428,"author":{"gitId":"unfazing"},"content":"| Help           | `help`                                                                                                                                           |","lastModifiedDate":"2023-03-30"},{"lineNumber":429,"author":{"gitId":"ruiyigan"},"content":"| Exit           | `exit`                                                                                                                                           |","lastModifiedDate":"2023-03-26"},{"lineNumber":430,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":431,"author":{"gitId":"ruiyigan"},"content":"### Review mode","lastModifiedDate":"2023-03-26"},{"lineNumber":432,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":433,"author":{"gitId":"ruiyigan"},"content":"| Action        | Format, Examples |","lastModifiedDate":"2023-03-26"},{"lineNumber":434,"author":{"gitId":"ruiyigan"},"content":"|---------------|------------------|","lastModifiedDate":"2023-03-26"},{"lineNumber":435,"author":{"gitId":"ruiyigan"},"content":"| End Review    | `endReview`      |","lastModifiedDate":"2023-03-26"},{"lineNumber":436,"author":{"gitId":"unfazing"},"content":"| Flip          | `p`              |","lastModifiedDate":"2023-03-30"},{"lineNumber":437,"author":{"gitId":"ruiyigan"},"content":"| Previous Card | `[`              |","lastModifiedDate":"2023-03-26"},{"lineNumber":438,"author":{"gitId":"ruiyigan"},"content":"| Next Card     | `]`              |","lastModifiedDate":"2023-03-26"},{"lineNumber":439,"author":{"gitId":"unfazing"},"content":"| Tag Easy      | `l`              |","lastModifiedDate":"2023-03-30"},{"lineNumber":440,"author":{"gitId":"unfazing"},"content":"| Tag Medium    | `;`              |","lastModifiedDate":"2023-03-30"},{"lineNumber":441,"author":{"gitId":"unfazing"},"content":"| Tag Hard      | `\u0027`              |","lastModifiedDate":"2023-03-30"},{"lineNumber":442,"author":{"gitId":"unfazing"},"content":"| Help          | `help`           |","lastModifiedDate":"2023-03-30"},{"lineNumber":443,"author":{"gitId":"ruiyigan"},"content":"| Exit          | `exit`           |","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"rockman007372":55,"ruiyigan":96,"unfazing":144,"-":122,"HJ-PRK":26}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"logic -[LOGIC_COLOR]\u003e model : deleteCard(c)","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveMasterDeck(masterDeck)","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ruiyigan":2,"-":36}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"MasterDeck *-right-\u003e \"1\" UniqueCardList","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"MasterDeck *-right-\u003e \"1\" UniqueTagList","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"UniqueTagList -[hidden]down- UniqueCardList","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"UniqueTagList -[hidden]down- UniqueCardList","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"UniqueTagList -right-\u003e \"*\" Tag","lastModifiedDate":"2023-01-01"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"UniqueCardList -right-\u003e Card","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"Card -up-\u003e \"*\" Tag","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"Card *--\u003e Name","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"Card *--\u003e Phone","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"Card *--\u003e Email","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"Card *--\u003e Address","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ruiyigan":10,"-":11}},{"path":"docs/diagrams/CommandActivityFlowDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"@startuml","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"sprite $rake [16x16/8] {","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"0000000000000000","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"0000000jj0000000","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"0000000jj0000000","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"0005555jj5555000","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"000jjeejjeejj000","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"000jj00jj00jj000","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"000jj00jj00jj000","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"0000000000000000","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"start","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":":User executes command;","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"switch (mode)","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"case ( Main )","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"  :Check validity of command \u003c$rake\u003e;","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"case ( Deck )","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"  :Check validity of command \u003c$rake\u003e;","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"case ( Review )","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"  :Check validity of command \u003c$rake\u003e;","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"endswitch","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"stop","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"@enduml","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"ruiyigan":27}},{"path":"docs/diagrams/CommandValidityActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"@startuml","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"start","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":":User\u0027s command;","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"if () then ([command is valid in current mode])","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"    :Save Command Result to Model;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"    :Store changes in MasterDeckStorage;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"    :Display Command Result;","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"else ([else])","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"    :Throws CommandException;","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"    :Displays error message;","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"endif","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"stop","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"@enduml","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"ruiyigan":17}},{"path":"docs/diagrams/CommitActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"start","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":":User executes command;","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"if () then ([command commits MasterDeck])","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    :Purge redundant states;","lastModifiedDate":"2020-12-12"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    :Save MasterDeck to","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    addressBookStateList;","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"else ([else])","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"endif","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"stop","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ruiyigan":2,"-":13}},{"path":"docs/diagrams/ComponentManagers.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"package Logic as PackageLogic {","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nLogic\" as Logic","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"package Model as PackageModel {","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"package Storage as PackageStorage {","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"LogicManager .up.|\u003e Logic","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"LogicManager --\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"ruiyigan":3,"-":28}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"participant \":MasterDeckParser\" as MasterDeckParser LOGIC_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"LogicManager -\u003e MasterDeckParser : parseCommand(\"delete 1\")","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"activate MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"MasterDeckParser -\u003e DeleteCommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"DeleteCommandParser --\u003e MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"MasterDeckParser -\u003e DeleteCommandParser : parse(\"1\")","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"DeleteCommandParser --\u003e MasterDeckParser : d","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"DeleteCommandParser -[hidden]-\u003e MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"MasterDeckParser --\u003e LogicManager : d","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"deactivate MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"DeleteCommand -\u003e Model : deleteCard(c)","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ruiyigan":11,"-":58}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"package Logic as PackageLogic {","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"Class MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nLogic\" as Logic","lastModifiedDate":"2022-01-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"package Model{","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"LogicManager .right.|\u003e Logic","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"LogicManager -right-\u003e\"1\" MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"MasterDeckParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e","lastModifiedDate":"2019-07-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager --\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Storage --[hidden] Model","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Command .[hidden]up.\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc","lastModifiedDate":"2023-03-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult : produces \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ruiyigan":4,"-":42}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"Package Model as PackageModel \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyMasterDeck\" as ReadOnlyMasterDeck","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"Class MasterDeck","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"Class UniqueCardList","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"Class UniqueDeckList","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"Class Review","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"Class Card","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"Class Question","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"Class Answer","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"Class Deck","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"MasterDeck .up.|\u003e ReadOnlyMasterDeck","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"Model .left.\u003e ReadOnlyMasterDeck","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"ModelManager -down-\u003e \"1\" MasterDeck","lastModifiedDate":"2023-03-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"ModelManager -left-\u003e \"0..1\" Review","lastModifiedDate":"2023-03-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"MasterDeck *--\u003e \"1\" UniqueCardList","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"MasterDeck *--\u003e \"1\" UniqueDeckList","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"UniqueCardList --\u003e \"~* all\" Card","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"UniqueDeckList -right-\u003e \"~* all\" Deck","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"Card *--\u003e \"1\" Question","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"Card *--\u003e \"1\" Answer","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"Card --\u003e \"0..1\" Tag","lastModifiedDate":"2023-03-24"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"Card -up-\u003e \"1\" Deck","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"ModelManager ---\u003e\"~* filtered\" Card","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"ModelManager --\u003e \"0..1 selected\" Deck","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"ModelManager --\u003e\"~* filtered\" Deck","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ruiyigan":26,"-":27}},{"path":"docs/diagrams/ParserClasses.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"package \"Parser classes\"{","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nParser\" as Parser","lastModifiedDate":"2022-01-03"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"Class MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"HiddenOutside ..\u003e MasterDeckParser","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"MasterDeckParser .down.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"MasterDeckParser ..\u003e Command : returns \u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"XYZCommandParser .up.|\u003e Parser","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"ruiyigan":4,"-":34}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"package Storage as PackageStorage {","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"package \"MasterDeck Storage\" #F4F6F6{","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nMasterDeckStorage\" as MasterDeckStorage","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"Class JsonMasterDeckStorage","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"Class JsonSerializableMasterDeck","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"Class JsonAdaptedCard","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"Class JsonAdaptedDeck","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"StorageManager -up-\u003e \"1\" MasterDeckStorage","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"Storage -right-|\u003e MasterDeckStorage","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"JsonMasterDeckStorage .up.|\u003e MasterDeckStorage","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"JsonMasterDeckStorage ..\u003e JsonSerializableMasterDeck","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"JsonSerializableMasterDeck --\u003e \"*\" JsonAdaptedCard","lastModifiedDate":"2023-03-24"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"JsonSerializableMasterDeck --\u003e \"*\" JsonAdaptedDeck","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"JsonAdaptedCard --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2023-03-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ruiyigan":14,"-":31}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"Participant \":MasterDeckParser\" as abp LOGIC_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"ecp -\u003e ec ++: index, editCardDescriptor","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"ruiyigan":2,"-":19}},{"path":"docs/team/hj-prk.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"title: Park Hyunjin\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"### Project: PowerCards","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"* **New Feature**:  (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"* **Project management**:","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"    * User Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"        * A(To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"* **Community**:","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"* **Tools**:","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"HJ-PRK":47}},{"path":"docs/team/junianob.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"title: Bryan Juniano\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"### Project: PowerCards","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"* **Project management**:","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"    * User Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"        * A(To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"* **Community**:","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"* **Tools**:","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"junianob":46}},{"path":"docs/team/rockman007372.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"---","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"layout: page ","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"title: Tran Hieu Nghia\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"---","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"### Project: PowerCards","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-03-05"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-05"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"* **New Feature**:  (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"* **Project management**:","lastModifiedDate":"2023-03-05"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-05"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-05"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    * User Guide:","lastModifiedDate":"2023-03-05"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"        * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-05"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"        * A(To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"* **Community**:","lastModifiedDate":"2023-03-05"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"* **Tools**:","lastModifiedDate":"2023-03-05"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"rockman007372":46}},{"path":"docs/team/ruiyigan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"title: Gan Rui Yi\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"### Project: PowerCards","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"* **Project management**:","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    * User Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        * A(To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"* **Community**:","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"* **Tools**:","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"ruiyigan":46}},{"path":"docs/team/unfazing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"---","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"layout: page","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"title: Lian Kok Hai\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"---","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"### Project: PowerCards","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"* **Project management**:","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"    * User Guide:","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        * A(To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"* **Community**:","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"* **Tools**:","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"unfazing":46}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":" * Changes the remark of an existing card in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"            + \": Edits the remark of the card identified \"","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"            + \"by the index number used in the last card listing. \"","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"     * @param index of the card in the filtered card list to edit the remark","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"     * @param remark of the card to be updated to","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of card data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the card’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a card.","lastModifiedDate":"2023-03-10"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"unfazing"},"content":"Create a new `Remark` in `seedu.address.model.card`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2023-03-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"unfazing"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each card.","lastModifiedDate":"2023-03-10"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"junianob"},"content":"Simply add the following to [`seedu.address.ui.CardElement`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2023-03-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"unfazing"},"content":"public PersonCard(Person card, int displayedIndex) {","lastModifiedDate":"2023-03-10"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"unfazing"},"content":"    remark.setText(card.getRemark().value);","lastModifiedDate":"2023-03-10"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"unfazing"},"content":"        Person cardToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":347,"author":{"gitId":"unfazing"},"content":"        Person editedCard \u003d new Person(","lastModifiedDate":"2023-03-10"},{"lineNumber":348,"author":{"gitId":"unfazing"},"content":"                cardToEdit.getName(), cardToEdit.getPhone(), cardToEdit.getEmail(),","lastModifiedDate":"2023-03-10"},{"lineNumber":349,"author":{"gitId":"unfazing"},"content":"                cardToEdit.getAddress(), remark, cardToEdit.getTags());","lastModifiedDate":"2023-03-10"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"unfazing"},"content":"        model.setPerson(cardToEdit, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(generateSuccessMessage(editedCard));","lastModifiedDate":"2023-03-10"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"unfazing"},"content":"     * {@code cardToEdit}.","lastModifiedDate":"2023-03-10"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"unfazing"},"content":"    private String generateSuccessMessage(Person cardToEdit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"unfazing"},"content":"        return String.format(message, cardToEdit);","lastModifiedDate":"2023-03-10"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"junianob":1,"unfazing":19,"-":381}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.card.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"  \"cards\": [ {","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"unfazing":2,"-":110}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.address.logic.Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"A quick look at the `seedu.address.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"unfazing"},"content":"       Person cardToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":193,"author":{"gitId":"ruiyigan"},"content":"       Person editedCard \u003d createEditedPerson(cardToEdit, editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"       if (!cardToEdit.isSamePerson(editedCard) \u0026\u0026 model.hasPerson(editedCard)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"       model.setPerson(cardToEdit, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"unfazing"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCard));","lastModifiedDate":"2023-03-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"unfazing"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the card data.","lastModifiedDate":"2023-03-10"},{"lineNumber":205,"author":{"gitId":"unfazing"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ cards.\u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"unfazing"},"content":"     FYI, The \u0027filtered list\u0027 is the list of cards resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the cards so that the user can see the edited card along with all other cards. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":207,"author":{"gitId":"unfazing"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of cards is being tracked.","lastModifiedDate":"2023-03-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"unfazing"},"content":"        cards.addAll(","lastModifiedDate":"2023-03-10"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ruiyigan":1,"unfazing":9,"-":291}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"import seedu.address.storage.JsonMasterDeckStorage;","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"import seedu.address.storage.MasterDeckStorage;","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"    public static final Version VERSION \u003d new Version(1, 2, 1, true);","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Deck ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeckStorage masterDeckStorage \u003d new JsonMasterDeckStorage(userPrefs.getMasterDeckFilePath());","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"        storage \u003d new StorageManager(masterDeckStorage, userPrefsStorage);","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s master deck and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"     * The data from the sample master deck will be used instead if {@code storage}\u0027s master deck is not found,","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"     * or an empty master deck will be used instead if errors occur when reading {@code storage}\u0027s master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        Optional\u003cReadOnlyMasterDeck\u003e masterDeckOptional;","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"        ReadOnlyMasterDeck initialData;","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"            masterDeckOptional \u003d storage.readMasterDeck();","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"            if (masterDeckOptional.isEmpty()) {","lastModifiedDate":"2023-03-19"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"HJ-PRK"},"content":"            initialData \u003d masterDeckOptional.orElseGet(SampleDataUtil::getSampleMasterDeck);","lastModifiedDate":"2023-03-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"            initialData \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"            initialData \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"unfazing"},"content":"        logger.info(\"Starting Deck \" + MainApp.VERSION);","lastModifiedDate":"2023-03-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"HJ-PRK"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PowerCard ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-03-19"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rockman007372":3,"ruiyigan":1,"unfazing":6,"-":159,"HJ-PRK":14}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    private static final String LOG_FILE \u003d \"masterdeck.log\";","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":111,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid\";","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_DECKS_LISTED_OVERVIEW \u003d \"%1$d decks listed!\";","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_NO_DECK_SELECTED \u003d \"No deck currently selected \"","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"            + \"- Select a deck to run \u0027%1$s\u0027 command :)\";","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_DECK_SELECTED \u003d \"You\u0027ve currently selected a deck \"","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"            + \"- Unselect the deck to run \u0027%1$s\u0027 command :)\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_NOT_IN_REVIEW \u003d \"You\u0027re currently not in a review \"","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"            + \"- Start a review to run \u0027%1$s\u0027 command :)\";","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_IN_REVIEW \u003d \"You\u0027re currently in a review \"","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"            + \"- End the review to run \u0027%1$s\u0027 command :)\";","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ruiyigan":3,"unfazing":8,"-":10,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.ModelState;","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"     * Returns the Deck.","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"     * @see seedu.address.model.Model#getMasterDeck()","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"    ReadOnlyMasterDeck getMasterDeck();","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"    /** Returns an unmodifiable view of the filtered list of cards */","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"    ObservableList\u003cCard\u003e getFilteredCardList();","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"    /** Returns an unmodifiable view of the filtered list of decks */","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"    ObservableList\u003cDeck\u003e getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"     * Returns the user prefs\u0027 master deck file path.","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    Path getMasterDeckFilePath();","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"     * Returns the current mode of the application.","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"     * @return the state the model is in.","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"    ModelState getMode();","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"junianob"},"content":"    ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewStatsList();","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"    ObservableList\u003cString\u003e getDeckNameList();","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"junianob"},"content":"    ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewDeckNameList();","lastModifiedDate":"2023-03-22"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"     * Returns the card list storing cards in Review.","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"     * @return The Observable List in Review.","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"    ObservableList\u003cCard\u003e getReviewCardList();","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"     * Removes all the card and deck data of users.","lastModifiedDate":"2023-03-24"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"    void factoryReset();","lastModifiedDate":"2023-03-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"rockman007372":21,"junianob":8,"unfazing":4,"-":41,"HJ-PRK":6}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.parser.MasterDeckParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.ModelState;","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    public static final String UNKNOWN_STATE_MESSAGE \u003d \"Unknown state reached\";","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"    private final MasterDeckParser masterDeckParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        masterDeckParser \u003d new MasterDeckParser();","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        Command command;","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"        ModelState currentState \u003d model.getState();","lastModifiedDate":"2023-03-23"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"        switch (currentState) {","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"        case MAIN_UNSELECTED_MODE:","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"            command \u003d masterDeckParser.parseCommandInMainUnselectedMode(commandText);","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"            break;","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"        case MAIN_SELECTED_MODE:","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"            command \u003d masterDeckParser.parseCommandInMainSelectedMode(commandText);","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"            break;","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"        case REVIEW_MODE:","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"            command \u003d masterDeckParser.parseCommandInReviewMode(commandText);","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"            break;","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        default:","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"            throw new CommandException(UNKNOWN_STATE_MESSAGE);","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"        CommandResult commandResult \u003d command.execute(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"            storage.saveMasterDeck(model.getMasterDeck());","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"    public ReadOnlyMasterDeck getMasterDeck() {","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"        return model.getMasterDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"    public ObservableList\u003cCard\u003e getFilteredCardList() {","lastModifiedDate":"2023-03-19"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"        return model.getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cDeck\u003e getFilteredDeckList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"junianob"},"content":"        return model.getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cString\u003e getDeckNameList() {","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"rockman007372"},"content":"        return FXCollections.observableArrayList(model.getSelectedDeckName());","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"    public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"        return model.getMasterDeckFilePath();","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":114,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewStatsList() {","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"        return model.getReviewStatsList();","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"    public ModelState getMode() {","lastModifiedDate":"2023-03-23"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"        return this.model.getState();","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"junianob"},"content":"    @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":124,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewDeckNameList() {","lastModifiedDate":"2023-03-22"},{"lineNumber":125,"author":{"gitId":"junianob"},"content":"        return model.getReviewDeckNameList();","lastModifiedDate":"2023-03-22"},{"lineNumber":126,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cCard\u003e getReviewCardList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"rockman007372"},"content":"        return model.getReviewCardList();","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"rockman007372"},"content":"    public void factoryReset() {","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"rockman007372"},"content":"        model.setMasterDeck(new MasterDeck());","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"rockman007372"},"content":"        try {","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"rockman007372"},"content":"            storage.saveMasterDeck(model.getMasterDeck());","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"rockman007372"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-03-24"},{"lineNumber":139,"author":{"gitId":"rockman007372"},"content":"            logger.info(\"Something went wrong while resetting data.\");","lastModifiedDate":"2023-03-24"},{"lineNumber":140,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"rockman007372":42,"junianob":10,"ruiyigan":6,"unfazing":12,"-":68,"HJ-PRK":4}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.ClearCommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":" * Asks for user confirmation before clearing the master deck.","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Please confirm before continue!\";","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"        return new ClearCommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":5,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PowerCard as requested ...\";","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"                false, true, false, false, false, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"rockman007372":2,"junianob":1,"-":17,"HJ-PRK":2}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE,","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"                true, false, false, false, false, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":2,"junianob":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/cardcommands/AddCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":" * Adds a card to the selected deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"public class AddCardCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    public static final String COMMAND_WORD \u003d \"addCard\";","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card to the selected deck. \"","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_QUESTION + \"QUESTION \"","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_ANSWER + \"ANSWER \"","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_TAG + \"TAG...\\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_QUESTION + \"When was the RSA (Rivest–Shamir–Adleman) algorithm invented? \"","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_ANSWER + \"1977 by Ron Rivest, Adi Shamir, and Leonard Adleman \"","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_TAG + \"hard\";","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in this selected deck.\";","lastModifiedDate":"2023-03-26"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_NO_SELECTED_DECK \u003d \"A deck must be selected before a card can be added\";","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"    private final AddCardDescriptor cardDescriptor;","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"     * Creates an AddCardCommand to add the specified {@code AddCardDescriptor} as Card","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"    public AddCardCommand(AddCardDescriptor cardDescriptor) {","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(cardDescriptor);","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        this.cardDescriptor \u003d new AddCardDescriptor(cardDescriptor);","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"        Optional\u003cDeck\u003e selectedDeck \u003d model.getSelectedDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"        assert selectedDeck.isPresent() : MESSAGE_NO_SELECTED_DECK;","lastModifiedDate":"2023-03-23"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"        cardDescriptor.setDeck(selectedDeck.get());","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        Card toAdd \u003d cardDescriptor.buildCard();","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"        if (model.hasCard(toAdd)) {","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"        model.addCard(toAdd);","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"                || (other instanceof AddCardCommand // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 cardDescriptor.equals(((AddCardCommand) other).cardDescriptor));","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"     * Stores the details to add a card without a deck assigned.","lastModifiedDate":"2023-03-22"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"    public static class AddCardDescriptor {","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"        private Question question;","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"rockman007372"},"content":"        private Answer answer;","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        private Tag tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"rockman007372"},"content":"        private Deck deck;","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"        public AddCardDescriptor() {}","lastModifiedDate":"2023-03-22"},{"lineNumber":85,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":86,"author":{"gitId":"rockman007372"},"content":"        /**","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"rockman007372"},"content":"         * Constructor for a Card Descriptor to be used to create a card instance.","lastModifiedDate":"2023-03-22"},{"lineNumber":88,"author":{"gitId":"rockman007372"},"content":"         * @param question Question of the card to create","lastModifiedDate":"2023-03-22"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"         * @param answer Answer of the card to create","lastModifiedDate":"2023-03-22"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"         * @param tag Tag of the card to create","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"         */","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        public AddCardDescriptor(Question question, Answer answer, Tag tag) {","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"rockman007372"},"content":"            this.question \u003d question;","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"rockman007372"},"content":"            this.answer \u003d answer;","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"            this.tag \u003d tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"rockman007372"},"content":"        /**","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"rockman007372"},"content":"         * Copy constructor.","lastModifiedDate":"2023-03-22"},{"lineNumber":100,"author":{"gitId":"rockman007372"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"rockman007372"},"content":"         */","lastModifiedDate":"2023-03-22"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"        public AddCardDescriptor(AddCardCommand.AddCardDescriptor toCopy) {","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"rockman007372"},"content":"            setQuestion(toCopy.question);","lastModifiedDate":"2023-03-22"},{"lineNumber":104,"author":{"gitId":"rockman007372"},"content":"            setAnswer(toCopy.answer);","lastModifiedDate":"2023-03-22"},{"lineNumber":105,"author":{"gitId":"ruiyigan"},"content":"            setTag(toCopy.tag);","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"            setDeck(toCopy.deck);","lastModifiedDate":"2023-03-22"},{"lineNumber":107,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":109,"author":{"gitId":"rockman007372"},"content":"        public void setQuestion(Question question) {","lastModifiedDate":"2023-03-22"},{"lineNumber":110,"author":{"gitId":"rockman007372"},"content":"            this.question \u003d question;","lastModifiedDate":"2023-03-22"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"        public Question getQuestion() {","lastModifiedDate":"2023-03-22"},{"lineNumber":114,"author":{"gitId":"rockman007372"},"content":"            return question;","lastModifiedDate":"2023-03-22"},{"lineNumber":115,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"        public void setAnswer(Answer answer) {","lastModifiedDate":"2023-03-22"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"            this.answer \u003d answer;","lastModifiedDate":"2023-03-22"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"        public Answer getAnswer() {","lastModifiedDate":"2023-03-22"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"            return answer;","lastModifiedDate":"2023-03-22"},{"lineNumber":123,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":124,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":125,"author":{"gitId":"rockman007372"},"content":"        public void setDeck(Deck deck) {","lastModifiedDate":"2023-03-22"},{"lineNumber":126,"author":{"gitId":"rockman007372"},"content":"            this.deck \u003d deck;","lastModifiedDate":"2023-03-22"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":128,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"        /**","lastModifiedDate":"2023-03-22"},{"lineNumber":130,"author":{"gitId":"ruiyigan"},"content":"         * Sets {@code tag} to this object\u0027s {@code tag}.","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"         */","lastModifiedDate":"2023-03-22"},{"lineNumber":132,"author":{"gitId":"ruiyigan"},"content":"        public void setTag(Tag tag) {","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"ruiyigan"},"content":"            this.tag \u003d tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":135,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":136,"author":{"gitId":"rockman007372"},"content":"        /**","lastModifiedDate":"2023-03-22"},{"lineNumber":137,"author":{"gitId":"ruiyigan"},"content":"         * Returns an unmodifiable tag, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"rockman007372"},"content":"         * if modification is attempted.","lastModifiedDate":"2023-03-22"},{"lineNumber":139,"author":{"gitId":"rockman007372"},"content":"         */","lastModifiedDate":"2023-03-22"},{"lineNumber":140,"author":{"gitId":"ruiyigan"},"content":"        public Tag getTag() {","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"ruiyigan"},"content":"            return tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":144,"author":{"gitId":"rockman007372"},"content":"        /**","lastModifiedDate":"2023-03-22"},{"lineNumber":145,"author":{"gitId":"rockman007372"},"content":"         * Creates an immutable card that is associated with the given deck.","lastModifiedDate":"2023-03-22"},{"lineNumber":146,"author":{"gitId":"rockman007372"},"content":"         *","lastModifiedDate":"2023-03-22"},{"lineNumber":147,"author":{"gitId":"rockman007372"},"content":"         * @return The new Card instance.","lastModifiedDate":"2023-03-22"},{"lineNumber":148,"author":{"gitId":"rockman007372"},"content":"         */","lastModifiedDate":"2023-03-22"},{"lineNumber":149,"author":{"gitId":"rockman007372"},"content":"        public Card buildCard() {","lastModifiedDate":"2023-03-22"},{"lineNumber":150,"author":{"gitId":"ruiyigan"},"content":"            return new Card(question, answer, tag, deck);","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":153,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":154,"author":{"gitId":"rockman007372"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-03-22"},{"lineNumber":155,"author":{"gitId":"rockman007372"},"content":"            // short circuit if same object","lastModifiedDate":"2023-03-22"},{"lineNumber":156,"author":{"gitId":"rockman007372"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-22"},{"lineNumber":157,"author":{"gitId":"rockman007372"},"content":"                return true;","lastModifiedDate":"2023-03-22"},{"lineNumber":158,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-22"},{"lineNumber":159,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":160,"author":{"gitId":"rockman007372"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-03-22"},{"lineNumber":161,"author":{"gitId":"ruiyigan"},"content":"            if (!(other instanceof AddCardCommand.AddCardDescriptor)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":162,"author":{"gitId":"rockman007372"},"content":"                return false;","lastModifiedDate":"2023-03-22"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-22"},{"lineNumber":164,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":165,"author":{"gitId":"rockman007372"},"content":"            // state check","lastModifiedDate":"2023-03-22"},{"lineNumber":166,"author":{"gitId":"ruiyigan"},"content":"            AddCardCommand.AddCardDescriptor otherDesc \u003d (AddCardCommand.AddCardDescriptor) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":167,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":168,"author":{"gitId":"rockman007372"},"content":"            return question.equals(otherDesc.question)","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"rockman007372"},"content":"                    \u0026\u0026 answer.equals(otherDesc.answer)","lastModifiedDate":"2023-03-26"},{"lineNumber":170,"author":{"gitId":"rockman007372"},"content":"                    \u0026\u0026 tag \u003d\u003d null ? otherDesc.tag \u003d\u003d null : tag.equals(otherDesc.tag);","lastModifiedDate":"2023-03-26"},{"lineNumber":171,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":105,"ruiyigan":36,"unfazing":3,"-":29}},{"path":"src/main/java/seedu/address/logic/commands/cardcommands/DeleteCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":" * Deletes a card identified using it\u0027s displayed index from the selected deck.","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"public class DeleteCardCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public static final String COMMAND_WORD \u003d \"deleteCard\";","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"            + \": Deletes the card identified by the index number used in the displayed selected deck.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public DeleteCardCommand(Index targetIndex) {","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        Card cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        model.deleteCard(cardToDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"                || (other instanceof DeleteCardCommand // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex)); // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":3,"ruiyigan":10,"unfazing":4,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/cardcommands/EditCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":" * Edits the details of an existing card in the selected deck.","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"public class EditCardCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public static final String COMMAND_WORD \u003d \"editCard\";","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card identified \"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"            + \"by the index number used in the displayed card list. \"","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"            + \"[\" + PREFIX_QUESTION + \"QUESTION] \"","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"            + \"[\" + PREFIX_ANSWER + \"ANSWER] \"","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the master deck.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"    private final EditCardDescriptor editCardDescriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"     * @param index of the card in the selected deck to edit","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"     * @param editCardDescriptor details to edit the card with","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"    public EditCardCommand(Index index, EditCardDescriptor editCardDescriptor) {","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"        Card cardToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"        if (!cardToEdit.isSameCard(editedCard) \u0026\u0026 model.hasCard(editedCard)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"        model.setCard(cardToEdit, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"     * Creates and returns a {@code Card} with the details of {@code cardToEdit}","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"     * edited with {@code editCardDescriptor}.","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor) {","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"        assert cardToEdit !\u003d null;","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"        Question updatedQuestion \u003d editCardDescriptor.getQuestion().orElse(cardToEdit.getQuestion());","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"        Answer updatedAnswer \u003d editCardDescriptor.getAnswer().orElse(cardToEdit.getAnswer());","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"        Tag updatedTag \u003d editCardDescriptor.getTag().orElse(cardToEdit.getTag());","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"        assert cardToEdit.getDeck() !\u003d null : \"The edited card must be inside a deck\";","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"        Deck updatedDeck \u003d cardToEdit.getDeck();","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"ruiyigan"},"content":"        return new Card(updatedQuestion, updatedAnswer, updatedTag, updatedDeck);","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":104,"author":{"gitId":"ruiyigan"},"content":"        if (!(other instanceof EditCardCommand)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand e \u003d (EditCardCommand) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"     * Stores the details to edit the card with. Each non-empty field value will replace the","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"     * corresponding field value of the card.","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":118,"author":{"gitId":"ruiyigan"},"content":"    public static class EditCardDescriptor {","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"        private Question question;","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"        private Answer answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"ruiyigan"},"content":"        private Tag tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"        private Deck deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":124,"author":{"gitId":"ruiyigan"},"content":"        public EditCardDescriptor() {}","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":130,"author":{"gitId":"ruiyigan"},"content":"        public EditCardDescriptor(EditCardDescriptor toCopy) {","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"ruiyigan"},"content":"            setQuestion(toCopy.question);","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"ruiyigan"},"content":"            setAnswer(toCopy.answer);","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"ruiyigan"},"content":"            setTag(toCopy.tag);","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"ruiyigan"},"content":"            setDeck(toCopy.deck);","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"ruiyigan"},"content":"            return CollectionUtil.isAnyNonNull(question, answer, tag);","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"ruiyigan"},"content":"        public void setQuestion(Question question) {","lastModifiedDate":"2023-03-14"},{"lineNumber":145,"author":{"gitId":"unfazing"},"content":"            this.question \u003d question;","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"ruiyigan"},"content":"        public Optional\u003cQuestion\u003e getQuestion() {","lastModifiedDate":"2023-03-14"},{"lineNumber":149,"author":{"gitId":"unfazing"},"content":"            return Optional.ofNullable(question);","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"ruiyigan"},"content":"        public void setAnswer(Answer answer) {","lastModifiedDate":"2023-03-14"},{"lineNumber":153,"author":{"gitId":"unfazing"},"content":"            this.answer \u003d answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"ruiyigan"},"content":"        public Optional\u003cAnswer\u003e getAnswer() {","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"unfazing"},"content":"            return Optional.ofNullable(answer);","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":160,"author":{"gitId":"rockman007372"},"content":"        public void setDeck(Deck deck) {","lastModifiedDate":"2023-03-18"},{"lineNumber":161,"author":{"gitId":"ruiyigan"},"content":"            this.deck \u003d deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":162,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":164,"author":{"gitId":"rockman007372"},"content":"        public Optional\u003cDeck\u003e getDeck() {","lastModifiedDate":"2023-03-18"},{"lineNumber":165,"author":{"gitId":"ruiyigan"},"content":"            return Optional.ofNullable(deck);","lastModifiedDate":"2023-03-12"},{"lineNumber":166,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":169,"author":{"gitId":"ruiyigan"},"content":"         * Sets {@code tag} to this object\u0027s {@code tag}.","lastModifiedDate":"2023-03-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":171,"author":{"gitId":"ruiyigan"},"content":"        public void setTag(Tag tag) {","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"ruiyigan"},"content":"            this.tag \u003d tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":176,"author":{"gitId":"ruiyigan"},"content":"         * Returns an unmodifiable tag, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":178,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":179,"author":{"gitId":"ruiyigan"},"content":"        public Optional\u003cTag\u003e getTag() {","lastModifiedDate":"2023-03-25"},{"lineNumber":180,"author":{"gitId":"ruiyigan"},"content":"            return Optional.ofNullable(tag);","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":191,"author":{"gitId":"ruiyigan"},"content":"            if (!(other instanceof EditCardDescriptor)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":196,"author":{"gitId":"ruiyigan"},"content":"            EditCardDescriptor e \u003d (EditCardDescriptor) other;","lastModifiedDate":"2023-03-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"ruiyigan"},"content":"            return getQuestion().equals(e.getQuestion())","lastModifiedDate":"2023-03-14"},{"lineNumber":199,"author":{"gitId":"ruiyigan"},"content":"                    \u0026\u0026 getAnswer().equals(e.getAnswer())","lastModifiedDate":"2023-03-14"},{"lineNumber":200,"author":{"gitId":"ruiyigan"},"content":"                    \u0026\u0026 getTag().equals(e.getTag());","lastModifiedDate":"2023-03-25"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"rockman007372":11,"ruiyigan":57,"unfazing":19,"-":115,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/logic/commands/cardcommands/FindCardsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.cardcommands.AddCardCommand.MESSAGE_NO_SELECTED_DECK;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import java.util.List;","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.CardInDeckPredicate;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":" * Finds and lists all cards in the selected deck that contain any of the argument keywords.","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"public class FindCardsCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    public static final String COMMAND_WORD \u003d \"findCards\";","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cards that contain any of \"","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"            + \"Example: \" + COMMAND_WORD + \" gravity constant\";","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    private final QuestionContainsKeywordsPredicate cardPredicate;","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"     * Constructs a FindCardsCommand with the given list of keywords.","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"     * The command will search for cards in the selected deck that contain any of the keywords.","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"     * @param keywords the list of keywords to search for","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"    public FindCardsCommand(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        this.cardPredicate \u003d new QuestionContainsKeywordsPredicate(keywords);","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        Optional\u003cDeck\u003e selectedDeck \u003d model.getSelectedDeck();","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        assert selectedDeck.isPresent() : MESSAGE_NO_SELECTED_DECK;","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        model.updateFilteredCardList(cardPredicate.and(new CardInDeckPredicate(selectedDeck.get())));","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"                String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, model.getFilteredCardList().size()),","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"                false, false, false, false, false, false, true, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"                || (other instanceof FindCardsCommand // instanceof handles nulls","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 cardPredicate.equals(((FindCardsCommand) other).cardPredicate)); // state check","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"junianob":2,"ruiyigan":57}},{"path":"src/main/java/seedu/address/logic/commands/cardcommands/ShowCardsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.cardcommands.AddCardCommand.MESSAGE_NO_SELECTED_DECK;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.CardInDeckPredicate;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":" * Lists all cards in the selected deck to the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"public class ShowCardsCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public static final String COMMAND_WORD \u003d \"showCards\";","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all cards in selected deck\";","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        Optional\u003cDeck\u003e selectedDeck \u003d model.getSelectedDeck();","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        assert selectedDeck.isPresent() : MESSAGE_NO_SELECTED_DECK;","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS.and(new CardInDeckPredicate(selectedDeck.get())));","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"        return new CommandResult(MESSAGE_SUCCESS,","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"                false, false, false, false, false, false, false, false, true, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"junianob":2,"ruiyigan":32}},{"path":"src/main/java/seedu/address/logic/commands/commandresult/ClearCommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.commandresult;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":" * Represents the result of a Clear command execution.","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"public class ClearCommandResult extends CommandResult {","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"    public ClearCommandResult(String feedback) {","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"        super(feedback);","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"    public boolean isClear() {","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"        return true;","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"rockman007372":16}},{"path":"src/main/java/seedu/address/logic/commands/commandresult/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.commandresult;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"    /** The application should select a Deck**/","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"    private final boolean selectDeck;","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"    /** The application should unselect a Deck**/","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"    private final boolean unselectDeck;","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    /** The application should end a review **/","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    private final boolean startReview;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"    /** The application should end a review **/","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"    private final boolean endReview;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"    /** The application should find cards **/","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"    private final boolean findCards;","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"    /** The application should find decks **/","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"    private final boolean findDecks;","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"    /** The application should show all cards**/","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"    private final boolean showCards;","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"    /** The application should show all decks**/","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"    private final boolean showDecks;","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"    public CommandResult(","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"            String feedbackToUser, boolean showHelp, boolean exit,","lastModifiedDate":"2023-03-23"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"            boolean startReview, boolean endReview, boolean selectDeck, boolean unselectDeck,","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"            boolean findCards, boolean findDecks, boolean showCards, boolean showDecks) {","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"junianob"},"content":"        this.selectDeck \u003d selectDeck;","lastModifiedDate":"2023-03-23"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"        this.unselectDeck \u003d unselectDeck;","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"        this.startReview \u003d startReview;","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"        this.endReview \u003d endReview;","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"        this.findCards \u003d findCards;","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"        this.findDecks \u003d findDecks;","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"        this.showCards \u003d showCards;","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"junianob"},"content":"        this.showDecks \u003d showDecks;","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"junianob"},"content":"        this(feedbackToUser,","lastModifiedDate":"2023-03-23"},{"lineNumber":72,"author":{"gitId":"junianob"},"content":"                false, false, false, false, false, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"    public boolean isStartReview() {","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        return startReview;","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"    public boolean isEndReview() {","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"        return endReview;","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"junianob"},"content":"    public boolean isSelectDeck() {","lastModifiedDate":"2023-03-23"},{"lineNumber":96,"author":{"gitId":"junianob"},"content":"        return selectDeck;","lastModifiedDate":"2023-03-23"},{"lineNumber":97,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":98,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":99,"author":{"gitId":"junianob"},"content":"    public boolean isUnselectDeck() {","lastModifiedDate":"2023-03-23"},{"lineNumber":100,"author":{"gitId":"junianob"},"content":"        return unselectDeck;","lastModifiedDate":"2023-03-23"},{"lineNumber":101,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"junianob"},"content":"    public boolean isFindCards() {","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"junianob"},"content":"        return findCards;","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"junianob"},"content":"    public boolean isFindDecks() {","lastModifiedDate":"2023-03-30"},{"lineNumber":108,"author":{"gitId":"junianob"},"content":"        return findDecks;","lastModifiedDate":"2023-03-30"},{"lineNumber":109,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":110,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":111,"author":{"gitId":"junianob"},"content":"    public boolean isShowCards() {","lastModifiedDate":"2023-03-30"},{"lineNumber":112,"author":{"gitId":"junianob"},"content":"        return showCards;","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":114,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":115,"author":{"gitId":"junianob"},"content":"    public boolean isShowDecks() {","lastModifiedDate":"2023-03-30"},{"lineNumber":116,"author":{"gitId":"junianob"},"content":"        return showDecks;","lastModifiedDate":"2023-03-30"},{"lineNumber":117,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":118,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"    public boolean isClear() {","lastModifiedDate":"2023-03-24"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"        return false;","lastModifiedDate":"2023-03-24"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit","lastModifiedDate":"2023-03-21"},{"lineNumber":138,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 startReview \u003d\u003d otherCommandResult.startReview","lastModifiedDate":"2023-03-21"},{"lineNumber":139,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 endReview \u003d\u003d otherCommandResult.endReview","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 selectDeck \u003d\u003d otherCommandResult.selectDeck","lastModifiedDate":"2023-03-23"},{"lineNumber":141,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 unselectDeck \u003d\u003d otherCommandResult.unselectDeck","lastModifiedDate":"2023-03-30"},{"lineNumber":142,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 findCards \u003d\u003d otherCommandResult.findCards","lastModifiedDate":"2023-03-30"},{"lineNumber":143,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 findDecks \u003d\u003d otherCommandResult.findDecks","lastModifiedDate":"2023-03-30"},{"lineNumber":144,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 showCards \u003d\u003d otherCommandResult.showCards","lastModifiedDate":"2023-03-30"},{"lineNumber":145,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 showDecks \u003d\u003d otherCommandResult.showDecks;","lastModifiedDate":"2023-03-30"},{"lineNumber":146,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"junianob"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit, startReview, endReview, selectDeck, unselectDeck);","lastModifiedDate":"2023-03-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":5,"junianob":64,"unfazing":19,"-":66}},{"path":"src/main/java/seedu/address/logic/commands/deckcommands/AddDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":" * Adds a card to the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"public class AddDeckCommand extends Command {","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    public static final String COMMAND_WORD \u003d \"addDeck\";","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new deck \"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"            + \"DECK NAME\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"            + \"LAK1201\";","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New deck created: %1$s\";","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the deck list\";","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    private final Deck toAdd;","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"     * Creates an AddDeckCommand to add the specified {@code Deck}","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"    public AddDeckCommand(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        toAdd \u003d deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"        if (model.hasDeck(toAdd)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DECK);","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"        model.addDeck(toAdd);","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getDeckName()));","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof AddDeckCommand // instanceof handles nulls","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 toAdd.equals(((AddDeckCommand) other).toAdd));","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"rockman007372":3,"HJ-PRK":52}},{"path":"src/main/java/seedu/address/logic/commands/deckcommands/DeleteDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":" * Deletes a deck identified using its displayed index from the deck list.","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"public class DeleteDeckCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"    public static final String COMMAND_WORD \u003d \"deleteDeck\";","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Select a deck to delete \"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"            + \"by the index number used in the displayed deck list.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"            + \"Parameter: INDEX (must be a positive integer).\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deck deleted: %1$s\"; // %1$s is the first argument in format","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"Deck index provided is invalid\";","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    private final Index deckIndex;","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"     * Creates a DeleteDeckCommand to delete the specified {@code Deck}","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    public DeleteDeckCommand(Index idx) {","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(idx);","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"        this.deckIndex \u003d idx;","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"        List\u003cDeck\u003e deckList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        if (deckIndex.getZeroBased() \u003e\u003d deckList.size()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        Deck targetDeck \u003d deckList.get(deckIndex.getZeroBased());","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        model.deleteDeck(targetDeck);","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetDeck.getDeckName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof DeleteDeckCommand // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 deckIndex.equals(((DeleteDeckCommand) other).deckIndex));","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"rockman007372":4,"HJ-PRK":55}},{"path":"src/main/java/seedu/address/logic/commands/deckcommands/EditDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":" * Edits the name of the deck","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"public class EditDeckCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    public static final String COMMAND_WORD \u003d \"editDeck\";","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the name of the deck \"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"            + \"by the index number used in the displayed deck list. \"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"            + \"Parameters: INDEX (must be a positive integer) \" + \"DECK NAME\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + \"CS2107\";","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_EDIT_DECK_SUCCESS \u003d \"Deck %1$s is successfully renamed to \\\"%2$s\\\".\";","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck name already exists.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"    private final Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    private final Deck editedDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"     * @param index      of the deck to edit","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"     * @param editedDeck edited deck of new name","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    public EditDeckCommand(Index index, Deck editedDeck) {","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"        this.editedDeck \u003d editedDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        boolean isIndexOutOfBound \u003d index.getZeroBased() \u003e\u003d lastShownList.size();","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"        if (isIndexOutOfBound) {","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        if (model.hasDeck(editedDeck)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DECK);","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"        Deck deckToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"        model.setDeck(deckToEdit, editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        model.moveCards(deckToEdit, editedDeck);","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_DECK_SUCCESS,","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"                index.getOneBased(), editedDeck.getDeckName()));","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"            return true;","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"        if (!(other instanceof EditDeckCommand)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"            return false;","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"        // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"        EditDeckCommand e \u003d (EditDeckCommand) other;","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"HJ-PRK"},"content":"        return index.equals(e.index) \u0026\u0026 editedDeck.equals(e.editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"rockman007372":13,"ruiyigan":2,"HJ-PRK":71}},{"path":"src/main/java/seedu/address/logic/commands/deckcommands/FindDecksCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import java.util.List;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.DeckContainsKeywordsPredicate;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" * Finds and list all decks in the master deck that contain any of the argument keywords.","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"public class FindDecksCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    public static final String COMMAND_WORD \u003d \"findDecks\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all decks that contain any of \"","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"            + \"Example: \" + COMMAND_WORD + \" science\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    private final DeckContainsKeywordsPredicate deckPredicate;","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"     * Constructs a FindDecksCommand with the given list of keywords.","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"     * The command will search for decks that contain any of the keywords.","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"     * @param keywords the list of keywords to search for","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    public FindDecksCommand(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        this.deckPredicate \u003d new DeckContainsKeywordsPredicate(keywords);","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        model.updateFilteredDeckList(deckPredicate);","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"                String.format(Messages.MESSAGE_DECKS_LISTED_OVERVIEW, model.getFilteredDeckList().size()),","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"                false, false, false, false, false, false, false, true, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"                || (other instanceof FindDecksCommand // instanceof handles nulls","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 deckPredicate.equals(((FindDecksCommand) other).deckPredicate)); // state check","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"junianob":2,"ruiyigan":50}},{"path":"src/main/java/seedu/address/logic/commands/deckcommands/SelectDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":" * Selects a deck to operate on.","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"public class SelectDeckCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"    public static final String COMMAND_WORD \u003d \"selectDeck\";","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Select a deck of cards \"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"            + \"by the index number used in the displayed deck list.\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"            + \"Parameter: INDEX (must be a positive integer).\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deck selected: %1$s\"; // %1$s is the first argument in format","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"Deck index provided is invalid\";","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    private final Index deckIndex;","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"     * Creates an AddCardCommand to add the specified {@code Card}","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    public SelectDeckCommand(Index idx) {","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(idx);","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"        this.deckIndex \u003d idx;","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        List\u003cDeck\u003e deckList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"        boolean isIndexOutOfBound \u003d deckIndex.getZeroBased() \u003e\u003d deckList.size();","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"        if (isIndexOutOfBound) {","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"            throw new CommandException(MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"        model.selectDeck(deckIndex);","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getSelectedDeckName()),","lastModifiedDate":"2023-03-23"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"                false, false, false, false, true, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"                || (other instanceof SelectDeckCommand // instanceof handles nulls","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 deckIndex.equals(((SelectDeckCommand) other).deckIndex));","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"rockman007372":48,"junianob":2,"ruiyigan":1,"unfazing":8}},{"path":"src/main/java/seedu/address/logic/commands/deckcommands/ShowDecksCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":" * Lists all decks in the master deck to the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"public class ShowDecksCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    public static final String COMMAND_WORD \u003d \"showDecks\";","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all decks\";","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"        return new CommandResult(MESSAGE_SUCCESS,","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"                false, false, false, false, false, false, false, false, false, true);","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"junianob":2,"ruiyigan":24}},{"path":"src/main/java/seedu/address/logic/commands/deckcommands/UnselectDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" * Selects a deck to operate on.","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"public class UnselectDeckCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"unselectDeck\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"The deck has been unselected.\";","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        model.unselectDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false,","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"                false, true, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":4,"junianob":1,"unfazing":21}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/EndReviewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":" * Ends current review session.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"public class EndReviewCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"endReview\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Ended the review.\";","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        model.endReview();","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"        return new CommandResult(MESSAGE_SUCCESS,","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"                false, false, false, true, false, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":4,"junianob":1,"unfazing":21}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/FlipCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":" * Flips the current flashcard under review to show its answer to the user.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"public class FlipCardCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"p\";","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_FLIP_SUCCESS \u003d \"Flashcard is flipped! Showing answer.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_UNFLIP_SUCCESS \u003d \"Flashcard is unflipped! Showing only the question.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        model.flipCard();","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        return model.isReviewCardFlipped()","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"                ? new CommandResult(MESSAGE_FLIP_SUCCESS)","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"                : new CommandResult(MESSAGE_UNFLIP_SUCCESS);","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":3,"unfazing":25}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/NextCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":" * Sets the next card as the card currently under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"public class NextCardCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"]\";","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Skipped to next flashcard.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_NO_MORE_NEXT_CARD \u003d \"This is the last card.\";","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        if (model.goToNextCard()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"            return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"            return new CommandResult(MESSAGE_NO_MORE_NEXT_CARD);","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"rockman007372":3,"unfazing":25}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/PreviousCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":" * Sets the previous card as the card currently under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"public class PreviousCardCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"[\";","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Went back to previous flashcard.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_NO_MORE_PREV_CARD \u003d \"This is the first card.\";","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        if (model.goToPrevCard()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"            return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"            return new CommandResult(MESSAGE_NO_MORE_PREV_CARD);","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"rockman007372":3,"unfazing":25}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/ReviewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":" * Starts a review session of a Deck.","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"public class ReviewCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"review\";","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Review a deck of cards \"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"            + \"by the index number used in the displayed deck list and by the tagged difficulty.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"            + \"Parameter: INDEX (must be a positive integer).\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"            + \"Flags: -e -m -h for EASY, MEDIUM, HARD tags\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"            + \"Example (to test all cards in deck 1): \" + COMMAND_WORD + \" 1\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"            + \"Example (to test MEDIUM and HARD cards in deck 1): \" + COMMAND_WORD + \" 1 -m -h\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"            + \"No other input is allowed between the flags.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deck to be reviewed: %1$s\\nReviewing cards of %2$s\";","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_EMPTY_DECK \u003d \"The deck you chose to review is empty\";","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_NO_CARDS_WITH_TAG \u003d \"There are no cards \"","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"            + \"tagged with those difficulties in the deck\";","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    private final Index deckIndex;","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    private final List\u003cTagName\u003e difficulties;","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"     * Creates a ReviewCommand with the specified index of the deck.","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    public ReviewCommand(Index idx, List\u003cTagName\u003e difficulties) {","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(idx, difficulties);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        this.deckIndex \u003d idx;","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"        this.difficulties \u003d difficulties;","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        List\u003cDeck\u003e deckList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        boolean isIndexOutOfBound \u003d deckIndex.getZeroBased() \u003e\u003d deckList.size();","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"        if (isIndexOutOfBound) {","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"            throw new CommandException(MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"        } else if (model.getDeckSize(deckIndex.getZeroBased()) \u003d\u003d 0) {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"            throw new CommandException(MESSAGE_EMPTY_DECK);","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"        } else if (model.getDeckSizeFilteredTag(deckIndex.getZeroBased(), difficulties) \u003d\u003d 0) {","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"            throw new CommandException(MESSAGE_NO_CARDS_WITH_TAG);","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"        model.reviewDeck(deckIndex, difficulties);","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"        String diffString \u003d \"\";","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"        if (difficulties.containsAll(Arrays.asList(TagName.EASY, TagName.MEDIUM, TagName.HARD))) {","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"EASY/MEDIUM/HARD difficulties\";","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"        } else if (difficulties.containsAll(Arrays.asList(TagName.EASY, TagName.MEDIUM))) {","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"EASY/MEDIUM difficulties\";","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        } else if (difficulties.containsAll(Arrays.asList(TagName.EASY, TagName.HARD))) {","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"EASY/HARD difficulties\";","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        } else if (difficulties.containsAll(Arrays.asList(TagName.MEDIUM, TagName.HARD))) {","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"MEDIUM/HARD difficulties\";","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"        } else if (difficulties.contains(TagName.EASY)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"EASY difficulty\";","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        } else if (difficulties.contains(TagName.MEDIUM)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"MEDIUM difficulty\";","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        } else if (difficulties.contains(TagName.HARD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"HARD difficulty\";","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"            diffString \u003d \"ALL difficulties\";","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"                String.format(MESSAGE_SUCCESS, model.getReviewDeckName(), diffString),","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"junianob"},"content":"                false, false, true, false, false, false, false, false, false, false","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"rockman007372"},"content":"        );","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"                || (other instanceof ReviewCommand // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 deckIndex.equals(((ReviewCommand) other).deckIndex));","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":6,"junianob":1,"unfazing":89}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/SetReviewLimitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" * Sets the number of cards tested per review session.","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"public class SetReviewLimitCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"    public static final String COMMAND_WORD \u003d \"setLimit\";","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Limit the number of cards tested per review session.\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"            + \"Parameter: Integer (must be positive) or \u0027none\u0027.\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"            + \"Example: \" + COMMAND_WORD + \" 30\";","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS_SET_LIMIT \u003d \"You have limited the number of cards per review to %1$s!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS_NO_LIMIT \u003d \"You have set the limit of cards per review to \u0027none\u0027 \"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"            + \"- so each review will go through all cards in the deck once!\";","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    private final int numCardsPerReview;","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"     * Creates a SetReviewLimitCommand with the given number of cards.","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"    public SetReviewLimitCommand(int numCardsPerReview) {","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        requireNonNull(numCardsPerReview);","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        this.numCardsPerReview \u003d numCardsPerReview;","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        model.setNumCardsPerReview(numCardsPerReview);","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"        if (numCardsPerReview \u003c 0) {","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"            return new CommandResult(MESSAGE_SUCCESS_NO_LIMIT);","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS_SET_LIMIT, numCardsPerReview));","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"                || (other instanceof SetReviewLimitCommand // instanceof handles nulls","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 numCardsPerReview \u003d\u003d (((SetReviewLimitCommand) other).numCardsPerReview));","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"rockman007372":9,"unfazing":44}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/TagEasyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.tag.Tag.TagName.EASY;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":" * The TagEasyCommand class is responsible for tagging the","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":" * current card being reviewed with the EASY tag.","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class TagEasyCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"l\";","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Card is tagged with EASY!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"     * Executes the tagging operation by calling the tagCurrentCardInReview() method of the Model object.","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"     * @param model the Model object containing the cards to be tagged","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"     * @return a CommandResult object with a success message","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"     * @throws CommandException if an error occurs during the execution of the command","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        model.tagCurrentCardInReview(new Tag(EASY));","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"rockman007372":3,"ruiyigan":23,"unfazing":8}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/TagHardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.tag.Tag.TagName.HARD;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":" * The TagHardCommand class is responsible for tagging the","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":" * current card being reviewed with the HARD tag.","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class TagHardCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"\u0027\";","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Card is tagged with HARD!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"     * Executes the tagging operation by calling the tagCurrentCardInReview() method of the Model object.","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"     * @param model the Model object containing the cards to be tagged","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"     * @return a CommandResult object with a success message","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"     * @throws CommandException if an error occurs during the execution of the command","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        model.tagCurrentCardInReview(new Tag(HARD));","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"rockman007372":3,"ruiyigan":21,"unfazing":10}},{"path":"src/main/java/seedu/address/logic/commands/reviewcommands/TagMediumCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.reviewcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.tag.Tag.TagName.MEDIUM;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":" * The TagMediumCommand class is responsible for tagging the","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":" * current card being reviewed with the MEDIUM tag.","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class TagMediumCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \";\";","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Card is tagged with MEDIUM!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"     * Executes the tagging operation by calling the tagCurrentCardInReview() method of the Model object.","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"     * @param model the Model object containing the cards to be tagged","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"     * @return a CommandResult object with a success message","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"     * @throws CommandException if an error occurs during the execution of the command","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        model.tagCurrentCardInReview(new Tag(MEDIUM));","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"rockman007372":3,"ruiyigan":23,"unfazing":8}},{"path":"src/main/java/seedu/address/logic/parser/AddCardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.AddCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.AddCardCommand.AddCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":" * Parses input arguments and creates a new AddCardCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"public class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCardCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"     * and returns an AddCardCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public AddCardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        AddCardDescriptor cardDescriptor \u003d new AddCardDescriptor();","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        cardDescriptor.setQuestion(question);","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        cardDescriptor.setAnswer(answer);","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"            cardDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        return new AddCardCommand(cardDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"ruiyigan":23,"unfazing":2,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/AddDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-11"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.AddDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":" * Parses input arguments and creates a new AddDeckCommand object","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"public class AddDeckCommandParser implements Parser\u003cAddDeckCommand\u003e {","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCardCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"     * and returns an AddCardCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    public AddDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"        Deck deck \u003d ParserUtil.parseDeck(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"        return new AddDeckCommand(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"rockman007372":1,"ruiyigan":2,"HJ-PRK":21}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q\\\\\");","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a\\\\\");","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t\\\\\");","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final Prefix REVIEW_EASY_FLAG \u003d new Prefix(\"-e\");","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"    public static final Prefix REVIEW_MEDIUM_FLAG \u003d new Prefix(\"-m\");","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final Prefix REVIEW_HARD_FLAG \u003d new Prefix(\"-h\");","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"unfazing":6,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.DeleteCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":" * Parses input arguments and creates a new DeleteCardCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCardCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"     * and returns a DeleteCardCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    public DeleteCardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"            return new DeleteCardCommand(index);","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"ruiyigan":8,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/DeleteDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.DeleteDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":" * Parses input arguments and creates a new DeleteDeck object","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"public class DeleteDeckCommandParser implements Parser\u003cDeleteDeckCommand\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteDeckCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"     * and returns an DeleteDeckCommand object for execution.","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"    public DeleteDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"        Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"                    DeleteDeckCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        return new DeleteDeckCommand(index);","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"rockman007372":1,"HJ-PRK":33}},{"path":"src/main/java/seedu/address/logic/parser/EditCardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" * Parses input arguments and creates a new EditCardCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"public class EditCardCommandParser implements Parser\u003cEditCardCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCardCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"     * and returns an EditCardCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    public EditCardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor editCardDescriptor \u003d new EditCardDescriptor();","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"            editCardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"            editCardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        // treated the same way as question and answer field, but allows null value","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"            editCardDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        if (!editCardDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(EditCardCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        return new EditCardCommand(index, editCardDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"ruiyigan":24,"-":33}},{"path":"src/main/java/seedu/address/logic/parser/EditDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.EditDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":" * Parses input arguments and creates a new EditDeckCommand object","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"public class EditDeckCommandParser implements Parser\u003cEditDeckCommand\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"     * Parses the given {@code String} of arguments in the context of the EditDeckCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"     * and returns an EditDeckCommand object for execution.","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    public EditDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"        String[] indexAndDeckName \u003d trimmedArgs.split(\" \", 2);","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"        if (indexAndDeckName.length !\u003d 2) {","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"                    EditDeckCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"        Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"            index \u003d ParserUtil.parseIndex(indexAndDeckName[0]);","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"                    EditDeckCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        Deck editedDeck \u003d ParserUtil.parseDeck(indexAndDeckName[1]);","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        return new EditDeckCommand(index, editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"rockman007372":5,"ruiyigan":11,"HJ-PRK":30}},{"path":"src/main/java/seedu/address/logic/parser/FindCardsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.FindCardsCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":" * Parses input arguments and creates a new FindCardsCommand object","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"public class FindCardsCommandParser implements Parser\u003cFindCardsCommand\u003e {","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCardsCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"     * and returns a FindCardsCommand object for execution.","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public FindCardsCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCardsCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        return new FindCardsCommand(Arrays.asList(nameKeywords));","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"ruiyigan":32}},{"path":"src/main/java/seedu/address/logic/parser/FindDecksCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.deckcommands.FindDecksCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":" * Parses input arguments and creates a new FindDecksCommand object","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"public class FindDecksCommandParser implements Parser\u003cFindDecksCommand\u003e {","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"     * Parses the given {@code String} of arguments in the context of the FindDecksCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"     * and returns a FindDecksCommand object for execution.","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public FindDecksCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDecksCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        return new FindDecksCommand(Arrays.asList(nameKeywords));","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"ruiyigan":9,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/MasterDeckParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DECK_SELECTED;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_IN_REVIEW;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_REVIEW;","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NO_DECK_SELECTED;","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.AddCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.DeleteCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.FindCardsCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.ShowCardsCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.AddDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.DeleteDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.EditDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.deckcommands.FindDecksCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.SelectDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.deckcommands.ShowDecksCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.UnselectDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.EndReviewCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.FlipCardCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.NextCardCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.PreviousCardCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.ReviewCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.SetReviewLimitCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.reviewcommands.TagEasyCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.reviewcommands.TagHardCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.reviewcommands.TagMediumCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"public class MasterDeckParser {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"    private String commandWord;","lastModifiedDate":"2023-03-23"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"    private String arguments;","lastModifiedDate":"2023-03-23"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"     * Parses the command word and the arguments from user input String.","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"     * @param userInput The String input from user","lastModifiedDate":"2023-03-23"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"     * @throws ParseException If the user input does not conform to the expected format","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"    private void updateCommandWordAndArguments(String userInput) throws ParseException {","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        this.commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"        this.arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"     * Parses user input into command for execution when no deck is selected.","lastModifiedDate":"2023-03-23"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-03-23"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-03-23"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-23"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"    public Command parseCommandInMainUnselectedMode(String userInput) throws ParseException {","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"        updateCommandWordAndArguments(userInput);","lastModifiedDate":"2023-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"        // Deck-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"        case AddDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"            return new AddDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"HJ-PRK"},"content":"        case DeleteDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"            return new DeleteDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"rockman007372"},"content":"        case EditDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-23"},{"lineNumber":88,"author":{"gitId":"rockman007372"},"content":"            return new EditDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"        case SelectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"            return new SelectDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        case UnselectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NO_DECK_SELECTED, UnselectDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"        case ShowDecksCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"            return new ShowDecksCommand();","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"        case FindDecksCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"            return new FindDecksCommandParser().parse(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"        // Card-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"ruiyigan"},"content":"        case AddCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_NO_DECK_SELECTED, AddCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"        case EditCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_NO_DECK_SELECTED, EditCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"ruiyigan"},"content":"        case DeleteCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_NO_DECK_SELECTED, DeleteCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":112,"author":{"gitId":"ruiyigan"},"content":"        case ShowCardsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_NO_DECK_SELECTED, ShowCardsCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"ruiyigan"},"content":"        case FindCardsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_NO_DECK_SELECTED, FindCardsCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"unfazing"},"content":"        // Review-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"        case ReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"            return new ReviewCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"        case SetReviewLimitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"rockman007372"},"content":"            return new SetReviewLimitCommandParser().parse(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"        case FlipCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, FlipCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"        case PreviousCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, PreviousCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"unfazing"},"content":"        case NextCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, NextCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"        case TagEasyCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, TagEasyCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"        case TagMediumCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, TagMediumCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":140,"author":{"gitId":"unfazing"},"content":"        case TagHardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, TagHardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":143,"author":{"gitId":"unfazing"},"content":"        case EndReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, EndReviewCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":145,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"        // Other commands","lastModifiedDate":"2023-03-27"},{"lineNumber":147,"author":{"gitId":"unfazing"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":148,"author":{"gitId":"unfazing"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":149,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":150,"author":{"gitId":"unfazing"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":151,"author":{"gitId":"unfazing"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":152,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":153,"author":{"gitId":"rockman007372"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-23"},{"lineNumber":154,"author":{"gitId":"rockman007372"},"content":"            return new ClearCommand();","lastModifiedDate":"2023-03-23"},{"lineNumber":155,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":161,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":162,"author":{"gitId":"ruiyigan"},"content":"     * Parses user input into command for execution when a deck is selected.","lastModifiedDate":"2023-03-11"},{"lineNumber":163,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":164,"author":{"gitId":"ruiyigan"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-03-11"},{"lineNumber":165,"author":{"gitId":"ruiyigan"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-03-11"},{"lineNumber":166,"author":{"gitId":"ruiyigan"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-11"},{"lineNumber":167,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"    public Command parseCommandInMainSelectedMode(String userInput) throws ParseException {","lastModifiedDate":"2023-03-27"},{"lineNumber":169,"author":{"gitId":"rockman007372"},"content":"        updateCommandWordAndArguments(userInput);","lastModifiedDate":"2023-03-23"},{"lineNumber":170,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":171,"author":{"gitId":"ruiyigan"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-03-11"},{"lineNumber":172,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":173,"author":{"gitId":"unfazing"},"content":"        // Deck-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":174,"author":{"gitId":"unfazing"},"content":"        case AddDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":175,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_DECK_SELECTED, AddDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":176,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":177,"author":{"gitId":"unfazing"},"content":"        case DeleteDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":178,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_DECK_SELECTED, DeleteDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":179,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":180,"author":{"gitId":"unfazing"},"content":"        case EditDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":181,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_DECK_SELECTED, EditDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":182,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":183,"author":{"gitId":"unfazing"},"content":"        case SelectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":184,"author":{"gitId":"unfazing"},"content":"            return new SelectDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-27"},{"lineNumber":185,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":186,"author":{"gitId":"unfazing"},"content":"        case UnselectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":187,"author":{"gitId":"unfazing"},"content":"            return new UnselectDeckCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":188,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":189,"author":{"gitId":"ruiyigan"},"content":"        case ShowDecksCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_DECK_SELECTED, ShowDecksCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":192,"author":{"gitId":"ruiyigan"},"content":"        case FindDecksCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":193,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_DECK_SELECTED, FindDecksCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"unfazing"},"content":"        // Card-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":196,"author":{"gitId":"ruiyigan"},"content":"        case AddCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":197,"author":{"gitId":"ruiyigan"},"content":"            return new AddCardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":198,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"ruiyigan"},"content":"        case EditCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":200,"author":{"gitId":"ruiyigan"},"content":"            return new EditCardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":201,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":202,"author":{"gitId":"ruiyigan"},"content":"        case DeleteCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":203,"author":{"gitId":"ruiyigan"},"content":"            return new DeleteCardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":204,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"ruiyigan"},"content":"        case ShowCardsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":206,"author":{"gitId":"ruiyigan"},"content":"            return new ShowCardsCommand();","lastModifiedDate":"2023-03-28"},{"lineNumber":207,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":208,"author":{"gitId":"ruiyigan"},"content":"        case FindCardsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":209,"author":{"gitId":"ruiyigan"},"content":"            return new FindCardsCommandParser().parse(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":210,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":211,"author":{"gitId":"unfazing"},"content":"        // Review-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"unfazing"},"content":"        case ReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"unfazing"},"content":"            return new ReviewCommandParser().parse(arguments);","lastModifiedDate":"2023-03-27"},{"lineNumber":214,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":215,"author":{"gitId":"rockman007372"},"content":"        case SetReviewLimitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":216,"author":{"gitId":"rockman007372"},"content":"            return new SetReviewLimitCommandParser().parse(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":217,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":218,"author":{"gitId":"unfazing"},"content":"        case FlipCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":219,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, FlipCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":220,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":221,"author":{"gitId":"unfazing"},"content":"        case PreviousCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":222,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, PreviousCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":223,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":224,"author":{"gitId":"unfazing"},"content":"        case NextCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":225,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, NextCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":226,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":227,"author":{"gitId":"unfazing"},"content":"        case TagEasyCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, TagEasyCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":229,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":230,"author":{"gitId":"unfazing"},"content":"        case TagMediumCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":231,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, TagMediumCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":232,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":233,"author":{"gitId":"unfazing"},"content":"        case TagHardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":234,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, TagHardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":235,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":236,"author":{"gitId":"unfazing"},"content":"        case EndReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":237,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_NOT_IN_REVIEW, EndReviewCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":238,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":239,"author":{"gitId":"unfazing"},"content":"        // Other Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":240,"author":{"gitId":"unfazing"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":241,"author":{"gitId":"unfazing"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":242,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":243,"author":{"gitId":"rockman007372"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":244,"author":{"gitId":"rockman007372"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":245,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":246,"author":{"gitId":"unfazing"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":247,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_DECK_SELECTED, ClearCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":248,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":249,"author":{"gitId":"ruiyigan"},"content":"        default:","lastModifiedDate":"2023-03-11"},{"lineNumber":250,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-11"},{"lineNumber":251,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":252,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":253,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":254,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":255,"author":{"gitId":"rockman007372"},"content":"     * Parses user input into command for execution when a review is underway.","lastModifiedDate":"2023-03-23"},{"lineNumber":256,"author":{"gitId":"unfazing"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":257,"author":{"gitId":"unfazing"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-03-13"},{"lineNumber":258,"author":{"gitId":"unfazing"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-03-13"},{"lineNumber":259,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":260,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":261,"author":{"gitId":"rockman007372"},"content":"    public Command parseCommandInReviewMode(String userInput) throws ParseException {","lastModifiedDate":"2023-03-23"},{"lineNumber":262,"author":{"gitId":"rockman007372"},"content":"        updateCommandWordAndArguments(userInput);","lastModifiedDate":"2023-03-23"},{"lineNumber":263,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":264,"author":{"gitId":"unfazing"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-03-13"},{"lineNumber":265,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":266,"author":{"gitId":"unfazing"},"content":"        // Deck-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":267,"author":{"gitId":"unfazing"},"content":"        case AddDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":268,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, AddDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":269,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":270,"author":{"gitId":"unfazing"},"content":"        case DeleteDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":271,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, DeleteDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":272,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":273,"author":{"gitId":"unfazing"},"content":"        case EditDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":274,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, EditDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":275,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":276,"author":{"gitId":"unfazing"},"content":"        case SelectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":277,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, SelectDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":278,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":279,"author":{"gitId":"unfazing"},"content":"        case UnselectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":280,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, UnselectDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":281,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":282,"author":{"gitId":"ruiyigan"},"content":"        case ShowDecksCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":283,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, ShowDecksCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":284,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":285,"author":{"gitId":"ruiyigan"},"content":"        case FindDecksCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":286,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, FindDecksCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":287,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":288,"author":{"gitId":"unfazing"},"content":"        // Card-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":289,"author":{"gitId":"ruiyigan"},"content":"        case AddCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":290,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, AddCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-29"},{"lineNumber":291,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":292,"author":{"gitId":"ruiyigan"},"content":"        case EditCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":293,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, EditCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-29"},{"lineNumber":294,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":295,"author":{"gitId":"ruiyigan"},"content":"        case DeleteCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":296,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, DeleteCardCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-29"},{"lineNumber":297,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":298,"author":{"gitId":"ruiyigan"},"content":"        case ShowCardsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":299,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, ShowCardsCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":300,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":301,"author":{"gitId":"ruiyigan"},"content":"        case FindCardsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":302,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, FindCardsCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":303,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":304,"author":{"gitId":"unfazing"},"content":"        // Review-related Commands","lastModifiedDate":"2023-03-27"},{"lineNumber":305,"author":{"gitId":"unfazing"},"content":"        case ReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":306,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, ReviewCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":307,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":308,"author":{"gitId":"rockman007372"},"content":"        case SetReviewLimitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":309,"author":{"gitId":"rockman007372"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, SetReviewLimitCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-28"},{"lineNumber":310,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":311,"author":{"gitId":"unfazing"},"content":"        case FlipCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":312,"author":{"gitId":"unfazing"},"content":"            return new FlipCardCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":313,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":314,"author":{"gitId":"unfazing"},"content":"        case PreviousCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":315,"author":{"gitId":"unfazing"},"content":"            return new PreviousCardCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":316,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":317,"author":{"gitId":"unfazing"},"content":"        case NextCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":318,"author":{"gitId":"unfazing"},"content":"            return new NextCardCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":319,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":320,"author":{"gitId":"unfazing"},"content":"        case TagEasyCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":321,"author":{"gitId":"unfazing"},"content":"            return new TagEasyCommand();","lastModifiedDate":"2023-03-28"},{"lineNumber":322,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":323,"author":{"gitId":"unfazing"},"content":"        case TagMediumCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":324,"author":{"gitId":"unfazing"},"content":"            return new TagMediumCommand();","lastModifiedDate":"2023-03-28"},{"lineNumber":325,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":326,"author":{"gitId":"unfazing"},"content":"        case TagHardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":327,"author":{"gitId":"unfazing"},"content":"            return new TagHardCommand();","lastModifiedDate":"2023-03-28"},{"lineNumber":328,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":329,"author":{"gitId":"unfazing"},"content":"        case EndReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":330,"author":{"gitId":"unfazing"},"content":"            return new EndReviewCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":331,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":332,"author":{"gitId":"unfazing"},"content":"        // Other commands","lastModifiedDate":"2023-03-27"},{"lineNumber":333,"author":{"gitId":"unfazing"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":334,"author":{"gitId":"unfazing"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":335,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":336,"author":{"gitId":"rockman007372"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":337,"author":{"gitId":"unfazing"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-03-27"},{"lineNumber":338,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":339,"author":{"gitId":"unfazing"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":340,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_IN_REVIEW, ClearCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":341,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":342,"author":{"gitId":"ruiyigan"},"content":"        default:","lastModifiedDate":"2023-03-11"},{"lineNumber":343,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-11"},{"lineNumber":344,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":345,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":54,"ruiyigan":83,"unfazing":160,"-":43,"HJ-PRK":6}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_INVALID_N_INPUT \u003d \"Input must be an integer between 1 and 2147483647\"","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"            + \" inclusive or the String \u0027all\u0027\";","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_INVALID_INTEGER \u003d \"Input must be an integer between 1 and 2147483647 inclusive\";","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_MUST_BE_EMPTY \u003d \"No inputs allowed\";","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"     * Parses a {@code String question} into a {@code Question}.","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    public static Question parseQuestion(String question) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(question);","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        String trimmedQuestion \u003d question.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        if (!Question.isValidQuestion(trimmedQuestion)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        return new Question(trimmedQuestion);","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"     * Parses a {@code String answer} into an {@code Answer}.","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"    public static Answer parseAnswer(String answer) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(answer);","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        String trimmedAnswer \u003d answer.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        if (!Answer.isValidAnswer(trimmedAnswer)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        return new Answer(trimmedAnswer);","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"rockman007372"},"content":"        Tag.TagName tagName \u003d Tag.TagName.valueOf(trimmedTag.toUpperCase());","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"rockman007372"},"content":"        return new Tag(tagName);","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"rockman007372"},"content":"     * Parses {@code String deckName} into a {@code Deck}","lastModifiedDate":"2023-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"HJ-PRK"},"content":"    public static Deck parseDeck(String deckName) throws ParseException {","lastModifiedDate":"2023-03-11"},{"lineNumber":89,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(deckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"        String trimmedDeckName \u003d deckName.trim();","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"        if (!Deck.isValidDeckName(trimmedDeckName)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"            throw new ParseException(Deck.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"HJ-PRK"},"content":"        return new Deck(trimmedDeckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"     * Parses a String {@code userInput} into an {@code Integer} and returns it. Leading and trailing whitespaces","lastModifiedDate":"2023-03-20"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"     * will be trimmed.","lastModifiedDate":"2023-03-20"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the specified String is invalid (not non-zero unsigned integer or","lastModifiedDate":"2023-03-20"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"     *      not the String \"none\").","lastModifiedDate":"2023-03-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"    public static int parseReviewLimit(String userInput) throws ParseException {","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"        String trimmedUserInput \u003d userInput.trim();","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        if (trimmedUserInput.equalsIgnoreCase(\"none\")) {","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"unfazing"},"content":"            return -1;","lastModifiedDate":"2023-03-20"},{"lineNumber":107,"author":{"gitId":"unfazing"},"content":"        } else if (trimmedUserInput.matches(\"\\\\d+\")) {","lastModifiedDate":"2023-03-20"},{"lineNumber":108,"author":{"gitId":"unfazing"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(trimmedUserInput)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"                throw new ParseException(MESSAGE_INVALID_INTEGER);","lastModifiedDate":"2023-03-20"},{"lineNumber":110,"author":{"gitId":"unfazing"},"content":"            }","lastModifiedDate":"2023-03-20"},{"lineNumber":111,"author":{"gitId":"unfazing"},"content":"            return Integer.parseInt(trimmedUserInput);","lastModifiedDate":"2023-03-20"},{"lineNumber":112,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-20"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(MESSAGE_INVALID_N_INPUT);","lastModifiedDate":"2023-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"unfazing"},"content":"     * Parses a String {@code userInput} and returns an empty string if input is empty. Leading and trailing whitespaces","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"     * will be trimmed.","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the user input contains any characters (excluding whitespaces)","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"    public static String parseEmptyInput(String userInput) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"        String trimmedUserInput \u003d userInput.trim();","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"        if (trimmedUserInput.isEmpty()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"            return \"\";","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(MESSAGE_MUST_BE_EMPTY);","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"rockman007372":8,"ruiyigan":12,"unfazing":34,"-":73,"HJ-PRK":5}},{"path":"src/main/java/seedu/address/logic/parser/ReviewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.parser.CliSyntax.REVIEW_EASY_FLAG;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.parser.CliSyntax.REVIEW_HARD_FLAG;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.parser.CliSyntax.REVIEW_MEDIUM_FLAG;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.tag.Tag.TagName.EASY;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.tag.Tag.TagName.HARD;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.tag.Tag.TagName.MEDIUM;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.ReviewCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":" * Parses input arguments and creates a new ReviewCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"public class ReviewCommandParser implements Parser\u003cReviewCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"     * Parses the given {@code String} of arguments in the context of the ReviewCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"     * and returns an ReviewCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"    public ReviewCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"                ArgumentTokenizer.tokenize(args, REVIEW_EASY_FLAG, REVIEW_MEDIUM_FLAG, REVIEW_HARD_FLAG);","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"        List\u003cTagName\u003e difficulties \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        Index index;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"                    ReviewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        if (argMultimap.getValue(REVIEW_EASY_FLAG).isPresent()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"            difficulties.add(EASY);","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"            try {","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"                ParserUtil.parseEmptyInput(argMultimap.getValue(REVIEW_EASY_FLAG).get());","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"                        ReviewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        if (argMultimap.getValue(REVIEW_MEDIUM_FLAG).isPresent()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"            difficulties.add(MEDIUM);","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"            try {","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"                ParserUtil.parseEmptyInput(argMultimap.getValue(REVIEW_MEDIUM_FLAG).get());","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"                        ReviewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"        if (argMultimap.getValue(REVIEW_HARD_FLAG).isPresent()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"            difficulties.add(HARD);","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"            try {","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"                ParserUtil.parseEmptyInput(argMultimap.getValue(REVIEW_HARD_FLAG).get());","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"                        ReviewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"        return new ReviewCommand(index, difficulties);","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":1,"unfazing":75}},{"path":"src/main/java/seedu/address/logic/parser/SelectDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.SelectDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":" * Parses input arguments and creates a new SelectDeck object","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"public class SelectDeckCommandParser implements Parser\u003cSelectDeckCommand\u003e {","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectDeckCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"     * and returns an SelectDeckCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"    public SelectDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"        Index index;","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"                    SelectDeckCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        return new SelectDeckCommand(index);","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"rockman007372":32,"unfazing":2}},{"path":"src/main/java/seedu/address/logic/parser/SetReviewLimitCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.reviewcommands.SetReviewLimitCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":" * Parses input arguments and creates a new SetLimitCommand object","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"public class SetReviewLimitCommandParser implements Parser\u003cSetReviewLimitCommand\u003e {","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"     * Parses the given {@code String} of arguments in the context of the SetLimitCommand","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"     * and returns an SetLimitCommand object for execution.","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"    public SetReviewLimitCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        int reviewLimit;","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        try {","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"            reviewLimit \u003d ParserUtil.parseReviewLimit(argMultimap.getPreamble());","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"                    SetReviewLimitCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"        return new SetReviewLimitCommand(reviewLimit);","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"rockman007372":5,"unfazing":28}},{"path":"src/main/java/seedu/address/model/MasterDeck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.UniqueCardList;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.UniqueDeckList;","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":" * Duplicates are not allowed (by .isSameCard comparison)","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"public class MasterDeck implements ReadOnlyMasterDeck {","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    private final UniqueCardList cards;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"    private final UniqueDeckList decks;","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        cards \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        decks \u003d new UniqueDeckList();","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"    public MasterDeck() {}","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"     * Creates an Deck using the Cards in the {@code toBeCopied}","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"    public MasterDeck(ReadOnlyMasterDeck toBeCopied) {","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"     * Replaces the contents of the card list with {@code cards}.","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"     * {@code cards} must not contain duplicate cards.","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"    public void setCards(List\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        this.cards.setCards(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"    public void setDecks(List\u003cDeck\u003e decks) {","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"        this.decks.setDecks(decks);","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"     * Resets the existing data of this {@code Deck} with {@code newData}.","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"    public void resetData(ReadOnlyMasterDeck newData) {","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"        setCards(newData.getCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"        setDecks(newData.getDeckList());","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"    //// card-level operations","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if a card with the same identity as {@code card} exists in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"    public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        return cards.contains(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"     * Adds a card to the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"     * The card must not already exist in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"    public void addCard(Card p) {","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"        cards.add(p);","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"     * Replaces the given card {@code target} in the list with {@code editedCard}.","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"HJ-PRK"},"content":"     * The card identity of {@code editedCard} must not be the same as another existing card in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"    public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"        requireNonNull(editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"        cards.setCard(target, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"rockman007372"},"content":"     * Tags the given card in the list with the new tag.","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"rockman007372"},"content":"     * @param target Card to be tagged.","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"rockman007372"},"content":"     * @param tag New tag.","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"ruiyigan"},"content":"    public void tagCard(Card target, Tag tag) {","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"        setCard(target, target.buildCardWithtag(tag));","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"unfazing"},"content":"     * Removes {@code key} from this {@code Deck}.","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"     * {@code key} must exist in the MasterDeck.","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"    public void removeCard(Card key) {","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"        cards.remove(key);","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"     * For sample data (SampleDataUtil), Cards may be added without adding Decks,","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"     * hence this function initialises Decks from the list of Cards.","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"     * In normal operation, Cards can only be added when a Deck is selected","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"     * hence this function should not be called in normal operation.","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"    public void initDecks() {","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"rockman007372"},"content":"        cards.asUnmodifiableObservableList().stream()","lastModifiedDate":"2023-03-18"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"                .map(Card::getDeck)","lastModifiedDate":"2023-03-22"},{"lineNumber":128,"author":{"gitId":"rockman007372"},"content":"                .distinct()","lastModifiedDate":"2023-03-18"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"                .forEach(this::addDeck);","lastModifiedDate":"2023-03-18"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":133,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if a deck with the same identity as {@code deck} exists.","lastModifiedDate":"2023-03-11"},{"lineNumber":134,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":135,"author":{"gitId":"HJ-PRK"},"content":"    public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":136,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":137,"author":{"gitId":"HJ-PRK"},"content":"        return decks.contains(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":138,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":139,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":140,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":141,"author":{"gitId":"rockman007372"},"content":"     * Adds a card to the masterDeck.","lastModifiedDate":"2023-03-18"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"     * The card must not already exist in the masterDeck.","lastModifiedDate":"2023-03-18"},{"lineNumber":143,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":144,"author":{"gitId":"HJ-PRK"},"content":"    public void addDeck(Deck d) {","lastModifiedDate":"2023-03-11"},{"lineNumber":145,"author":{"gitId":"HJ-PRK"},"content":"        decks.add(d);","lastModifiedDate":"2023-03-11"},{"lineNumber":146,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":147,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":148,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":149,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the given deck {@code target} in the list with {@code editedDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":150,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist.","lastModifiedDate":"2023-03-11"},{"lineNumber":151,"author":{"gitId":"HJ-PRK"},"content":"     * The deck identity of {@code editedCard} must not be the same as another existing deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":152,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":153,"author":{"gitId":"HJ-PRK"},"content":"    public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":154,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":155,"author":{"gitId":"HJ-PRK"},"content":"        decks.setDeck(target, editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":156,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":157,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":158,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":159,"author":{"gitId":"rockman007372"},"content":"     * Changes the association of all the cards from the old deck to the new deck.","lastModifiedDate":"2023-03-20"},{"lineNumber":160,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":161,"author":{"gitId":"rockman007372"},"content":"     * @param oldDeck The deck which cards are currently associated with.","lastModifiedDate":"2023-03-20"},{"lineNumber":162,"author":{"gitId":"rockman007372"},"content":"     * @param newDeck The deck which cards are to be associated with.","lastModifiedDate":"2023-03-20"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":164,"author":{"gitId":"rockman007372"},"content":"    public void moveCards(Deck oldDeck, Deck newDeck) {","lastModifiedDate":"2023-03-20"},{"lineNumber":165,"author":{"gitId":"rockman007372"},"content":"        for (Card c : cards) {","lastModifiedDate":"2023-03-20"},{"lineNumber":166,"author":{"gitId":"rockman007372"},"content":"            if (c.isInDeck(oldDeck)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":167,"author":{"gitId":"ruiyigan"},"content":"                Card editedCard \u003d new Card(c.getQuestion(), c.getAnswer(), c.getTag(), newDeck);","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"rockman007372"},"content":"                setCard(c, editedCard);","lastModifiedDate":"2023-03-20"},{"lineNumber":169,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-20"},{"lineNumber":170,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":171,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":172,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":173,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":174,"author":{"gitId":"rockman007372"},"content":"     * Removes {@code key} from this {@code MasterDeck} and its corresponding cards.","lastModifiedDate":"2023-03-19"},{"lineNumber":175,"author":{"gitId":"HJ-PRK"},"content":"     * {@code key} must exist.","lastModifiedDate":"2023-03-11"},{"lineNumber":176,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":177,"author":{"gitId":"HJ-PRK"},"content":"    public void removeDeck(Deck key) {","lastModifiedDate":"2023-03-11"},{"lineNumber":178,"author":{"gitId":"rockman007372"},"content":"        List\u003cCard\u003e cardsToRemove \u003d cards.asUnmodifiableObservableList().parallelStream()","lastModifiedDate":"2023-03-19"},{"lineNumber":179,"author":{"gitId":"rockman007372"},"content":"                .filter(card -\u003e card.isInDeck(key))","lastModifiedDate":"2023-03-19"},{"lineNumber":180,"author":{"gitId":"rockman007372"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-03-19"},{"lineNumber":181,"author":{"gitId":"rockman007372"},"content":"        cardsToRemove.forEach(this::removeCard);","lastModifiedDate":"2023-03-19"},{"lineNumber":182,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":183,"author":{"gitId":"HJ-PRK"},"content":"        decks.remove(key);","lastModifiedDate":"2023-03-11"},{"lineNumber":184,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":185,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"HJ-PRK"},"content":"        return cards.asUnmodifiableObservableList().size() + \" cards\";","lastModifiedDate":"2023-03-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"unfazing"},"content":"    public ObservableList\u003cCard\u003e getCardList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"        return cards.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":197,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":198,"author":{"gitId":"HJ-PRK"},"content":"    public ObservableList\u003cDeck\u003e getDeckList() {","lastModifiedDate":"2023-03-11"},{"lineNumber":199,"author":{"gitId":"HJ-PRK"},"content":"        return decks.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-11"},{"lineNumber":200,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":201,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":205,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof MasterDeck // instanceof handles nulls","lastModifiedDate":"2023-03-11"},{"lineNumber":206,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 cards.equals(((MasterDeck) other).cards)","lastModifiedDate":"2023-03-18"},{"lineNumber":207,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 decks.equals(((MasterDeck) other).decks));","lastModifiedDate":"2023-03-18"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":212,"author":{"gitId":"unfazing"},"content":"        return cards.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":214,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rockman007372":36,"ruiyigan":5,"unfazing":41,"-":78,"HJ-PRK":55}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.review.Review;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    Predicate\u003cCard\u003e PREDICATE_SHOW_NO_CARDS \u003d unused -\u003e false;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"     * Returns the user prefs\u0027 deck book file path.","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"    Path getMasterDeckFilePath();","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"     * Sets the user prefs\u0027 deck file path.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"    void setMasterDeckFilePath(Path deckFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces deck data with the data in {@code deck}.","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"    void setMasterDeck(ReadOnlyMasterDeck deck);","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"    /** Returns the Deck */","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"    ReadOnlyMasterDeck getMasterDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if a card with the same identity as {@code card} exists in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"    boolean hasCard(Card card);","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"     * Deletes the given card.","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"     * The card must exist in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"    void deleteCard(Card target);","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"     * Adds the given card.","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"     * {@code card} must not already exist in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"    void addCard(Card card);","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"     * Replaces the given card {@code target} with {@code editedCard}.","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"     * The card identity of {@code editedCard} must not be the same as another existing card in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"    void setCard(Card target, Card editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"    /** Returns an unmodifiable view of the filtered card list */","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"    ObservableList\u003cCard\u003e getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":93,"author":{"gitId":"rockman007372"},"content":"    /** Returns an unmodifiable view of the filtered deck list */","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"rockman007372"},"content":"    ObservableList\u003cDeck\u003e getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"     * Updates the filter of the filtered card list to filter by the given {@code predicate}.","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"    void updateFilteredCardList(Predicate\u003cCard\u003e predicate);","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"    /* NEWLY ADDED COMMANDS TO SUPPORT DECK LIST (NOT IN AB3) */","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"HJ-PRK"},"content":"    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":107,"author":{"gitId":"unfazing"},"content":"    /** Returns the deck */","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"    Optional\u003cDeck\u003e getSelectedDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"HJ-PRK"},"content":"    void addDeck(Deck deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":113,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if a deck with the same name as {@code deck} exists.","lastModifiedDate":"2023-03-11"},{"lineNumber":114,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":115,"author":{"gitId":"HJ-PRK"},"content":"    boolean hasDeck(Deck deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":117,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the given deck {@code target} with {@code editedDeck}.","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist.","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"HJ-PRK"},"content":"     * The deck name of {@code editedDeck} must not be the same as another existing deck.","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"HJ-PRK"},"content":"    void setDeck(Deck target, Deck editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":125,"author":{"gitId":"rockman007372"},"content":"     * Changes the association of all the cards from the old deck to the new deck.","lastModifiedDate":"2023-03-20"},{"lineNumber":126,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"     * @param oldDeck The deck which cards are currently associated with.","lastModifiedDate":"2023-03-20"},{"lineNumber":128,"author":{"gitId":"rockman007372"},"content":"     * @param newDeck The deck which cards are to be associated with.","lastModifiedDate":"2023-03-20"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":130,"author":{"gitId":"rockman007372"},"content":"    void moveCards(Deck oldDeck, Deck newDeck);","lastModifiedDate":"2023-03-20"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":132,"author":{"gitId":"rockman007372"},"content":"    void deleteDeck(Deck key);","lastModifiedDate":"2023-03-19"},{"lineNumber":133,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"    void selectDeck(Index idx);","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"unfazing"},"content":"    void unselectDeck();","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"ruiyigan"},"content":"    String getSelectedDeckName();","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"unfazing"},"content":"    int getDeckSize(int deckIndex);","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Review Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"unfazing"},"content":"    int getDeckSizeFilteredTag(int deckIndex, List\u003cTagName\u003e difficulties);","lastModifiedDate":"2023-03-29"},{"lineNumber":145,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"    void reviewDeck(Index idx, List\u003cTagName\u003e difficulties);","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"rockman007372"},"content":"    Optional\u003cReview\u003e getReview();","lastModifiedDate":"2023-03-14"},{"lineNumber":149,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"unfazing"},"content":"    void endReview();","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"unfazing"},"content":"    String getReviewDeckName();","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":154,"author":{"gitId":"rockman007372"},"content":"    void flipCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":155,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"    boolean goToPrevCard();","lastModifiedDate":"2023-03-18"},{"lineNumber":157,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":158,"author":{"gitId":"unfazing"},"content":"    boolean goToNextCard();","lastModifiedDate":"2023-03-18"},{"lineNumber":159,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":160,"author":{"gitId":"unfazing"},"content":"    boolean isReviewCardFlipped();","lastModifiedDate":"2023-03-23"},{"lineNumber":161,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":162,"author":{"gitId":"rockman007372"},"content":"    void setNumCardsPerReview(int i);","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"ruiyigan"},"content":"    void tagCurrentCardInReview(Tag tag);","lastModifiedDate":"2023-03-20"},{"lineNumber":165,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":166,"author":{"gitId":"junianob"},"content":"    ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewStatsList();","lastModifiedDate":"2023-03-21"},{"lineNumber":167,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":168,"author":{"gitId":"junianob"},"content":"    ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewDeckNameList();","lastModifiedDate":"2023-03-22"},{"lineNumber":169,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"rockman007372"},"content":"     * Returns the list of cards in the Review.","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"rockman007372"},"content":"    ObservableList\u003cCard\u003e getReviewCardList();","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d State \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"rockman007372"},"content":"     * Returns the state of the model","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"rockman007372"},"content":"    ModelState getState();","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"rockman007372":33,"junianob":4,"ruiyigan":6,"unfazing":55,"-":62,"HJ-PRK":21}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.CardHasTagPredicate;","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.CardInDeckPredicate;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.review.Review;","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":" * Represents the in-memory model of the master deck data.","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    private final MasterDeck masterDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    private final FilteredList\u003cDeck\u003e filteredDecks;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    private final FilteredList\u003cCard\u003e filteredCards;","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"    private Deck selectedDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    private Review currReview;","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    private int numCardsPerReview \u003d -1;","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"     * Initializes a ModelManager with the given masterDeck and userPrefs.","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    public ModelManager(ReadOnlyMasterDeck masterDeck, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(masterDeck, userPrefs);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        logger.fine(\"Initializing with PowerCard: \" + masterDeck + \" and user prefs \" + userPrefs);","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"        this.masterDeck \u003d new MasterDeck(masterDeck);","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"        filteredCards \u003d new FilteredList\u003c\u003e(this.masterDeck.getCardList());","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"        filteredDecks \u003d new FilteredList\u003c\u003e(this.masterDeck.getDeckList());","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        updateFilteredCardList(PREDICATE_SHOW_NO_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"        this(new MasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"    public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"        return userPrefs.getMasterDeckFilePath();","lastModifiedDate":"2023-03-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"    public void setMasterDeckFilePath(Path masterDeckFilePath) {","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"        requireNonNull(masterDeckFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"HJ-PRK"},"content":"        userPrefs.setMasterDeckFilePath(masterDeckFilePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MasterDeck Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"    public void setMasterDeck(ReadOnlyMasterDeck deck) {","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"        this.masterDeck.resetData(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"    public ReadOnlyMasterDeck getMasterDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PowerCard Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":107,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"    public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"unfazing"},"content":"        requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeck.hasCard(card);","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"    public void deleteCard(Card target) {","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.removeCard(target);","lastModifiedDate":"2023-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"    public void addCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"        masterDeck.addCard(card); // Todo: setDeck of card to selectedDeck here","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"    public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(target, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.setCard(target, editedCard);","lastModifiedDate":"2023-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":130,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card/Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"unfazing"},"content":"     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"HJ-PRK"},"content":"     * {@code versionedMasterDeck}","lastModifiedDate":"2023-03-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"    public ObservableList\u003cCard\u003e getFilteredCardList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"HJ-PRK"},"content":"        return filteredCards;","lastModifiedDate":"2023-03-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":141,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cDeck\u003e getFilteredDeckList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"        return filteredDecks;","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-03-11"},{"lineNumber":148,"author":{"gitId":"HJ-PRK"},"content":"        filteredCards.setPredicate(predicate);","lastModifiedDate":"2023-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":151,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PowerDeck Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"        filteredDecks.setPredicate(predicate);","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"HJ-PRK"},"content":"    public void addDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":161,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.addDeck(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":162,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":163,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":164,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":165,"author":{"gitId":"HJ-PRK"},"content":"    public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":166,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeck.hasDeck(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":167,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":170,"author":{"gitId":"HJ-PRK"},"content":"    public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-14"},{"lineNumber":171,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.setDeck(target, editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":172,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":173,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":174,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":175,"author":{"gitId":"rockman007372"},"content":"    public void moveCards(Deck oldDeck, Deck newDeck) {","lastModifiedDate":"2023-03-20"},{"lineNumber":176,"author":{"gitId":"rockman007372"},"content":"        masterDeck.moveCards(oldDeck, newDeck);","lastModifiedDate":"2023-03-20"},{"lineNumber":177,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":178,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":179,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":180,"author":{"gitId":"rockman007372"},"content":"     * Deletes the given deck and the associated cards in that deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":181,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":182,"author":{"gitId":"rockman007372"},"content":"     * @param deckToDelete Deck to be deleted.","lastModifiedDate":"2023-03-19"},{"lineNumber":183,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":184,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"rockman007372"},"content":"    public void deleteDeck(Deck deckToDelete) {","lastModifiedDate":"2023-03-19"},{"lineNumber":186,"author":{"gitId":"rockman007372"},"content":"        masterDeck.removeDeck(deckToDelete);","lastModifiedDate":"2023-03-19"},{"lineNumber":187,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":189,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":190,"author":{"gitId":"unfazing"},"content":"    public void selectDeck(Index deckIndex) {","lastModifiedDate":"2023-03-10"},{"lineNumber":191,"author":{"gitId":"unfazing"},"content":"        int zeroBasesIdx \u003d deckIndex.getZeroBased();","lastModifiedDate":"2023-03-10"},{"lineNumber":192,"author":{"gitId":"rockman007372"},"content":"        Deck toSelect \u003d filteredDecks.get(zeroBasesIdx);","lastModifiedDate":"2023-03-23"},{"lineNumber":193,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":194,"author":{"gitId":"rockman007372"},"content":"        // Always unselect the previous deck before selecting a new deck","lastModifiedDate":"2023-03-25"},{"lineNumber":195,"author":{"gitId":"rockman007372"},"content":"        if (selectedDeck !\u003d null) {","lastModifiedDate":"2023-03-23"},{"lineNumber":196,"author":{"gitId":"rockman007372"},"content":"            setDeck(selectedDeck, selectedDeck.buildUnselectedDeck());","lastModifiedDate":"2023-03-25"},{"lineNumber":197,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":198,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":199,"author":{"gitId":"rockman007372"},"content":"        selectedDeck \u003d toSelect.buildSelectedDeck();","lastModifiedDate":"2023-03-23"},{"lineNumber":200,"author":{"gitId":"rockman007372"},"content":"        setDeck(toSelect, selectedDeck); // also updates GUI to highlight blue card","lastModifiedDate":"2023-03-25"},{"lineNumber":201,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":202,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new CardInDeckPredicate(selectedDeck));","lastModifiedDate":"2023-03-14"},{"lineNumber":203,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":204,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":205,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"unfazing"},"content":"    public void unselectDeck() {","lastModifiedDate":"2023-03-10"},{"lineNumber":207,"author":{"gitId":"unfazing"},"content":"        assert this.selectedDeck !\u003d null : \"Can only unselectDeck when a deck is selected\";","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":209,"author":{"gitId":"rockman007372"},"content":"        setDeck(selectedDeck, selectedDeck.buildUnselectedDeck());","lastModifiedDate":"2023-03-23"},{"lineNumber":210,"author":{"gitId":"rockman007372"},"content":"        this.selectedDeck \u003d null;","lastModifiedDate":"2023-03-14"},{"lineNumber":211,"author":{"gitId":"rockman007372"},"content":"        updateFilteredCardList(PREDICATE_SHOW_NO_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":213,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":214,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":215,"author":{"gitId":"ruiyigan"},"content":"    public Optional\u003cDeck\u003e getSelectedDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":216,"author":{"gitId":"rockman007372"},"content":"        return Optional.ofNullable(selectedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":217,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":218,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":219,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":220,"author":{"gitId":"ruiyigan"},"content":"    public String getSelectedDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":221,"author":{"gitId":"rockman007372"},"content":"        return Optional.ofNullable(selectedDeck)","lastModifiedDate":"2023-03-14"},{"lineNumber":222,"author":{"gitId":"rockman007372"},"content":"                .map(Deck::getDeckName)","lastModifiedDate":"2023-03-14"},{"lineNumber":223,"author":{"gitId":"rockman007372"},"content":"                .orElse(\"No deck selected.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":224,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":225,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":226,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":227,"author":{"gitId":"unfazing"},"content":"    public int getDeckSize(int deckIndex) {","lastModifiedDate":"2023-03-14"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"        Deck deck \u003d filteredDecks.get(deckIndex);","lastModifiedDate":"2023-03-14"},{"lineNumber":229,"author":{"gitId":"unfazing"},"content":"        return new FilteredList\u003c\u003e(","lastModifiedDate":"2023-03-14"},{"lineNumber":230,"author":{"gitId":"unfazing"},"content":"                masterDeck.getCardList(), new CardInDeckPredicate(deck)","lastModifiedDate":"2023-03-14"},{"lineNumber":231,"author":{"gitId":"unfazing"},"content":"        ).size();","lastModifiedDate":"2023-03-14"},{"lineNumber":232,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":233,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":234,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":235,"author":{"gitId":"unfazing"},"content":"    public int getDeckSizeFilteredTag(int deckIndex, List\u003cTagName\u003e difficulties) {","lastModifiedDate":"2023-03-29"},{"lineNumber":236,"author":{"gitId":"unfazing"},"content":"        Deck deck \u003d filteredDecks.get(deckIndex);","lastModifiedDate":"2023-03-29"},{"lineNumber":237,"author":{"gitId":"unfazing"},"content":"        return new FilteredList\u003c\u003e(masterDeck.getCardList(),","lastModifiedDate":"2023-03-29"},{"lineNumber":238,"author":{"gitId":"unfazing"},"content":"                new CardInDeckPredicate(deck)","lastModifiedDate":"2023-03-29"},{"lineNumber":239,"author":{"gitId":"unfazing"},"content":"                        .and(new CardHasTagPredicate(difficulties))).size();","lastModifiedDate":"2023-03-29"},{"lineNumber":240,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":241,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":242,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Review Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":243,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":244,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":245,"author":{"gitId":"ruiyigan"},"content":"     * Starts a new review session based on deckIndex selected","lastModifiedDate":"2023-03-13"},{"lineNumber":246,"author":{"gitId":"rockman007372"},"content":"     * @param deckIndex Index of the deck","lastModifiedDate":"2023-03-14"},{"lineNumber":247,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":248,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":249,"author":{"gitId":"unfazing"},"content":"    public void reviewDeck(Index deckIndex, List\u003cTagName\u003e difficulties) {","lastModifiedDate":"2023-03-29"},{"lineNumber":250,"author":{"gitId":"unfazing"},"content":"        int zeroBasesIdx \u003d deckIndex.getZeroBased();","lastModifiedDate":"2023-03-13"},{"lineNumber":251,"author":{"gitId":"unfazing"},"content":"        Deck deckToReview \u003d filteredDecks.get(zeroBasesIdx);","lastModifiedDate":"2023-03-13"},{"lineNumber":252,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":253,"author":{"gitId":"rockman007372"},"content":"        List\u003cCard\u003e cardsToReview \u003d","lastModifiedDate":"2023-03-28"},{"lineNumber":254,"author":{"gitId":"unfazing"},"content":"                new FilteredList\u003c\u003e(masterDeck.getCardList(),","lastModifiedDate":"2023-03-29"},{"lineNumber":255,"author":{"gitId":"unfazing"},"content":"                        new CardInDeckPredicate(deckToReview)","lastModifiedDate":"2023-03-29"},{"lineNumber":256,"author":{"gitId":"unfazing"},"content":"                                .and(new CardHasTagPredicate(difficulties)));","lastModifiedDate":"2023-03-29"},{"lineNumber":257,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":258,"author":{"gitId":"rockman007372"},"content":"        currReview \u003d new Review(deckToReview, cardsToReview, numCardsPerReview);","lastModifiedDate":"2023-03-28"},{"lineNumber":259,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":260,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":261,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":262,"author":{"gitId":"rockman007372"},"content":"     * Returns the card list in Review","lastModifiedDate":"2023-03-28"},{"lineNumber":263,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":264,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":265,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cCard\u003e getReviewCardList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":266,"author":{"gitId":"rockman007372"},"content":"        assert currReview !\u003d null : \"Must be in review mode\";","lastModifiedDate":"2023-03-28"},{"lineNumber":267,"author":{"gitId":"rockman007372"},"content":"        return currReview.getFilteredReviewCardList();","lastModifiedDate":"2023-03-28"},{"lineNumber":268,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":269,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":270,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":271,"author":{"gitId":"rockman007372"},"content":"    public void setNumCardsPerReview(int n) {","lastModifiedDate":"2023-03-28"},{"lineNumber":272,"author":{"gitId":"rockman007372"},"content":"        numCardsPerReview \u003d n;","lastModifiedDate":"2023-03-28"},{"lineNumber":273,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":274,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":275,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":276,"author":{"gitId":"unfazing"},"content":"    public boolean goToPrevCard() {","lastModifiedDate":"2023-03-18"},{"lineNumber":277,"author":{"gitId":"rockman007372"},"content":"        boolean isFirstCard \u003d this.currReview.goToPrevCard();","lastModifiedDate":"2023-03-25"},{"lineNumber":278,"author":{"gitId":"rockman007372"},"content":"        return isFirstCard;","lastModifiedDate":"2023-03-25"},{"lineNumber":279,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":280,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":281,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":282,"author":{"gitId":"unfazing"},"content":"    public boolean goToNextCard() {","lastModifiedDate":"2023-03-18"},{"lineNumber":283,"author":{"gitId":"rockman007372"},"content":"        boolean isLastCard \u003d this.currReview.goToNextCard();","lastModifiedDate":"2023-03-25"},{"lineNumber":284,"author":{"gitId":"rockman007372"},"content":"        return isLastCard;","lastModifiedDate":"2023-03-25"},{"lineNumber":285,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":286,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":287,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":288,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cReview\u003e getReview() {","lastModifiedDate":"2023-03-14"},{"lineNumber":289,"author":{"gitId":"rockman007372"},"content":"        return Optional.ofNullable(currReview);","lastModifiedDate":"2023-03-14"},{"lineNumber":290,"author":{"gitId":"unfazing"},"content":"    };","lastModifiedDate":"2023-03-13"},{"lineNumber":291,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":292,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":293,"author":{"gitId":"unfazing"},"content":"    public void endReview() {","lastModifiedDate":"2023-03-13"},{"lineNumber":294,"author":{"gitId":"rockman007372"},"content":"        currReview \u003d null;","lastModifiedDate":"2023-03-14"},{"lineNumber":295,"author":{"gitId":"unfazing"},"content":"        if (selectedDeck !\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":296,"author":{"gitId":"unfazing"},"content":"            updateFilteredCardList(new CardInDeckPredicate(selectedDeck));","lastModifiedDate":"2023-03-14"},{"lineNumber":297,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":298,"author":{"gitId":"rockman007372"},"content":"            updateFilteredCardList(PREDICATE_SHOW_NO_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":299,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":300,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":301,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":302,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":303,"author":{"gitId":"unfazing"},"content":"    public String getReviewDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":304,"author":{"gitId":"rockman007372"},"content":"        assert currReview !\u003d null : \"Review command executed without a Review session.\";","lastModifiedDate":"2023-03-21"},{"lineNumber":305,"author":{"gitId":"rockman007372"},"content":"        return currReview.getDeckName();","lastModifiedDate":"2023-03-21"},{"lineNumber":306,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":307,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":308,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":309,"author":{"gitId":"rockman007372"},"content":"    public void flipCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":310,"author":{"gitId":"rockman007372"},"content":"        assert currReview !\u003d null : \"Flip command executed without a Review session.\";","lastModifiedDate":"2023-03-21"},{"lineNumber":311,"author":{"gitId":"rockman007372"},"content":"        currReview.flipCurrCard();","lastModifiedDate":"2023-03-28"},{"lineNumber":312,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":313,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":314,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":315,"author":{"gitId":"unfazing"},"content":"    public boolean isReviewCardFlipped() {","lastModifiedDate":"2023-03-23"},{"lineNumber":316,"author":{"gitId":"rockman007372"},"content":"        assert currReview !\u003d null : \"Flip command executed without a Review session.\";","lastModifiedDate":"2023-03-28"},{"lineNumber":317,"author":{"gitId":"rockman007372"},"content":"        return currReview.isCurrCardFlipped();","lastModifiedDate":"2023-03-28"},{"lineNumber":318,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":319,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":320,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":321,"author":{"gitId":"rockman007372"},"content":"    public void tagCurrentCardInReview(Tag tag) {","lastModifiedDate":"2023-03-28"},{"lineNumber":322,"author":{"gitId":"rockman007372"},"content":"        masterDeck.tagCard(currReview.getCurrCard(), tag); // modifies masterDeck","lastModifiedDate":"2023-03-28"},{"lineNumber":323,"author":{"gitId":"rockman007372"},"content":"        currReview.tagCurrentCard(tag); // reflects in GUI","lastModifiedDate":"2023-03-28"},{"lineNumber":324,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":325,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":326,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":327,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewStatsList() {","lastModifiedDate":"2023-03-21"},{"lineNumber":328,"author":{"gitId":"unfazing"},"content":"        return currReview.getReviewStatsList();","lastModifiedDate":"2023-03-21"},{"lineNumber":329,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":330,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":331,"author":{"gitId":"junianob"},"content":"    @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":332,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewDeckNameList() {","lastModifiedDate":"2023-03-22"},{"lineNumber":333,"author":{"gitId":"junianob"},"content":"        return currReview.getReviewDeckNameList();","lastModifiedDate":"2023-03-22"},{"lineNumber":334,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":335,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":336,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Model States \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":337,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":338,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":339,"author":{"gitId":"rockman007372"},"content":"    public ModelState getState() {","lastModifiedDate":"2023-03-23"},{"lineNumber":340,"author":{"gitId":"rockman007372"},"content":"        if (currReview !\u003d null) {","lastModifiedDate":"2023-03-23"},{"lineNumber":341,"author":{"gitId":"rockman007372"},"content":"            return ModelState.REVIEW_MODE;","lastModifiedDate":"2023-03-23"},{"lineNumber":342,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":343,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":344,"author":{"gitId":"rockman007372"},"content":"        if (selectedDeck !\u003d null) {","lastModifiedDate":"2023-03-23"},{"lineNumber":345,"author":{"gitId":"unfazing"},"content":"            return ModelState.MAIN_SELECTED_MODE;","lastModifiedDate":"2023-03-27"},{"lineNumber":346,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":347,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":348,"author":{"gitId":"unfazing"},"content":"        return ModelState.MAIN_UNSELECTED_MODE;","lastModifiedDate":"2023-03-27"},{"lineNumber":349,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":350,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":351,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-03-28"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-28"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-03-28"},{"lineNumber":356,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-03-28"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-28"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-03-28"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2023-03-28"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2023-03-28"},{"lineNumber":366,"author":{"gitId":"rockman007372"},"content":"        return masterDeck.equals(other.masterDeck)","lastModifiedDate":"2023-03-28"},{"lineNumber":367,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2023-03-28"},{"lineNumber":368,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 filteredDecks.equals(other.filteredDecks)","lastModifiedDate":"2023-03-28"},{"lineNumber":369,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 filteredCards.equals(other.filteredCards); // todo: check equal selectedDeck and review","lastModifiedDate":"2023-03-28"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":371,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rockman007372":102,"junianob":9,"ruiyigan":14,"unfazing":107,"-":110,"HJ-PRK":29}},{"path":"src/main/java/seedu/address/model/ModelState.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.model;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":" * Represents the state of the application.","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"public enum ModelState {","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"    MAIN_UNSELECTED_MODE, MAIN_SELECTED_MODE, REVIEW_MODE","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"rockman007372":7,"unfazing":1}},{"path":"src/main/java/seedu/address/model/ReadOnlyMasterDeck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":" * Unmodifiable view of a master deck","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"public interface ReadOnlyMasterDeck {","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"     * Returns an unmodifiable view of the cards list.","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"     * This list will not contain any duplicate cards.","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    ObservableList\u003cCard\u003e getCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"    ObservableList\u003cDeck\u003e getDeckList();","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"unfazing":2,"-":11,"HJ-PRK":6}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"    Path getMasterDeckFilePath();","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":15,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    private Path masterDeckFilePath \u003d Paths.get(\"data\" , \"masterdeck.json\");","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"        setMasterDeckFilePath(newUserPrefs.getMasterDeckFilePath());","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"    public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeckFilePath;","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"    public void setMasterDeckFilePath(Path masterDeckFilePath) {","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(masterDeckFilePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"        this.masterDeckFilePath \u003d masterDeckFilePath;","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 masterDeckFilePath.equals(o.masterDeckFilePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"        return Objects.hash(guiSettings, masterDeckFilePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"        sb.append(\"\\nLocal data file location : \" + masterDeckFilePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":77,"HJ-PRK":10}},{"path":"src/main/java/seedu/address/model/card/Answer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":" * Represents a Card\u0027s answer in the deck.","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class Answer {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Answers can take any values, and it should not be blank\";","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"     * The first character of the answer must not be a whitespace,","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public final String answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"     * Constructs an {@code Answer}.","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"     * @param answer A valid answer.","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    public Answer(String answer) {","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        requireNonNull(answer);","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if a given string is a valid answer.","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"    public static boolean isValidAnswer(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        return answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"                || (other instanceof Answer // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 answer.equals(((Answer) other).answer)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        return answer.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"unfazing":18,"-":38,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/model/card/Card.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.model.tag.Tag.TagName.UNTAGGED;","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":" * Represents a Card in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class Card {","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    private final Question question;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"    private final Answer answer;","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"    private final Deck deck;","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    private final Tag tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    private final boolean isFlipped;","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public Card(Question question, Answer answer, Tag tag, Deck deck) {","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        requireAllNonNull(question, answer, deck);","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        this.question \u003d question;","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"        this.tag \u003d Optional.ofNullable(tag).orElse(new Tag(UNTAGGED));","lastModifiedDate":"2023-03-26"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"        this.isFlipped \u003d true; // flipped by default","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"     * Overloaded constructor to instantiate a flipped/unflipped card.","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"     * @param toUpdate Cards to copy.","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"     * @param isFlipped boolean indicating if card is flipped.","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"    public Card(Card toUpdate, boolean isFlipped) {","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        requireAllNonNull(toUpdate, isFlipped);","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"        this.question \u003d toUpdate.question;","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"        this.answer \u003d toUpdate.answer;","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"        this.tag \u003d toUpdate.tag;","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"        this.deck \u003d toUpdate.deck;","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        this.isFlipped \u003d isFlipped;","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"     * Overloaded constructor to instantiate a card with a different tag.","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"     * @param toUpdate Cards to copy.","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"     * @param tag New tag.","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"    public Card(Card toUpdate, Tag tag) {","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"        requireAllNonNull(toUpdate, tag);","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"        this.question \u003d toUpdate.question;","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        this.answer \u003d toUpdate.answer;","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"        this.deck \u003d toUpdate.deck;","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"        this.isFlipped \u003d toUpdate.isFlipped;","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"    public Question getQuestion() {","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"        return question;","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"    public Answer getAnswer() {","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"        return answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"    public Tag getTag() {","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        return tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"    public String getTagName() {","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"rockman007372"},"content":"        return tag.tagName.name().toLowerCase(); // either \"easy, medium, hard, untagged\"","lastModifiedDate":"2023-03-26"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"    public Deck getDeck() {","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"        return deck;","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":93,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"rockman007372"},"content":"     * Returns true if both cards have the same question, answer and deck.","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"     * This defines a weaker notion of equality between two cards.","lastModifiedDate":"2023-03-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"    public boolean isSameCard(Card otherCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"        if (otherCard \u003d\u003d this) {","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"        return otherCard !\u003d null","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 otherCard.getQuestion().equals(getQuestion())","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 otherCard.getAnswer().equals(getAnswer())","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 otherCard.getDeck().equals(getDeck());","lastModifiedDate":"2023-03-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":110,"author":{"gitId":"rockman007372"},"content":"     * Checks if the card belongs to a given deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"     * @param deck The deck to check if card belongs to.","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"     * @return true if card belongs to the deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"rockman007372"},"content":"    public boolean isInDeck(Deck deck) {","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"        return this.deck.equals(deck);","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FOR REVIEW FUNCTIONS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"     * Returns true if the card is flipped.","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"    public boolean isFlipped() {","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"        return isFlipped;","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"     * Builds a flipped card.","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"    public Card buildFlippedCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"rockman007372"},"content":"        return new Card(this, true);","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":136,"author":{"gitId":"rockman007372"},"content":"     * Builds an unflipped card.","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":138,"author":{"gitId":"rockman007372"},"content":"    public Card buildUnflippedCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"rockman007372"},"content":"        return new Card(this, false);","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":141,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"     * Builds a new card of similar attributes but with a different tag","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"rockman007372"},"content":"    public Card buildCardWithtag(Tag tag) {","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"rockman007372"},"content":"        return new Card(this, tag);","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if both cards have the same identity and data fields.","lastModifiedDate":"2023-03-19"},{"lineNumber":151,"author":{"gitId":"HJ-PRK"},"content":"     * This defines a stronger notion of equality between two cards.","lastModifiedDate":"2023-03-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":159,"author":{"gitId":"unfazing"},"content":"        if (!(other instanceof Card)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":163,"author":{"gitId":"unfazing"},"content":"        Card otherCard \u003d (Card) other;","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"unfazing"},"content":"        return otherCard.getQuestion().equals(getQuestion())","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 otherCard.getAnswer().equals(getAnswer())","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 otherCard.getTag().equals(getTag())","lastModifiedDate":"2023-03-25"},{"lineNumber":167,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 otherCard.getDeck().equals(getDeck())","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 otherCard.isFlipped \u003d\u003d isFlipped;","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":174,"author":{"gitId":"ruiyigan"},"content":"        return Objects.hash(question, answer, tag, deck);","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":180,"author":{"gitId":"rockman007372"},"content":"        builder.append(\"Question: \")","lastModifiedDate":"2023-03-26"},{"lineNumber":181,"author":{"gitId":"rockman007372"},"content":"                .append(getQuestion())","lastModifiedDate":"2023-03-26"},{"lineNumber":182,"author":{"gitId":"unfazing"},"content":"                .append(\"; Answer: \")","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"ruiyigan"},"content":"                .append(getAnswer());","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":185,"author":{"gitId":"rockman007372"},"content":"        if (!tag.isUntagged()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"rockman007372"},"content":"            builder.append(\"; Tag: \")","lastModifiedDate":"2023-03-26"},{"lineNumber":187,"author":{"gitId":"rockman007372"},"content":"                    .append(tag);","lastModifiedDate":"2023-03-26"},{"lineNumber":188,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":189,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":80,"ruiyigan":17,"unfazing":29,"-":63,"HJ-PRK":4}},{"path":"src/main/java/seedu/address/model/card/CardHasTagPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" * Tests that a {@code Card} has any of the given tags.","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"public class CardHasTagPredicate implements Predicate\u003cCard\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    private final List\u003cTagName\u003e difficulties;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"     * Constructs a CardHasTagPredicate","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"     * @param difficulties List of difficulty tags.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    public CardHasTagPredicate(List\u003cTagName\u003e difficulties) {","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"        this.difficulties \u003d difficulties;","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    public boolean test(Card card) {","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        if (difficulties.isEmpty()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"            return true;","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"            return difficulties.contains(card.getTag().tagName);","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"                || (other instanceof CardHasTagPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 difficulties.equals(((CardHasTagPredicate) other).difficulties)); // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"unfazing":38}},{"path":"src/main/java/seedu/address/model/card/CardInDeckPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Tests that a {@code Card}\u0027s {@code Question} is in the given deck.","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class CardInDeckPredicate implements Predicate\u003cCard\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"    private final Deck deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"     * Constructs a CardInDeckPredicate","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"     * @param deck The Deck in question.","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public CardInDeckPredicate(Deck deck) {","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    public boolean test(Card card) {","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"        return deck.isSameDeck(card.getDeck());","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"                || (other instanceof CardInDeckPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 deck.equals(((CardInDeckPredicate) other).deck)); // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":1,"unfazing":32}},{"path":"src/main/java/seedu/address/model/card/IsSameCardPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":" * Tests that a {@code Card} is the same as the given {@code Card}.","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"public class IsSameCardPredicate implements Predicate\u003cCard\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"    private final Card card;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"    public IsSameCardPredicate(Card card) {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"        this.card \u003d card;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"     * Checks if the 2 cards are semantically equal based on Card::isSameCard.","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"     * @param card the input argument","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"     * @return true if 2 cards are semantically the same based on question, answer, deck","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    public boolean test(Card card) {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"        return card.isSameCard(this.card);","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"                || (other instanceof IsSameCardPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 card.equals(((IsSameCardPredicate) other).card)); // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"rockman007372":7,"unfazing":24}},{"path":"src/main/java/seedu/address/model/card/Question.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":" * Represents a Card\u0027s question in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class Question {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Question should not be blank\";","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public final String question;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"     * Constructs a {@code Question}.","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"     * @param question A valid name.","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    public Question(String question) {","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        requireNonNull(question);","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        this.question \u003d question;","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"    public static boolean isValidQuestion(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        return question;","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"                || (other instanceof Question // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 question.equals(((Question) other).question)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"        return question.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"unfazing":15,"-":40,"HJ-PRK":3}},{"path":"src/main/java/seedu/address/model/card/QuestionContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" * Tests that a {@code Card}\u0027s {@code Question} matches any of the keywords given.","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"public class QuestionContainsKeywordsPredicate implements Predicate\u003cCard\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public boolean test(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().question, keyword));","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"unfazing":8,"-":23}},{"path":"src/main/java/seedu/address/model/card/UniqueCardList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.card.exceptions.CardNotFoundException;","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.card.exceptions.DuplicateCardException;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":" * A list of cards that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":" * A card is considered unique by comparing using {@code Card#isSameCard(Card)}. As such, adding and updating of","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":" * cards uses Card#isSameCard(Card) for equality so as to ensure that the card being added or updated is","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":" * unique in terms of identity in the UniqueCardList. However, the removal of a card uses Card#equals(Object) so","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":" * as to ensure that the card with exactly the same fields will be removed.","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":" * @see Card#isSameCard(Card)","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"public class UniqueCardList implements Iterable\u003cCard\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"     * Returns true if the list contains an equivalent card as the given argument.","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"    public boolean contains(Card toCheck) {","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        return internalList.stream().anyMatch(toCheck::isSameCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"     * Adds a card to the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"     * The card must not already exist in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    public void add(Card toAdd) {","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"            throw new DuplicateCardException(); // TODO: change to DuplicateCardException","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"     * Replaces the card {@code target} in the list with {@code editedCard}.","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"     * The card identity of {@code editedCard} must not be the same as another existing card in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"    public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(target, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"            throw new CardNotFoundException();","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"        if (!target.isSameCard(editedCard) \u0026\u0026 contains(editedCard)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"            throw new DuplicateCardException();","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"        internalList.set(index, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"     * Removes the equivalent card from the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"     * The card must exist in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"    public void remove(Card toRemove) {","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"            throw new CardNotFoundException(); // TODO change to CardNotFoundException","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"    public void setCards(UniqueCardList replacement) {","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"     * Replaces the contents of this list with {@code cards}.","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"     * {@code cards} must not contain duplicate cards.","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"    public void setCards(List\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        if (!cardsAreUnique(cards)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"HJ-PRK"},"content":"            throw new DuplicateCardException();","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"        internalList.setAll(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"unfazing"},"content":"    public Iterator\u003cCard\u003e iterator() {","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"                || (other instanceof UniqueCardList // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"                        \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"     * Returns true if {@code cards} contains only unique cards.","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"    private boolean cardsAreUnique(List\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"unfazing"},"content":"            for (int j \u003d i + 1; j \u003c cards.size(); j++) {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"                if (cards.get(i).isSameCard(cards.get(j))) {","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"unfazing":38,"-":89,"HJ-PRK":10}},{"path":"src/main/java/seedu/address/model/card/exceptions/CardNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card.exceptions;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":" * Signals that the operation is unable to find the specified card.","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"public class CardNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"unfazing":2,"-":3,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/model/card/exceptions/DuplicateCardException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card.exceptions;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":" * Signals that the operation will result in duplicate cards (Cards are considered duplicates if they have the same","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"public class DuplicateCardException extends RuntimeException {","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"    public DuplicateCardException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"        super(\"Operation would result in duplicate cards\");","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"unfazing":1,"-":6,"HJ-PRK":4}},{"path":"src/main/java/seedu/address/model/deck/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.model.deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":" * A deck associated with a list of cards. Deck is guaranteed to be immutable.","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"public final class Deck {","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Deck name can take any values, and it should not be blank\";","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"    private final String deckName;","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"    private final boolean isSelected;","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"     * Constructing a deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"    public Deck(String deckName) {","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"        requireAllNonNull(deckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"        this.deckName \u003d deckName;","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"        isSelected \u003d false;","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"     * Private constructor called internally during deck selection. This is to keep deck immutable.","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"     * @param deckName Name of the deck","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"     * @param isSelected Boolean indicating if deck is selected.","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    private Deck(String deckName, boolean isSelected) {","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        requireAllNonNull(deckName);","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"        this.deckName \u003d deckName;","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"        this.isSelected \u003d isSelected;","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"    public Deck buildSelectedDeck() {","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        return new Deck(deckName, true);","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"    public Deck buildUnselectedDeck() {","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        return new Deck(deckName, false);","lastModifiedDate":"2023-03-23"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"     * Returns the name of the deck","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"     * @return deckName","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"    public String getDeckName() {","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"        return this.deckName;","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"     * Returns a header consisting of the title and the Deck Name wrapped in an ObservableList","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"junianob"},"content":"     * @return deckNameList","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e\u003e getDeckNameList() {","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"        ObservableList\u003cPair\u003cString, String\u003e\u003e deckNameList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"        Pair\u003cString, String\u003e header \u003d new Pair\u003c\u003e(\"Current Deck:\", this.deckName);","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        deckNameList.add(header);","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"        return deckNameList;","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"     * Returns true if a given string is a valid deck name.","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"    public static boolean isValidDeckName(String deckName) {","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"        return deckName.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if there is a deck of same name.","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"     * This defines a weaker notion of equality between two decks.","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"    public boolean isSameDeck(Deck otherDeck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"        if (otherDeck \u003d\u003d this) {","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"            return true;","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"HJ-PRK"},"content":"        return otherDeck !\u003d null","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 otherDeck.getDeckName().equals(getDeckName());","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"rockman007372"},"content":"    public boolean isSelected() {","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"        return isSelected;","lastModifiedDate":"2023-03-23"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"HJ-PRK"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2023-03-11"},{"lineNumber":95,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":97,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"            return true;","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"HJ-PRK"},"content":"        if (!(other instanceof Deck)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"HJ-PRK"},"content":"            return false;","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"        Deck otherDeck \u003d (Deck) other;","lastModifiedDate":"2023-03-18"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"        return otherDeck.getDeckName().equals(getDeckName());","lastModifiedDate":"2023-03-18"},{"lineNumber":108,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":109,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"HJ-PRK"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-03-11"},{"lineNumber":113,"author":{"gitId":"HJ-PRK"},"content":"        return Objects.hash(deckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":114,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":115,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":116,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":117,"author":{"gitId":"HJ-PRK"},"content":"    public String toString() {","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"        return this.deckName;","lastModifiedDate":"2023-03-18"},{"lineNumber":119,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":121,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"rockman007372":50,"junianob":11,"ruiyigan":2,"HJ-PRK":59}},{"path":"src/main/java/seedu/address/model/deck/DeckContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.model.deck;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":" * Tests that a {@code Card}\u0027s {@code Question} matches any of the keywords given.","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"public class DeckContainsKeywordsPredicate implements Predicate\u003cDeck\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    public DeckContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    public boolean test(Deck deck) {","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(deck.getDeckName(), keyword));","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"                || (other instanceof DeckContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 keywords.equals(((DeckContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"ruiyigan":8,"-":23}},{"path":"src/main/java/seedu/address/model/deck/UniqueDeckList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.model.deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import java.util.List;","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"//TODO Deck exceptions","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":" * A list of decks that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":" * A deck is considered unique by comparing using {@code Deck#isSameDeck(Deck)}. As such, adding and updating of","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":" * decks uses Deck#isSameDeck(Deck) for equality so as to ensure that the deck being added or updated is","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":" * unique in terms of identity in the UniqueCardList. However, the removal of a deck uses Card#equals(Object) so","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":" * as to ensure that the deck with exactly the same fields will be removed.","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":" *","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":" *","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":" * @see Deck#isSameDeck(Deck)","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"public class UniqueDeckList implements Iterable\u003cDeck\u003e {","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if the list contains an equivalent deck as the given argument.","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"    public boolean contains(Deck toCheck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"        return internalList.stream().anyMatch(toCheck::isSameDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"     * Adds a deck to the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"     * The card must not already exist in the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"    public void add(Deck toAdd) {","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"            //throw new DuplicateCardException();","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the deck {@code target} in the list with {@code editedDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"    public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        requireAllNonNull(target, editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"            //throw new CardNotFoundException();","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"            //throw new DuplicateCardException();","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"        internalList.set(index, editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"     * Removes the equivalent deck from the list.","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"     * The deck must exist in the list.","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"    public void remove(Deck toRemove) {","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"            //throw new CardNotFoundException();","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"    public void setDecks(UniqueDeckList replacement) {","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"HJ-PRK"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the contents of this list with {@code decks}.","lastModifiedDate":"2023-03-11"},{"lineNumber":89,"author":{"gitId":"HJ-PRK"},"content":"     * {@code cards} must not contain duplicate decks.","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"HJ-PRK"},"content":"    public void setDecks(List\u003cDeck\u003e decks) {","lastModifiedDate":"2023-03-11"},{"lineNumber":92,"author":{"gitId":"HJ-PRK"},"content":"        requireAllNonNull(decks);","lastModifiedDate":"2023-03-11"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"        if (!decksAreUnique(decks)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"HJ-PRK"},"content":"            //throw new DuplicateCardException();","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":97,"author":{"gitId":"HJ-PRK"},"content":"        internalList.setAll(decks);","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"HJ-PRK"},"content":"    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":107,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":108,"author":{"gitId":"HJ-PRK"},"content":"    public Iterator\u003cDeck\u003e iterator() {","lastModifiedDate":"2023-03-11"},{"lineNumber":109,"author":{"gitId":"HJ-PRK"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":113,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-11"},{"lineNumber":114,"author":{"gitId":"HJ-PRK"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-11"},{"lineNumber":115,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof UniqueDeckList // instanceof handles nulls","lastModifiedDate":"2023-03-11"},{"lineNumber":116,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));","lastModifiedDate":"2023-03-11"},{"lineNumber":117,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":119,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":120,"author":{"gitId":"HJ-PRK"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-11"},{"lineNumber":121,"author":{"gitId":"HJ-PRK"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-03-11"},{"lineNumber":122,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":123,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":124,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":125,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if {@code cards} contains only unique decks.","lastModifiedDate":"2023-03-11"},{"lineNumber":126,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":127,"author":{"gitId":"HJ-PRK"},"content":"    private boolean decksAreUnique(List\u003cDeck\u003e decks) {","lastModifiedDate":"2023-03-11"},{"lineNumber":128,"author":{"gitId":"HJ-PRK"},"content":"        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {","lastModifiedDate":"2023-03-11"},{"lineNumber":129,"author":{"gitId":"HJ-PRK"},"content":"            for (int j \u003d i + 1; j \u003c decks.size(); j++) {","lastModifiedDate":"2023-03-11"},{"lineNumber":130,"author":{"gitId":"HJ-PRK"},"content":"                if (decks.get(i).isSameDeck(decks.get(j))) {","lastModifiedDate":"2023-03-11"},{"lineNumber":131,"author":{"gitId":"HJ-PRK"},"content":"                    return false;","lastModifiedDate":"2023-03-11"},{"lineNumber":132,"author":{"gitId":"HJ-PRK"},"content":"                }","lastModifiedDate":"2023-03-11"},{"lineNumber":133,"author":{"gitId":"HJ-PRK"},"content":"            }","lastModifiedDate":"2023-03-11"},{"lineNumber":134,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":135,"author":{"gitId":"HJ-PRK"},"content":"        return true;","lastModifiedDate":"2023-03-11"},{"lineNumber":136,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":137,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"rockman007372":16,"HJ-PRK":121}},{"path":"src/main/java/seedu/address/model/review/Review.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.review;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import java.util.Random;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.IsSameCardPredicate;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.UniqueCardList;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":" * Represents a Review session that is currently underway.","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":" * Guarantees: details are present and not null, field values are validated.","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"public class Review {","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    private final Deck deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    private UniqueCardList uniqueReviewCardList;","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"    private final ObservableList\u003cCard\u003e unmodifiableReviewCardList;","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    private final FilteredList\u003cCard\u003e filteredReviewCardList;","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    private final int totalNumCards;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    private Card currCard;","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    private final List\u003cInteger\u003e orderOfCards;","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    private int currCardIndex \u003d 0; // 0-Indexed","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"    private ObservableList\u003cPair\u003cString, String\u003e\u003e reviewStatsList;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"    public Review(Deck deck, List\u003cCard\u003e cardsInDeck, int userSetNum) {","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        requireAllNonNull(deck, cardsInDeck, userSetNum);","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"        totalNumCards \u003d userSetNum \u003c 0","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"                ? cardsInDeck.size()","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"                : Integer.min(userSetNum, cardsInDeck.size());","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"        initReviewCardList(cardsInDeck);","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"        this.unmodifiableReviewCardList \u003d uniqueReviewCardList.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"        filteredReviewCardList \u003d new FilteredList\u003c\u003e(this.unmodifiableReviewCardList);","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"        // Randomise order of cards based on the total number of cards allowed in review","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"        orderOfCards \u003d new Random().ints(0, cardsInDeck.size())","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"                .distinct().limit(totalNumCards).boxed().collect(Collectors.toList());","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"        // initialise first card","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        currCard \u003d this.uniqueReviewCardList.asUnmodifiableObservableList().get(orderOfCards.get(currCardIndex));","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"        filteredReviewCardList.setPredicate(new IsSameCardPredicate(currCard));","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"        // initialize review stats","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"        reviewStatsList \u003d FXCollections.observableList(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-03-24"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"        updateReviewStatsList();","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"     * Initialize all cards as unflipped.","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"     * @param cardList List of Cards to initialize UniqueCardList with.","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"    private void initReviewCardList(List\u003cCard\u003e cardList) {","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"        uniqueReviewCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"        for (Card c : cardList) {","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"            uniqueReviewCardList.add(c.buildUnflippedCard());","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"     * Returns the list of card in this review.","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cCard\u003e getFilteredReviewCardList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"rockman007372"},"content":"        return filteredReviewCardList;","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"    public Deck getDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"        return deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"    public String getDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"        return deck.getDeckName();","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"rockman007372"},"content":"    private void unflipCard(Card card) {","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"rockman007372"},"content":"        this.uniqueReviewCardList.setCard(card, card.buildUnflippedCard());","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"rockman007372"},"content":"    private void flipCard(Card card) {","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"rockman007372"},"content":"        this.uniqueReviewCardList.setCard(card, card.buildFlippedCard());","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"rockman007372"},"content":"     * Updates the current card whenever the current card is modified in the Review card list.","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"rockman007372"},"content":"    private void updateCurrCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"rockman007372"},"content":"        int indexInReview \u003d orderOfCards.get(currCardIndex);","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"        currCard \u003d this.unmodifiableReviewCardList.get(indexInReview);","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"rockman007372"},"content":"     * Flips the current card in review.","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"    public void flipCurrCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"        if (currCard.isFlipped()) {","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"rockman007372"},"content":"            unflipCard(currCard);","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"rockman007372"},"content":"        } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"            flipCard(currCard);","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"        updateCurrCard();","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"rockman007372"},"content":"     * Checks the flip state of the current card in Review.","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"rockman007372"},"content":"     * @return true if the current card is flipped, otherwise false","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"    public boolean isCurrCardFlipped() {","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"rockman007372"},"content":"        return currCard.isFlipped();","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"unfazing"},"content":"     * Move to the next card to be under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"rockman007372"},"content":"     * @return boolean indicating if card is the last card","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"unfazing"},"content":"    public boolean goToNextCard() {","lastModifiedDate":"2023-03-18"},{"lineNumber":136,"author":{"gitId":"rockman007372"},"content":"        if (currCardIndex \u003d\u003d totalNumCards - 1) {","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"            return false;","lastModifiedDate":"2023-03-18"},{"lineNumber":138,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"rockman007372"},"content":"        unflipCard(currCard); // always unflip current card before moving to next","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"        currCardIndex++;","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"        currCard \u003d unmodifiableReviewCardList.get(orderOfCards.get(currCardIndex));","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"rockman007372"},"content":"        filteredReviewCardList.setPredicate(new IsSameCardPredicate(currCard));","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"        updateReviewStatsList();","lastModifiedDate":"2023-03-21"},{"lineNumber":147,"author":{"gitId":"unfazing"},"content":"        return true;","lastModifiedDate":"2023-03-18"},{"lineNumber":148,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"unfazing"},"content":"     * Move back to previous card to be under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"     * @return boolean indicating if card is the first card.","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"    public boolean goToPrevCard() {","lastModifiedDate":"2023-03-18"},{"lineNumber":155,"author":{"gitId":"rockman007372"},"content":"        if (currCardIndex \u003d\u003d 0) {","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"            return false;","lastModifiedDate":"2023-03-18"},{"lineNumber":157,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"rockman007372"},"content":"        unflipCard(currCard); // always unflip current card before moving to previous one","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"rockman007372"},"content":"        currCardIndex--;","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"rockman007372"},"content":"        currCard \u003d unmodifiableReviewCardList.get(orderOfCards.get(currCardIndex));","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"        filteredReviewCardList.setPredicate(new IsSameCardPredicate(currCard));","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"rockman007372"},"content":"        updateReviewStatsList();","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"rockman007372"},"content":"        return true;","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":169,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"rockman007372"},"content":"     * Returns the current card in the review.","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"rockman007372"},"content":"     * Card is always flipped to be consistent with the cards in MasterDeck.","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"rockman007372"},"content":"     * @return the current card flipped.","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"rockman007372"},"content":"    public Card getCurrCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"rockman007372"},"content":"        return currCard.buildFlippedCard();","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"rockman007372"},"content":"     * Tags the current card in review as easy/medium/hard","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":182,"author":{"gitId":"rockman007372"},"content":"     * @param tag the tag to add to current card.","lastModifiedDate":"2023-03-28"},{"lineNumber":183,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"rockman007372"},"content":"    public void tagCurrentCard(Tag tag) {","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"rockman007372"},"content":"        uniqueReviewCardList.setCard(currCard, currCard.buildCardWithtag(tag));","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"rockman007372"},"content":"        updateCurrCard();","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"unfazing"},"content":"        updateReviewStatsList();","lastModifiedDate":"2023-03-21"},{"lineNumber":188,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewStatsList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"unfazing"},"content":"        return reviewStatsList;","lastModifiedDate":"2023-03-21"},{"lineNumber":192,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":193,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"    public int getNoOfEasyTags() {","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"rockman007372"},"content":"        return (int) unmodifiableReviewCardList.stream().filter(card -\u003e card.getTagName().equals(\"easy\")).count();","lastModifiedDate":"2023-03-28"},{"lineNumber":196,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"unfazing"},"content":"    public int getNoOfMediumTags() {","lastModifiedDate":"2023-03-28"},{"lineNumber":199,"author":{"gitId":"rockman007372"},"content":"        return (int) unmodifiableReviewCardList.stream().filter(card -\u003e card.getTagName().equals(\"medium\")).count();","lastModifiedDate":"2023-03-28"},{"lineNumber":200,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":201,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":202,"author":{"gitId":"unfazing"},"content":"    public int getNoOfHardTags() {","lastModifiedDate":"2023-03-28"},{"lineNumber":203,"author":{"gitId":"rockman007372"},"content":"        return (int) unmodifiableReviewCardList.stream().filter(card -\u003e card.getTagName().equals(\"hard\")).count();","lastModifiedDate":"2023-03-28"},{"lineNumber":204,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":205,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":206,"author":{"gitId":"unfazing"},"content":"    public int getNoOfUntagged() {","lastModifiedDate":"2023-03-28"},{"lineNumber":207,"author":{"gitId":"rockman007372"},"content":"        return (int) unmodifiableReviewCardList.stream().filter(card -\u003e card.getTagName().equals(\"untagged\")).count();","lastModifiedDate":"2023-03-28"},{"lineNumber":208,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":209,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":210,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e \u003e getReviewDeckNameList() {","lastModifiedDate":"2023-03-22"},{"lineNumber":211,"author":{"gitId":"junianob"},"content":"        return deck.getDeckNameList();","lastModifiedDate":"2023-03-22"},{"lineNumber":212,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":213,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":214,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":215,"author":{"gitId":"unfazing"},"content":"     * Updates the list of review statistics (deck name, number of cards seen and tag count)","lastModifiedDate":"2023-03-28"},{"lineNumber":216,"author":{"gitId":"unfazing"},"content":"     * The review statistics are updated when next, prev and tagging commands are called.","lastModifiedDate":"2023-03-28"},{"lineNumber":217,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":218,"author":{"gitId":"unfazing"},"content":"    public void updateReviewStatsList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":219,"author":{"gitId":"unfazing"},"content":"        Pair\u003cString, String\u003e title \u003d new Pair\u003c\u003e(\"Deck Name\", deck.getDeckName());","lastModifiedDate":"2023-03-23"},{"lineNumber":220,"author":{"gitId":"unfazing"},"content":"        Pair\u003cString, String\u003e cardsSeen \u003d new Pair\u003c\u003e(\"Current Card Number:\",","lastModifiedDate":"2023-03-23"},{"lineNumber":221,"author":{"gitId":"rockman007372"},"content":"                String.format(\"%d/%d\", currCardIndex + 1, totalNumCards));","lastModifiedDate":"2023-03-28"},{"lineNumber":222,"author":{"gitId":"unfazing"},"content":"        Pair\u003cString, String\u003e tagCount \u003d new Pair\u003c\u003e(\"Current Tags:\",","lastModifiedDate":"2023-03-28"},{"lineNumber":223,"author":{"gitId":"unfazing"},"content":"                 String.format(\"%d Easy, %d Medium, %d Hard\",","lastModifiedDate":"2023-03-28"},{"lineNumber":224,"author":{"gitId":"unfazing"},"content":"                         getNoOfEasyTags(), getNoOfMediumTags(), getNoOfHardTags()));","lastModifiedDate":"2023-03-28"},{"lineNumber":225,"author":{"gitId":"rockman007372"},"content":"        Pair\u003cString, String\u003e navGuide \u003d new Pair\u003c\u003e(\"\", \"\");","lastModifiedDate":"2023-03-29"},{"lineNumber":226,"author":{"gitId":"unfazing"},"content":"        this.reviewStatsList.clear();","lastModifiedDate":"2023-03-21"},{"lineNumber":227,"author":{"gitId":"rockman007372"},"content":"        this.reviewStatsList.addAll(title, cardsSeen, tagCount, navGuide); // warning being called here","lastModifiedDate":"2023-03-29"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":229,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":123,"junianob":5,"ruiyigan":1,"unfazing":100}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":" * Represents a Tag in the master deck.","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"     * An enumeration of tag names for Tag class to show the difficulty level of a card.","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    public enum TagName {","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"        UNTAGGED,","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"        EASY,","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"        MEDIUM,","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"        HARD","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be either Easy, Medium, or Hard. \"","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"            + \"Tag is case-insensitive.\";","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    public static final String VALIDATION_REGEX \u003d \"(?i)\\\\b(easy|medium|hard)\\\\b\";","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public final TagName tagName;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    public Tag(TagName tagName) {","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2023-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"     * Returns true if tagName is UNTAGGED.","lastModifiedDate":"2023-03-26"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"    public boolean isUntagged() {","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"        return tagName.equals(TagName.UNTAGGED);","lastModifiedDate":"2023-03-26"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"    public TagName getTagName() {","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        return this.tagName;","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        return \u0027[\u0027 + tagName.name() + \u0027]\u0027;","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":12,"ruiyigan":11,"unfazing":4,"-":47,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":" * Contains utility methods for populating {@code Deck} with sample data.","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    private static final Deck DEFAULT_DECK \u003d new Deck(\"DEFAULT DECK\");","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"    public static Card[] getSampleCards() { // Todo: initilize new cards?","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"        return new Card[]{","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"            new Card(new Question(\"What is a loop\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"                    new Answer(\"A construct that repeats instructions until a condition is met\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"                    new Tag(Tag.TagName.EASY), DEFAULT_DECK),","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"            new Card(new Question(\"What is a variable\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"                    new Answer(\"A named memory location that stores a value\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"                    new Tag(Tag.TagName.EASY), DEFAULT_DECK),","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"            new Card(new Question(\"What is the structure of an atom\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"                    new Answer(\"Atoms consist of a nucleus containing protons and neutrons, \"","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"                            + \"surrounded by electrons in shells or energy levels\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"                    new Tag(Tag.TagName.MEDIUM), DEFAULT_DECK),","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"            new Card(new Question(\"What is the basic unit of life\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"                    new Answer(\"The cell is the basic unit of life\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"                    new Tag(Tag.TagName.HARD), DEFAULT_DECK),","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"            new Card(new Question(\"Who was the first president of the United States\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"                    new Answer(\"George Washington\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"                    new Tag(Tag.TagName.HARD), DEFAULT_DECK),","lastModifiedDate":"2023-03-26"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"            new Card(new Question(\"When did Singapore gain independence\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"                    new Answer(\"9 August 1965\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"                    new Tag(Tag.TagName.MEDIUM), DEFAULT_DECK),","lastModifiedDate":"2023-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"    public static ReadOnlyMasterDeck getSampleMasterDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        MasterDeck sampleMasterDeck \u003d new MasterDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        for (Card sampleCard : getSampleCards()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"            sampleMasterDeck.addCard(sampleCard);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"        sampleMasterDeck.initDecks();","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        return sampleMasterDeck;","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"rockman007372":22,"ruiyigan":1,"unfazing":11,"-":13,"HJ-PRK":2}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":" * Jackson-friendly version of {@link Card}.","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"class JsonAdaptedCard {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    private final String question;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    private final String answer;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"    private final String tag;","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    private final String deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"     * Constructs a {@code JsonAdaptedCard} with the given card details.","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public JsonAdaptedCard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String address,","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"                           @JsonProperty(\"tag\") String tag, @JsonProperty(\"deck\") String deck) {","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        this.question \u003d question;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        this.answer \u003d address;","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"     * Converts a given {@code Card} into this class for Jackson use.","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    public JsonAdaptedCard(Card source) {","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        question \u003d source.getQuestion().question;","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        answer \u003d source.getAnswer().answer;","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"        tag \u003d source.getTagName();","lastModifiedDate":"2023-03-26"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"        deck \u003d source.getDeck().getDeckName();","lastModifiedDate":"2023-03-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"     * Converts this Jackson-friendly adapted card object into the model\u0027s {@code Card} object.","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted card.","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"    public Card toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"        final Question modelQuestion \u003d toModelQuestion();","lastModifiedDate":"2023-03-26"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"        final Answer modelAnswer \u003d toModelAnswer();","lastModifiedDate":"2023-03-26"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"        final Tag modelTag \u003d toModelTag();","lastModifiedDate":"2023-03-26"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"        final Deck modelDeck \u003d new Deck(deck);","lastModifiedDate":"2023-03-26"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        return new Card(modelQuestion, modelAnswer, modelTag, modelDeck);","lastModifiedDate":"2023-03-26"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"    private Question toModelQuestion() throws IllegalValueException {","lastModifiedDate":"2023-03-26"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        if (question \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName())","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"            );","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        if (!Question.isValidQuestion(question)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"        return new Question(question);","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"    private Answer toModelAnswer() throws IllegalValueException {","lastModifiedDate":"2023-03-26"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        if (answer \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2023-03-26"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName())","lastModifiedDate":"2023-03-26"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"            );","lastModifiedDate":"2023-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        if (!Answer.isValidAnswer(answer)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"rockman007372"},"content":"        return new Answer(answer);","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"rockman007372"},"content":"    private Tag toModelTag() throws IllegalValueException {","lastModifiedDate":"2023-03-26"},{"lineNumber":86,"author":{"gitId":"rockman007372"},"content":"        if (tag \u003d\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"        Tag modelTag;","lastModifiedDate":"2023-03-26"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"        if (tag.equalsIgnoreCase(\"untagged\") || Tag.isValidTagName(tag)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"            modelTag \u003d new Tag(Tag.TagName.valueOf(tag.toUpperCase()));","lastModifiedDate":"2023-03-26"},{"lineNumber":93,"author":{"gitId":"rockman007372"},"content":"        } else {","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"rockman007372"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"rockman007372"},"content":"        return modelTag;","lastModifiedDate":"2023-03-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"rockman007372":31,"ruiyigan":19,"unfazing":15,"-":34}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedDeck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":" * Jackson-friendly version of {@link Deck}.","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"public class JsonAdaptedDeck {","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck name is missing!\";","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    private final String deckName;","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"     * Constructs a {@code JsonAdaptedDeck} with the given deck details.","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"    public JsonAdaptedDeck(@JsonProperty(\"deckName\") String deckName) {","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"        this.deckName \u003d deckName;","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"     * Converts a given {@code Deck} into this class for Jackson use.","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    public JsonAdaptedDeck(Deck source) {","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"        this.deckName \u003d source.getDeckName();","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"     * Converts this Jackson-friendly adapted Deck object into the model\u0027s {@code Deck} object.","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted deck.","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    public Deck toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"        if (deckName \u003d\u003d null) {","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        if (!Question.isValidQuestion(deckName)) { // Todo: any constraints on Deck Name?","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        return new Deck(deckName);","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"rockman007372":48}},{"path":"src/main/java/seedu/address/storage/JsonMasterDeckStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":" * A class to access MasterDeck data stored as a json file on the hard disk.","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"public class JsonMasterDeckStorage implements MasterDeckStorage {","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonMasterDeckStorage.class);","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    private final Path filePath;","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    public JsonMasterDeckStorage(Path filePath) {","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck() throws DataConversionException {","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        return readMasterDeck(filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"     * Similar to {@link #readMasterDeck()}.","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck(Path filePath) throws DataConversionException {","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"        Optional\u003cJsonSerializableMasterDeck\u003e jsonMasterDeck \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"                filePath, JsonSerializableMasterDeck.class);","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"        if (jsonMasterDeck.isEmpty()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"            return Optional.of(jsonMasterDeck.get().toModelType());","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"    public void saveMasterDeck(ReadOnlyMasterDeck masterDeck) throws IOException {","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        saveMasterDeck(masterDeck, filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"     * Similar to {@link #saveMasterDeck(ReadOnlyMasterDeck)}.","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"    public void saveMasterDeck(ReadOnlyMasterDeck masterDeck, Path filePath) throws IOException {","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(masterDeck);","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableMasterDeck(masterDeck), filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"rockman007372":20,"-":58,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/storage/JsonSerializableMasterDeck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":" * An Immutable Deck that is serializable to JSON format.","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"@JsonRootName(value \u003d \"masterdeck\")","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"class JsonSerializableMasterDeck {","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_DUPLICATE_CARD \u003d \"Card list contains duplicate card(s).\";","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Deck list contains duplicate deck(s).\";","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_MISSING_DECK \u003d \"Some cards exist without an existing deck.\";","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    private final List\u003cJsonAdaptedCard\u003e cards \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"     * Constructs a {@code JsonSerializableMasterDeck} with the given cards.","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    public JsonSerializableMasterDeck(@JsonProperty(\"cards\") List\u003cJsonAdaptedCard\u003e cards,","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"                                      @JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        this.cards.addAll(cards);","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"        this.decks.addAll(decks);","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"     * Converts a given {@code ReadOnlyDeck} into this class for Jackson use.","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableMasterDeck}.","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"    public JsonSerializableMasterDeck(ReadOnlyMasterDeck source) {","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        cards.addAll(source.getCardList().stream().map(JsonAdaptedCard::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        decks.addAll(source.getDeckList().stream().map(JsonAdaptedDeck::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"     * Converts this JSON MasterDeck into the model\u0027s {@code Deck} object.","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"    public MasterDeck toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"        MasterDeck masterDeck \u003d new MasterDeck();","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"            Deck deck \u003d jsonAdaptedDeck.toModelType();","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"            if (masterDeck.hasDeck(deck)) {","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"            masterDeck.addDeck(deck);","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"        for (JsonAdaptedCard jsonAdaptedCard : cards) {","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"            Card card \u003d jsonAdaptedCard.toModelType();","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"            if (masterDeck.hasCard(card)) {","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"HJ-PRK"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"            Deck currDeck \u003d card.getDeck();","lastModifiedDate":"2023-03-22"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"            if (!masterDeck.hasDeck(currDeck)) {","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"                throw new IllegalValueException(MESSAGE_MISSING_DECK);","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"            masterDeck.addCard(card);","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"rockman007372"},"content":"        return masterDeck;","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"rockman007372":32,"ruiyigan":5,"unfazing":3,"-":36,"HJ-PRK":7}},{"path":"src/main/java/seedu/address/storage/MasterDeckStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":" * Represents a storage for {@link MasterDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"public interface MasterDeckStorage {","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"    Path getMasterDeckFilePath();","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"     * Returns Deck data as a {@link ReadOnlyMasterDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"    Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"     * @see #getMasterDeckFilePath()","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"     * Saves the given {@link ReadOnlyMasterDeck} to the storage.","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"     * @param masterDeck cannot be null.","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    void saveMasterDeck(ReadOnlyMasterDeck masterDeck) throws IOException;","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"     * @see #saveMasterDeck(ReadOnlyMasterDeck)","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"    void saveMasterDeck(ReadOnlyMasterDeck masterDeck, Path filePath) throws IOException;","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"rockman007372":9,"-":32,"HJ-PRK":5}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"public interface Storage extends MasterDeckStorage, UserPrefsStorage {","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    Path getMasterDeckFilePath();","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"    Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    void saveMasterDeck(ReadOnlyMasterDeck masterDeck) throws IOException;","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"rockman007372":4,"-":27,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" * Manages storage of Deck data in local storage.","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"    private final MasterDeckStorage masterDeckStorage;","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"    private final UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"     * Creates a {@code StorageManager} with the given {@code MasterDeckStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    public StorageManager(MasterDeckStorage masterDeckStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"        this.masterDeckStorage \u003d masterDeckStorage;","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"    public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"        return masterDeckStorage.getMasterDeckFilePath();","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck() throws DataConversionException, IOException {","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        return readMasterDeck(masterDeckStorage.getMasterDeckFilePath());","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        return masterDeckStorage.readMasterDeck(filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"    public void saveMasterDeck(ReadOnlyMasterDeck masterDeck) throws IOException {","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"        saveMasterDeck(masterDeck, masterDeckStorage.getMasterDeckFilePath());","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"    public void saveMasterDeck(ReadOnlyMasterDeck masterDeck, Path filePath) throws IOException {","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"        masterDeckStorage.saveMasterDeck(masterDeck, filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rockman007372":15,"unfazing":2,"-":60,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/ui/CardElement.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":" * A UI component that displays information of a {@code Card}.","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"public class CardElement extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"CardElement.fxml\";","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Deck level 4\u003c/a\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    public final Card card;","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    private Label question;","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    private Label answer;","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"     * Creates a {@code CardCode} with the given {@code Card} and index to display.","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"    public CardElement(Card card, int displayedIndex) {","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        this.card \u003d card;","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        question.setText(card.getQuestion().question);","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        answer.setText(card.getAnswer().answer);","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        if (!card.getTag().tagName.equals(Tag.TagName.UNTAGGED)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"            tags.getChildren().add(new CardTag(card.getTagName()));","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"    static class CardTag extends Label {","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"        public CardTag(String name) {","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"junianob"},"content":"            super(name);","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"            if (name.equals(\"easy\")) {","lastModifiedDate":"2023-03-20"},{"lineNumber":58,"author":{"gitId":"junianob"},"content":"                setStyle(\"-fx-background-color:#00FF00;\");","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"junianob"},"content":"            } else if (name.equals(\"medium\")) {","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"                setStyle(\"-fx-background-color:#FFA500;\");","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"            } else if (name.equals(\"hard\")) {","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"                setStyle(\"-fx-background-color:#ff0000;\");","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"junianob"},"content":"        if (!(other instanceof CardElement)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"junianob"},"content":"        CardElement card \u003d (CardElement) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 this.card.equals(card.card);","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"rockman007372":9,"junianob":15,"ruiyigan":4,"unfazing":5,"-":51}},{"path":"src/main/java/seedu/address/ui/CardListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"public class CardListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"CardListPanel.fxml\";","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"    private ListView\u003cCard\u003e cardListView;","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"     * Creates a {@code CardListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    public CardListPanel(ObservableList\u003cCard\u003e cardList, boolean isReview) {","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"        cardListView.setItems(cardList);","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"        cardListView.setCellFactory(listView -\u003e new CardListViewCell());","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        if (isReview) {","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"            toggleReview();","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"        } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"            endReview();","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    private void toggleReview() {","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"        cardListView.setCellFactory(listView -\u003e new ReviewCardListViewCell());","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"    private void endReview() {","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"        cardListView.setCellFactory(listView -\u003e new CardListViewCell());","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ReviewCard} using a {@code CardElement}.","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"    static class ReviewCardListViewCell extends ListCell\u003cCard\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        protected void updateItem(Card card, boolean empty) {","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"            super.updateItem(card, empty);","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"            if (empty || card \u003d\u003d null) {","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"                setText(null);","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"            } else {","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"                setGraphic(new ReviewCard(card).getRoot());","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"                setStyle(\"-fx-border-insets: 10px; -fx-background-insets: 10px; -fx-padding: 10 80 10 80; \"","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"                        + \"-fx-background-color:#e6eaeb \");","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"junianob"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardElement}.","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"    static class CardListViewCell extends ListCell\u003cCard\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"        protected void updateItem(Card card, boolean empty) {","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"            super.updateItem(card, empty);","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"            if (empty || card \u003d\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"junianob"},"content":"                setGraphic(new CardElement(card, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"junianob"},"content":"                setStyle(\"-fx-border-insets: 10px; -fx-background-insets: 10px; -fx-padding: 10 80 10 80; \"","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"                        + \"-fx-background-color:#e6eaeb \");","lastModifiedDate":"2023-03-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"rockman007372":31,"junianob":15,"unfazing":6,"-":33}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"rockman007372":1,"-":84}},{"path":"src/main/java/seedu/address/ui/DeckElement.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":" * An UI component that displays information of a {@code Deck}.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"public class DeckElement extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"DeckElement.fxml\";","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Deck level 4\u003c/a\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"    public final Deck deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"    private Label name;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"    private Label id;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"     * Creates a {@code DeckCode} with the given {@code deck} and index to display.","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    public DeckElement(Deck deck, int displayedIndex) {","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"        super(FXML);","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"        name.setText(deck.getDeckName());","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"        if (deck.isSelected()) {","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"            this.getRoot().setStyle(\"-fx-background-color: #007aff\");","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"            this.id.setStyle(\"-fx-text-fill: white\");","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"            this.name.setStyle(\"-fx-text-fill: white\");","lastModifiedDate":"2023-03-23"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"junianob"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"junianob"},"content":"        if (!(other instanceof DeckElement)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"junianob"},"content":"            return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"        // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"junianob"},"content":"        DeckElement deck \u003d (DeckElement) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"junianob"},"content":"        return id.getText().equals(deck.id.getText())","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 this.deck.equals(deck.deck);","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":7,"junianob":60}},{"path":"src/main/java/seedu/address/ui/DeckListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"public class DeckListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"DeckListPanel.fxml\";","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"    private ListView\u003cDeck\u003e deckListView;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"     * Creates a {@code CardListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    public DeckListPanel(ObservableList\u003cDeck\u003e deckList, boolean isReview) {","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"        super(FXML);","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"        deckListView.setItems(deckList);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        if (!isReview) {","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"            deckListView.setCellFactory(listView -\u003e new DeckListViewCell());","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardElement}.","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    class DeckListViewCell extends ListCell\u003cDeck\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"        protected void updateItem(Deck deck, boolean empty) {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"            super.updateItem(deck, empty);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"            if (empty || deck \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"                setText(null);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"            } else {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"                setGraphic(new DeckElement(deck, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"                setStyle(\"-fx-border-insets: 10px; -fx-background-insets: 10px; -fx-padding: 10 20 10 20; \"","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"                        + \"-fx-background-color:#FFFFFF\");","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"junianob":49,"unfazing":3}},{"path":"src/main/java/seedu/address/ui/DeckName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"/**","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":" * Individual element of the review panel","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"public class DeckName extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"DeckName.fxml\";","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"    private Label title;","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    private Label description;","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"     * Creates a {@code DeckName} with the given {@code name}.","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"    public DeckName(String name) {","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"        super(FXML);","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"        title.setText(name.equals(EMPTY_STRING) ? EMPTY_STRING : \"Selected deck:\");","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"        description.setText(name);","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"rockman007372":5,"junianob":23}},{"path":"src/main/java/seedu/address/ui/DeckNamePanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":" * Panel containing the deck name of the current review.","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"public class DeckNamePanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"DeckNamePanel.fxml\";","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ReviewStatsPanel.class);","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"    private ListView\u003cString\u003e deckNameView;","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"     * Creates a {@code ReviewStatsPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"    public DeckNamePanel(ObservableList\u003cString\u003e deckNameList) {","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"        super(FXML);","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"        deckNameView.setItems(deckNameList);","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"        deckNameView.setCellFactory(listView -\u003e new DeckNameViewCell());","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"    static class DeckNameViewCell extends ListCell\u003cString\u003e {","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"        @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"        protected void updateItem(String deckName, boolean empty) {","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"            super.updateItem(deckName, empty);","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"            if (empty || deckName \u003d\u003d null) {","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"                setText(null);","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"            } else {","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"                setGraphic(new DeckName(deckName).getRoot());","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"                // ensures title does not expand so that horizontal scrollbar does not appear","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"                setStyle(\"-fx-background-color: transparent; -fx-max-width: 100; -fx-pref-width: 100\");","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"rockman007372":11,"junianob":35,"unfazing":1}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.control.ButtonType;","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"import javafx.scene.text.TextFlow;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"    private static final Text MAIN_TITLE \u003d new Text(\"Main\");","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"    private static final Text REVIEW_TITLE \u003d new Text(\"Review\");","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    private static final ObservableList\u003cString\u003e EMPTY_TITLE \u003d FXCollections.observableArrayList(\"\");","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"    private static final String FILTER_DECK_PREFIX \u003d \"Finding Decks with keyword: \";","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"    private static final String FILTER_CARD_PREFIX \u003d \"Finding Cards with keyword: \";","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"    private final Stage primaryStage;","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"    private final Logic logic;","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"    private CardListPanel cardListPanel;","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"    private UiPart\u003cRegion\u003e deckListPanel;","lastModifiedDate":"2023-03-31"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"    private UiPart\u003cRegion\u003e rightDeckTitle;","lastModifiedDate":"2023-03-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"    private final HelpWindow helpWindow;","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"    private StackPane rightPanelPlaceholder;","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"    private StackPane rightPanelTitlePlaceholder;","lastModifiedDate":"2023-03-24"},{"lineNumber":64,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"    private StackPane leftPanelPlaceholder;","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"junianob"},"content":"    private TextFlow titlePanel;","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"junianob"},"content":"    private TextFlow leftFilterText;","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"junianob"},"content":"    private TextFlow rightFilterText;","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"unfazing"},"content":"        titlePanel.getChildren().add(MAIN_TITLE);","lastModifiedDate":"2023-03-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"rockman007372"},"content":"        rightDeckTitle \u003d new DeckNamePanel(logic.getDeckNameList());","lastModifiedDate":"2023-03-31"},{"lineNumber":146,"author":{"gitId":"rockman007372"},"content":"        rightPanelTitlePlaceholder.getChildren().add(rightDeckTitle.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":148,"author":{"gitId":"junianob"},"content":"        cardListPanel \u003d new CardListPanel(logic.getFilteredCardList(), false);","lastModifiedDate":"2023-03-29"},{"lineNumber":149,"author":{"gitId":"junianob"},"content":"        rightPanelPlaceholder.getChildren().add(cardListPanel.getRoot());","lastModifiedDate":"2023-03-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":151,"author":{"gitId":"rockman007372"},"content":"        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList(), false);","lastModifiedDate":"2023-03-31"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"        leftPanelPlaceholder.getChildren().add(deckListPanel.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2023-03-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2023-03-30"},{"lineNumber":156,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":160,"author":{"gitId":"HJ-PRK"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMasterDeckFilePath());","lastModifiedDate":"2023-03-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"rockman007372"},"content":"    void show() {","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"rockman007372"},"content":"        primaryStage.show();","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":179,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":204,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":205,"author":{"gitId":"rockman007372"},"content":"     * Creates a confirmation pop-up","lastModifiedDate":"2023-03-24"},{"lineNumber":206,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":207,"author":{"gitId":"rockman007372"},"content":"    public void handleClear() {","lastModifiedDate":"2023-03-24"},{"lineNumber":208,"author":{"gitId":"rockman007372"},"content":"        /* Creates a confirmation alert */","lastModifiedDate":"2023-03-24"},{"lineNumber":209,"author":{"gitId":"rockman007372"},"content":"        Alert alert \u003d new Alert(Alert.AlertType.CONFIRMATION);","lastModifiedDate":"2023-03-24"},{"lineNumber":210,"author":{"gitId":"rockman007372"},"content":"        alert.setTitle(\"Confirmation\");","lastModifiedDate":"2023-03-24"},{"lineNumber":211,"author":{"gitId":"rockman007372"},"content":"        alert.setHeaderText(\"Are you sure you want to clear all data?\");","lastModifiedDate":"2023-03-24"},{"lineNumber":212,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":213,"author":{"gitId":"rockman007372"},"content":"        /* Creates buttons */","lastModifiedDate":"2023-03-24"},{"lineNumber":214,"author":{"gitId":"rockman007372"},"content":"        ButtonType buttonYes \u003d new ButtonType(\"Yes\");","lastModifiedDate":"2023-03-24"},{"lineNumber":215,"author":{"gitId":"rockman007372"},"content":"        ButtonType buttonNo \u003d new ButtonType(\"No\");","lastModifiedDate":"2023-03-24"},{"lineNumber":216,"author":{"gitId":"rockman007372"},"content":"        alert.getButtonTypes().setAll(buttonYes, buttonNo);","lastModifiedDate":"2023-03-24"},{"lineNumber":217,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":218,"author":{"gitId":"rockman007372"},"content":"        /* Checks user\u0027s answer */","lastModifiedDate":"2023-03-24"},{"lineNumber":219,"author":{"gitId":"rockman007372"},"content":"        Optional\u003cButtonType\u003e answer \u003d alert.showAndWait();","lastModifiedDate":"2023-03-24"},{"lineNumber":220,"author":{"gitId":"rockman007372"},"content":"        answer.filter(response -\u003e response \u003d\u003d buttonYes).ifPresent(unused -\u003e logic.factoryReset());","lastModifiedDate":"2023-03-24"},{"lineNumber":221,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":222,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":223,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":224,"author":{"gitId":"unfazing"},"content":"     * Shows the review stats panel.","lastModifiedDate":"2023-03-21"},{"lineNumber":225,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":226,"author":{"gitId":"unfazing"},"content":"    public void handleStartReview() {","lastModifiedDate":"2023-03-21"},{"lineNumber":227,"author":{"gitId":"rockman007372"},"content":"        deckListPanel \u003d new ReviewStatsPanel(logic.getReviewStatsList());","lastModifiedDate":"2023-03-31"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"        leftPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2023-03-23"},{"lineNumber":229,"author":{"gitId":"rockman007372"},"content":"        leftPanelPlaceholder.getChildren().add(deckListPanel.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":230,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":231,"author":{"gitId":"junianob"},"content":"        cardListPanel \u003d new CardListPanel(logic.getReviewCardList(), true);","lastModifiedDate":"2023-03-29"},{"lineNumber":232,"author":{"gitId":"rockman007372"},"content":"        rightPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2023-03-28"},{"lineNumber":233,"author":{"gitId":"junianob"},"content":"        rightPanelPlaceholder.getChildren().add(cardListPanel.getRoot());","lastModifiedDate":"2023-03-29"},{"lineNumber":234,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":235,"author":{"gitId":"unfazing"},"content":"        titlePanel.getChildren().clear();","lastModifiedDate":"2023-03-23"},{"lineNumber":236,"author":{"gitId":"unfazing"},"content":"        titlePanel.getChildren().add(REVIEW_TITLE);","lastModifiedDate":"2023-03-23"},{"lineNumber":237,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":238,"author":{"gitId":"rockman007372"},"content":"        rightDeckTitle \u003d new DeckNamePanel(EMPTY_TITLE);","lastModifiedDate":"2023-03-31"},{"lineNumber":239,"author":{"gitId":"rockman007372"},"content":"        rightPanelTitlePlaceholder.getChildren().clear();","lastModifiedDate":"2023-03-31"},{"lineNumber":240,"author":{"gitId":"rockman007372"},"content":"        rightPanelTitlePlaceholder.getChildren().add(rightDeckTitle.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":241,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":242,"author":{"gitId":"unfazing"},"content":"        rightFilterText.getChildren().clear();","lastModifiedDate":"2023-03-31"},{"lineNumber":243,"author":{"gitId":"rockman007372"},"content":"        leftFilterText.getChildren().clear();","lastModifiedDate":"2023-03-31"},{"lineNumber":244,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":245,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":246,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":247,"author":{"gitId":"unfazing"},"content":"     * Shows the deck list panel.","lastModifiedDate":"2023-03-21"},{"lineNumber":248,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":249,"author":{"gitId":"unfazing"},"content":"    public void handleEndReview() {","lastModifiedDate":"2023-03-21"},{"lineNumber":250,"author":{"gitId":"rockman007372"},"content":"        updateDeckTitle();","lastModifiedDate":"2023-03-24"},{"lineNumber":251,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":252,"author":{"gitId":"rockman007372"},"content":"        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList(), false);","lastModifiedDate":"2023-03-31"},{"lineNumber":253,"author":{"gitId":"unfazing"},"content":"        leftPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2023-03-23"},{"lineNumber":254,"author":{"gitId":"rockman007372"},"content":"        leftPanelPlaceholder.getChildren().add(deckListPanel.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":255,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":256,"author":{"gitId":"junianob"},"content":"        cardListPanel \u003d new CardListPanel(logic.getFilteredCardList(), false);","lastModifiedDate":"2023-03-29"},{"lineNumber":257,"author":{"gitId":"rockman007372"},"content":"        rightPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2023-03-28"},{"lineNumber":258,"author":{"gitId":"junianob"},"content":"        rightPanelPlaceholder.getChildren().add(cardListPanel.getRoot());","lastModifiedDate":"2023-03-29"},{"lineNumber":259,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":260,"author":{"gitId":"unfazing"},"content":"        titlePanel.getChildren().clear();","lastModifiedDate":"2023-03-23"},{"lineNumber":261,"author":{"gitId":"unfazing"},"content":"        titlePanel.getChildren().add(MAIN_TITLE);","lastModifiedDate":"2023-03-23"},{"lineNumber":262,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":263,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":264,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":265,"author":{"gitId":"rockman007372"},"content":"     * Updates the deck title to show the current deck selected.","lastModifiedDate":"2023-03-31"},{"lineNumber":266,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":267,"author":{"gitId":"rockman007372"},"content":"    public void updateDeckTitle() {","lastModifiedDate":"2023-03-24"},{"lineNumber":268,"author":{"gitId":"unfazing"},"content":"        rightPanelTitlePlaceholder.getChildren().clear();","lastModifiedDate":"2023-03-24"},{"lineNumber":269,"author":{"gitId":"rockman007372"},"content":"        rightDeckTitle \u003d new DeckNamePanel(logic.getDeckNameList());","lastModifiedDate":"2023-03-31"},{"lineNumber":270,"author":{"gitId":"rockman007372"},"content":"        rightPanelTitlePlaceholder.getChildren().add(rightDeckTitle.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":271,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":272,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":273,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":274,"author":{"gitId":"junianob"},"content":"     * Gets the argument from a command","lastModifiedDate":"2023-03-30"},{"lineNumber":275,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":276,"author":{"gitId":"junianob"},"content":"    private String getArgs(String commandText) {","lastModifiedDate":"2023-03-30"},{"lineNumber":277,"author":{"gitId":"rockman007372"},"content":"        String[] commandArray \u003d commandText.split(\" \", 2);","lastModifiedDate":"2023-03-31"},{"lineNumber":278,"author":{"gitId":"rockman007372"},"content":"        return commandArray[1].trim();","lastModifiedDate":"2023-03-31"},{"lineNumber":279,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":280,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":281,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":282,"author":{"gitId":"junianob"},"content":"     * Displays the find parameters of cards","lastModifiedDate":"2023-03-30"},{"lineNumber":283,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":284,"author":{"gitId":"junianob"},"content":"    public void handleFindCards(String commandText) {","lastModifiedDate":"2023-03-30"},{"lineNumber":285,"author":{"gitId":"junianob"},"content":"        Text args \u003d new Text(FILTER_CARD_PREFIX + getArgs(commandText));","lastModifiedDate":"2023-03-30"},{"lineNumber":286,"author":{"gitId":"rockman007372"},"content":"        rightFilterText.getChildren().clear();","lastModifiedDate":"2023-03-31"},{"lineNumber":287,"author":{"gitId":"junianob"},"content":"        rightFilterText.getChildren().add(args);","lastModifiedDate":"2023-03-30"},{"lineNumber":288,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":289,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":290,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":291,"author":{"gitId":"junianob"},"content":"     * Displays the find parameters of decks","lastModifiedDate":"2023-03-30"},{"lineNumber":292,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":293,"author":{"gitId":"junianob"},"content":"    public void handleFindDecks(String commandText) {","lastModifiedDate":"2023-03-30"},{"lineNumber":294,"author":{"gitId":"junianob"},"content":"        Text args \u003d new Text(FILTER_DECK_PREFIX + getArgs(commandText));","lastModifiedDate":"2023-03-30"},{"lineNumber":295,"author":{"gitId":"rockman007372"},"content":"        leftFilterText.getChildren().clear();","lastModifiedDate":"2023-03-31"},{"lineNumber":296,"author":{"gitId":"junianob"},"content":"        leftFilterText.getChildren().add(args);","lastModifiedDate":"2023-03-30"},{"lineNumber":297,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":298,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":299,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":300,"author":{"gitId":"junianob"},"content":"     * Hides the find parameters of cards","lastModifiedDate":"2023-03-30"},{"lineNumber":301,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":302,"author":{"gitId":"junianob"},"content":"    public void handleShowCards() {","lastModifiedDate":"2023-03-30"},{"lineNumber":303,"author":{"gitId":"junianob"},"content":"        rightFilterText.getChildren().clear();","lastModifiedDate":"2023-03-30"},{"lineNumber":304,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":305,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":306,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":307,"author":{"gitId":"junianob"},"content":"     * Hides the find parameters of decks","lastModifiedDate":"2023-03-30"},{"lineNumber":308,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":309,"author":{"gitId":"junianob"},"content":"    public void handleShowDecks() {","lastModifiedDate":"2023-03-30"},{"lineNumber":310,"author":{"gitId":"junianob"},"content":"        leftFilterText.getChildren().clear();","lastModifiedDate":"2023-03-30"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":314,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":315,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":316,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":317,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":321,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":322,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":324,"author":{"gitId":"junianob"},"content":"            if (commandResult.isFindCards()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":325,"author":{"gitId":"junianob"},"content":"                handleFindCards(commandText);","lastModifiedDate":"2023-03-30"},{"lineNumber":326,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":327,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":328,"author":{"gitId":"junianob"},"content":"            if (commandResult.isFindDecks()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":329,"author":{"gitId":"junianob"},"content":"                handleFindDecks(commandText);","lastModifiedDate":"2023-03-30"},{"lineNumber":330,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":331,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":332,"author":{"gitId":"junianob"},"content":"            if (commandResult.isShowCards()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":333,"author":{"gitId":"junianob"},"content":"                handleShowCards();","lastModifiedDate":"2023-03-30"},{"lineNumber":334,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":335,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":336,"author":{"gitId":"junianob"},"content":"            if (commandResult.isShowDecks()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":337,"author":{"gitId":"junianob"},"content":"                handleShowDecks();","lastModifiedDate":"2023-03-30"},{"lineNumber":338,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":339,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":341,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":344,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":346,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":348,"author":{"gitId":"rockman007372"},"content":"            if (commandResult.isClear()) {","lastModifiedDate":"2023-03-24"},{"lineNumber":349,"author":{"gitId":"rockman007372"},"content":"                handleClear();","lastModifiedDate":"2023-03-24"},{"lineNumber":350,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-24"},{"lineNumber":351,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":352,"author":{"gitId":"rockman007372"},"content":"            if (commandResult.isStartReview()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":353,"author":{"gitId":"rockman007372"},"content":"                handleStartReview();","lastModifiedDate":"2023-03-21"},{"lineNumber":354,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":355,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":356,"author":{"gitId":"rockman007372"},"content":"            if (commandResult.isEndReview()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":357,"author":{"gitId":"unfazing"},"content":"                handleEndReview();","lastModifiedDate":"2023-03-21"},{"lineNumber":358,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":359,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":360,"author":{"gitId":"unfazing"},"content":"            if (commandResult.isSelectDeck() || commandResult.isUnselectDeck()) {","lastModifiedDate":"2023-03-24"},{"lineNumber":361,"author":{"gitId":"rockman007372"},"content":"                updateDeckTitle();","lastModifiedDate":"2023-03-24"},{"lineNumber":362,"author":{"gitId":"unfazing"},"content":"                rightFilterText.getChildren().clear();","lastModifiedDate":"2023-03-31"},{"lineNumber":363,"author":{"gitId":"unfazing"},"content":"            }","lastModifiedDate":"2023-03-24"},{"lineNumber":364,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":365,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":369,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":372,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"rockman007372":81,"junianob":77,"unfazing":29,"-":184,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/ui/NavGuide.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import javax.swing.text.html.ImageView;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":" * Represents a navigation guide in Review mode.","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"public class NavGuide extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"    private static final String FXML \u003d \"NavGuide.fxml\";","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    private ImageView imageView;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"    public NavGuide() {","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"        super(FXML);","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"rockman007372":20}},{"path":"src/main/java/seedu/address/ui/ReviewCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":" * A UI component that displays information of a flipped {@code Card} under review.","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"public class ReviewCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"    private static final String FXML \u003d \"ReviewCard.fxml\";","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Deck level 4\u003c/a\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    public final Card card;","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"    private Label question;","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    private Label answer;","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    private FlowPane tags;","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"     * Creates a {@code CardCode} with the given {@code Card} and index to display.","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"    public ReviewCard(Card card) {","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"        super(FXML);","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        this.card \u003d card;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"        question.setText(card.getQuestion().question);","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        answer.setText(EMPTY_STRING);","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        if (!card.getTag().tagName.equals(Tag.TagName.UNTAGGED)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"            tags.getChildren().add(new CardElement.CardTag(card.getTagName()));","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        if (card.isFlipped()) {","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"            this.getRoot().setStyle(\"-fx-background-color: #6c68c3;\");","lastModifiedDate":"2023-03-24"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"            answer.setText(card.getAnswer().answer);","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"            return true;","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"junianob"},"content":"        if (!(other instanceof CardElement)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"            return false;","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"        // state check","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"junianob"},"content":"        CardElement card \u003d (CardElement) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"        return this.card.equals(card.card);","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"rockman007372":66,"junianob":4,"ruiyigan":3,"unfazing":1}},{"path":"src/main/java/seedu/address/ui/ReviewStatsPane.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":" * Individual element of the review panel","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"public class ReviewStatsPane extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"    private static final String FXML \u003d \"ReviewStatsPane.fxml\";","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"    private Label title;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"    private Label description;","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"     * Creates a {@code ReviewStatsPane} with the given {@code pair}.","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    public ReviewStatsPane(Pair\u003cString, String\u003e pair) {","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"        super(FXML);","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"        title.setText(pair.getKey());","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"        description.setText(pair.getValue());","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"rockman007372":4,"junianob":25}},{"path":"src/main/java/seedu/address/ui/ReviewStatsPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":" * Panel containing the statistics of the current review.","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class ReviewStatsPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    private static final String FXML \u003d \"ReviewStatsPanel.fxml\";","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ReviewStatsPanel.class);","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"    private ListView\u003cPair\u003cString, String\u003e\u003e reviewStatsView;","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"     * Creates a {@code ReviewStatsPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    public ReviewStatsPanel(ObservableList\u003cPair\u003cString, String\u003e\u003e reviewStatsList) {","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        super(FXML);","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        reviewStatsView.setItems(reviewStatsList);","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"        reviewStatsView.setCellFactory(listView -\u003e new ReviewStatsViewCell());","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    static class ReviewStatsViewCell extends ListCell\u003cPair\u003cString, String\u003e\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"        @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"        protected void updateItem(Pair\u003cString, String\u003e pair, boolean empty) {","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"            super.updateItem(pair, empty);","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"            if (empty || pair \u003d\u003d null) {","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"                setText(null);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"            } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"                if (pair.getKey().equals(\"\")) {","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"                    setGraphic(new NavGuide().getRoot());","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"                    setStyle(\"-fx-border-insets: 10px; -fx-background-insets: 10px;  \"","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"                            + \"-fx-background-color:transparent \");","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"                } else {","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"                    setGraphic(new ReviewStatsPane(pair).getRoot());","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"                    setStyle(\"-fx-border-insets: 10px; -fx-background-insets: 10px;  \"","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"                            + \"-fx-background-color:transparent \");","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"rockman007372":9,"junianob":15,"unfazing":29}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/powercardslogo.png\";","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"unfazing":1,"-":87}},{"path":"src/main/java/seedu/address/ui/UnflippedReviewCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":" * A UI component that displays information of an unflipped {@code Card} under review.","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"public class UnflippedReviewCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    private static final String FXML \u003d \"UnflippedReviewCard.fxml\";","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Deck level 4\u003c/a\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"    public final Card card;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    private Label question;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    private Label answer;","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"    private FlowPane tags;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"     * Creates a {@code PersonCode} with the given {@code Card} and index to display.","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"    public UnflippedReviewCard(Card card) {","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        super(FXML);","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"        this.card \u003d card;","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"        question.setText(card.getQuestion().question);","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        answer.setText(EMPTY_STRING);","lastModifiedDate":"2023-03-23"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        if (!card.getTag().tagName.equals(Tag.TagName.UNTAGGED)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"            tags.getChildren().add(new CardElement.CardTag(card.getTagName()));","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"            return true;","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"        if (!(other instanceof CardElement)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"            return false;","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"        // state check","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"junianob"},"content":"        CardElement card \u003d (CardElement) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"        return this.card.equals(card.card);","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"rockman007372":58,"junianob":3,"ruiyigan":3,"unfazing":6}},{"path":"src/main/resources/view/CardElement.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"    \u003cVBox minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"      \u003cHBox alignment\u003d\"TOP_CENTER\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"        \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$question\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"         \u003cHBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"            \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"         \u003c/HBox\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rockman007372":16,"-":26}},{"path":"src/main/resources/view/CardListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\"  xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"  \u003cListView fx:id\u003d\"cardListView\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junianob":2,"-":6}},{"path":"src/main/resources/view/DeckElement.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"\u003cHBox id\u003d\"deckPane\" fx:id\u003d\"deckPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"junianob":31}},{"path":"src/main/resources/view/DeckListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"    \u003cListView fx:id\u003d\"deckListView\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"junianob":1,"-":7}},{"path":"src/main/resources/view/DeckName.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"\u003cHBox fx:id\u003d\"deckNamePane\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"    \u003cGridPane alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"        \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"85\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"            \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"rockman007372":6,"junianob":14,"unfazing":1}},{"path":"src/main/resources/view/DeckNamePanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"    \u003cListView fx:id\u003d\"deckNameView\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"junianob":8}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"    -fx-background: transparent;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junianob":1,"-":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" maximized\u003d\"true\" onCloseRequest\u003d\"#handleExit\" title\u003d\"PowerCard\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    \u003cImage url\u003d\"@/images/powercardslogo.png\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"        \u003cURL value\u003d\"@Theme.css\" /\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"        \u003cTextFlow fx:id\u003d\"titlePanel\" /\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        \u003cSplitPane fx:id\u003d\"cardList\" dividerPositions\u003d\"0.2\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"          \u003cVBox prefHeight\u003d\"0.0\" prefWidth\u003d\"0.0\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"            \u003cStackPane fx:id\u003d\"leftPanelPlaceholder\" minWidth\u003d\"50.0\" styleClass\u003d\"panel\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"            \u003cTextFlow fx:id\u003d\"leftFilterText\"/\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"          \u003cVBox prefHeight\u003d\"0.0\" prefWidth\u003d\"0.0\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"            \u003cStackPane prefHeight\u003d\"110\" minHeight\u003d\"110\" minWidth\u003d\"50.0\" fx:id\u003d\"rightPanelTitlePlaceholder\"/\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"            \u003cStackPane fx:id\u003d\"rightPanelPlaceholder\" styleClass\u003d\"panel\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"            \u003cTextFlow fx:id\u003d\"rightFilterText\"/\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"        \u003cSplitPane fx:id\u003d\"commandSplitPane\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"NEVER\" \u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" /\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefWidth\u003d\"317.0\" styleClass\u003d\"pane-with-border\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":54,"author":{"gitId":"junianob"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"rockman007372":4,"junianob":11,"ruiyigan":2,"unfazing":5,"-":38}},{"path":"src/main/resources/view/NavGuide.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"\u003cHBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"   \u003cImageView fitHeight\u003d\"300.0\" fitWidth\u003d\"350.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"      \u003cHBox.margin\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"         \u003cInsets/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"      \u003c/HBox.margin\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"      \u003cImage url\u003d\"@../images/NavGuide.png\"/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"   \u003c/ImageView\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"rockman007372":15}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"junianob":1,"unfazing":1,"-":7}},{"path":"src/main/resources/view/ReviewCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"\u003cHBox id\u003d\"ReviewCardPane\" fx:id\u003d\"ReviewCardPane\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"        \u003cVBox minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"         \u003cHBox alignment\u003d\"TOP_CENTER\"\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"                   \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$question\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"         \u003c/HBox\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"         \u003cHBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"                  \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"         \u003c/HBox\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"rockman007372":37}},{"path":"src/main/resources/view/ReviewStatsPane.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"\u003cHBox fx:id\u003d\"reviewStatsPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"            \u003cLabel fx:id\u003d\"title\"  styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"            \u003cLabel fx:id\u003d\"description\"  styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"junianob":20,"unfazing":3}},{"path":"src/main/resources/view/ReviewStatsPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"    \u003cListView fx:id\u003d\"reviewStatsView\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"unfazing":8}},{"path":"src/main/resources/view/Theme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":".background {","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#f9f9f9, 20%);","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"    background-color: #f9f9f9; /* Used in the default.html file */","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d status bar \u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":".label {","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d vertical gap between left and right panel \u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 10;","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"/* the bottom horizontal pane containing the input and output boxes */","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":".split-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #f4f8f9; /* this is the background colour of app */","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 0 20 20 20;","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":".cell_big_label {","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":".cell_small_label {","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":".stack-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"    -fx-border-width:5;","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":".pane-with-border {","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"     -fx-background-color: #f4f8f9;","lastModifiedDate":"2023-03-23"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"     -fx-border-width:5;","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":".status-bar {","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MENU BAR \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"junianob"},"content":".menu-bar .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"junianob"},"content":".menu .left-container {","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"junianob"},"content":"    -fx-background-color: black;","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SCROLL BAR \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":70,"author":{"gitId":"junianob"},"content":".scroll-bar {","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#f9f9f9, 20%);","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 15;","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"junianob"},"content":".scroll-bar .thumb {","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#a9a9a9, 20%);","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"junianob"},"content":"    -fx-background-insets: 5;","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"junianob"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"junianob"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"junianob"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"junianob"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"junianob"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"junianob"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"junianob"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"junianob"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RIGHT PANEL \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":99,"author":{"gitId":"junianob"},"content":"#cardPane {","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #007aff; /* the ios blue colour */","lastModifiedDate":"2023-03-23"},{"lineNumber":101,"author":{"gitId":"junianob"},"content":"    -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 5, 0, 1, 3);","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"    -fx-border-insets: 10px;","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"    -fx-background-insets: 10px;","lastModifiedDate":"2023-03-23"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 10 80 10 80;","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"junianob"},"content":"#cardPane .label{","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"rockman007372"},"content":"    -fx-padding: 5;","lastModifiedDate":"2023-03-22"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"#cardPane #question {","lastModifiedDate":"2023-03-22"},{"lineNumber":114,"author":{"gitId":"rockman007372"},"content":"    -fx-font-size: 23px;","lastModifiedDate":"2023-03-22"},{"lineNumber":115,"author":{"gitId":"rockman007372"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-22"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-30"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"/* id number of the cards */","lastModifiedDate":"2023-03-23"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"#cardPane #id {","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"    -fx-font-size: 23px;","lastModifiedDate":"2023-03-22"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-22"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-30"},{"lineNumber":124,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"junianob"},"content":"#cardListView {","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #e6eaeb;","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 0 0 15 15;","lastModifiedDate":"2023-03-24"},{"lineNumber":129,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 0 0 15 15;","lastModifiedDate":"2023-03-24"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":132,"author":{"gitId":"unfazing"},"content":"#deckNamePane {","lastModifiedDate":"2023-03-24"},{"lineNumber":133,"author":{"gitId":"unfazing"},"content":"    -fx-background-color:transparent;","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"unfazing"},"content":"#deckNamePane #title {","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"unfazing"},"content":"    -fx-underline: true;","lastModifiedDate":"2023-03-24"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":140,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"#deckNamePane #description {","lastModifiedDate":"2023-03-24"},{"lineNumber":142,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-24"},{"lineNumber":143,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2023-03-24"},{"lineNumber":144,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":145,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"#deckNameView {","lastModifiedDate":"2023-03-24"},{"lineNumber":147,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 15 15 0 0;","lastModifiedDate":"2023-03-24"},{"lineNumber":148,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 15 15 0 0;","lastModifiedDate":"2023-03-24"},{"lineNumber":149,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #e6eaeb;","lastModifiedDate":"2023-03-24"},{"lineNumber":150,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":151,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"#deckNameView .scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"rockman007372"},"content":"    -fx-padding: 0;","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"rockman007372"},"content":"#deckNameView .scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2023-03-30"},{"lineNumber":157,"author":{"gitId":"rockman007372"},"content":"    -fx-padding: 0;","lastModifiedDate":"2023-03-30"},{"lineNumber":158,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-30"},{"lineNumber":159,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":160,"author":{"gitId":"unfazing"},"content":"#rightPanelTitlePlaceholder {","lastModifiedDate":"2023-03-24"},{"lineNumber":161,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-24"},{"lineNumber":162,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":163,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":164,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TAGS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":165,"author":{"gitId":"unfazing"},"content":"#tags {","lastModifiedDate":"2023-03-23"},{"lineNumber":166,"author":{"gitId":"unfazing"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2023-03-23"},{"lineNumber":167,"author":{"gitId":"unfazing"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2023-03-23"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 7;","lastModifiedDate":"2023-03-23"},{"lineNumber":169,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":170,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":171,"author":{"gitId":"unfazing"},"content":"#tags .label {","lastModifiedDate":"2023-03-23"},{"lineNumber":172,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-23"},{"lineNumber":173,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #e6eaeb;","lastModifiedDate":"2023-03-23"},{"lineNumber":174,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2023-03-23"},{"lineNumber":175,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2023-03-23"},{"lineNumber":176,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2023-03-23"},{"lineNumber":177,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":178,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LEFT PANEL \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":181,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"unfazing"},"content":"/* individual boxes of the decks */","lastModifiedDate":"2023-03-23"},{"lineNumber":183,"author":{"gitId":"junianob"},"content":"#deckPane {","lastModifiedDate":"2023-03-14"},{"lineNumber":184,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #e6eaeb;","lastModifiedDate":"2023-03-23"},{"lineNumber":185,"author":{"gitId":"unfazing"},"content":"    /* this is the same grey colour for deck pane, and the background of output and card panel */","lastModifiedDate":"2023-03-23"},{"lineNumber":186,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-15"},{"lineNumber":187,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"junianob"},"content":"#deckPane .label {","lastModifiedDate":"2023-03-15"},{"lineNumber":189,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2023-03-15"},{"lineNumber":190,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-15"},{"lineNumber":191,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":192,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":193,"author":{"gitId":"unfazing"},"content":"#reviewStatsView {","lastModifiedDate":"2023-03-23"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":195,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":196,"author":{"gitId":"junianob"},"content":"    -fx-background-color: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"    -fx-control-inner-background-alt: -fx-control-inner-background; /* removes default alternating colour */","lastModifiedDate":"2023-03-23"},{"lineNumber":198,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 10;","lastModifiedDate":"2023-03-23"},{"lineNumber":199,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":200,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":201,"author":{"gitId":"unfazing"},"content":"/* styles the individual stats in the list view */","lastModifiedDate":"2023-03-23"},{"lineNumber":202,"author":{"gitId":"unfazing"},"content":"#reviewStatsPane {","lastModifiedDate":"2023-03-23"},{"lineNumber":203,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":204,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":205,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-23"},{"lineNumber":206,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":207,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":208,"author":{"gitId":"junianob"},"content":"#reviewStatsPane #title {","lastModifiedDate":"2023-03-21"},{"lineNumber":209,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-21"},{"lineNumber":210,"author":{"gitId":"junianob"},"content":"    -fx-underline: true;","lastModifiedDate":"2023-03-21"},{"lineNumber":211,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":212,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":213,"author":{"gitId":"junianob"},"content":"#reviewStatsPane #description {","lastModifiedDate":"2023-03-21"},{"lineNumber":214,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-21"},{"lineNumber":215,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2023-03-23"},{"lineNumber":216,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":217,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":218,"author":{"gitId":"rockman007372"},"content":"#ReviewCardPane {","lastModifiedDate":"2023-03-24"},{"lineNumber":219,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #524cd1;","lastModifiedDate":"2023-03-23"},{"lineNumber":220,"author":{"gitId":"unfazing"},"content":"    -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 10, 0, 0, 0);","lastModifiedDate":"2023-03-23"},{"lineNumber":221,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":222,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":223,"author":{"gitId":"rockman007372"},"content":"#ReviewCardPane .label{","lastModifiedDate":"2023-03-24"},{"lineNumber":224,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2023-03-23"},{"lineNumber":225,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-23"},{"lineNumber":226,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 5;","lastModifiedDate":"2023-03-23"},{"lineNumber":227,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":229,"author":{"gitId":"rockman007372"},"content":"#ReviewCardPane #question {","lastModifiedDate":"2023-03-24"},{"lineNumber":230,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 23px;","lastModifiedDate":"2023-03-23"},{"lineNumber":231,"author":{"gitId":"unfazing"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-23"},{"lineNumber":232,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-30"},{"lineNumber":233,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":234,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":235,"author":{"gitId":"rockman007372"},"content":"#ReviewCardPane #id {","lastModifiedDate":"2023-03-24"},{"lineNumber":236,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 23px;","lastModifiedDate":"2023-03-23"},{"lineNumber":237,"author":{"gitId":"unfazing"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-23"},{"lineNumber":238,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-30"},{"lineNumber":239,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":240,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":241,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MODE TITLE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":242,"author":{"gitId":"junianob"},"content":"#titlePanel{","lastModifiedDate":"2023-03-15"},{"lineNumber":243,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #f4f8f9;","lastModifiedDate":"2023-03-23"},{"lineNumber":244,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 25px;","lastModifiedDate":"2023-03-23"},{"lineNumber":245,"author":{"gitId":"unfazing"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-23"},{"lineNumber":246,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 10 0 0 25;","lastModifiedDate":"2023-03-23"},{"lineNumber":247,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-15"},{"lineNumber":248,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":249,"author":{"gitId":"rockman007372"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BOTTOM SPLIT PANE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-30"},{"lineNumber":250,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":251,"author":{"gitId":"rockman007372"},"content":"/*#commandBox .split-pane-divider {*/","lastModifiedDate":"2023-03-30"},{"lineNumber":252,"author":{"gitId":"rockman007372"},"content":"/*    -fx-vertical-zero-line-visible: true;*/","lastModifiedDate":"2023-03-30"},{"lineNumber":253,"author":{"gitId":"rockman007372"},"content":"/*}*/","lastModifiedDate":"2023-03-30"},{"lineNumber":254,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":255,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d COMMAND INPUT BOX \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":256,"author":{"gitId":"junianob"},"content":"#commandTextField {","lastModifiedDate":"2023-03-14"},{"lineNumber":257,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2023-03-14"},{"lineNumber":258,"author":{"gitId":"junianob"},"content":"    -fx-border-color: #ffffff;","lastModifiedDate":"2023-03-14"},{"lineNumber":259,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":260,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":261,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-14"},{"lineNumber":262,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":263,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":264,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OUTPUT  BOX \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-23"},{"lineNumber":265,"author":{"gitId":"unfazing"},"content":".result-display {","lastModifiedDate":"2023-03-24"},{"lineNumber":266,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-23"},{"lineNumber":267,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-24"},{"lineNumber":268,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-24"},{"lineNumber":269,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-24"},{"lineNumber":270,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":271,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":272,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":273,"author":{"gitId":"unfazing"},"content":".result-display .label {","lastModifiedDate":"2023-03-24"},{"lineNumber":274,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2023-03-24"},{"lineNumber":275,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":276,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":277,"author":{"gitId":"junianob"},"content":"#resultDisplay .content {","lastModifiedDate":"2023-03-14"},{"lineNumber":278,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #e6eaeb;","lastModifiedDate":"2023-03-23"},{"lineNumber":279,"author":{"gitId":"unfazing"},"content":"    -fx-border-color: #e6eaeb;","lastModifiedDate":"2023-03-23"},{"lineNumber":280,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":281,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 15;","lastModifiedDate":"2023-03-23"},{"lineNumber":282,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 5;","lastModifiedDate":"2023-03-19"},{"lineNumber":283,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":284,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":285,"author":{"gitId":"unfazing"},"content":"/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d unused styles \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/","lastModifiedDate":"2023-03-24"},{"lineNumber":286,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":287,"author":{"gitId":"unfazing"},"content":"/*","lastModifiedDate":"2023-03-23"},{"lineNumber":288,"author":{"gitId":"unfazing"},"content":" * Metro style Push Button","lastModifiedDate":"2023-03-23"},{"lineNumber":289,"author":{"gitId":"unfazing"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2023-03-23"},{"lineNumber":290,"author":{"gitId":"unfazing"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2023-03-23"},{"lineNumber":291,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-23"},{"lineNumber":292,"author":{"gitId":"unfazing"},"content":".button {","lastModifiedDate":"2023-03-23"},{"lineNumber":293,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2023-03-23"},{"lineNumber":294,"author":{"gitId":"unfazing"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2023-03-23"},{"lineNumber":295,"author":{"gitId":"unfazing"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2023-03-23"},{"lineNumber":296,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2023-03-23"},{"lineNumber":297,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-23"},{"lineNumber":298,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2023-03-23"},{"lineNumber":299,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-23"},{"lineNumber":300,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2023-03-23"},{"lineNumber":301,"author":{"gitId":"unfazing"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2023-03-23"},{"lineNumber":302,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":303,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":304,"author":{"gitId":"unfazing"},"content":".button:focused {","lastModifiedDate":"2023-03-23"},{"lineNumber":305,"author":{"gitId":"unfazing"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2023-03-23"},{"lineNumber":306,"author":{"gitId":"unfazing"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":307,"author":{"gitId":"unfazing"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2023-03-23"},{"lineNumber":308,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2023-03-23"},{"lineNumber":309,"author":{"gitId":"unfazing"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2023-03-23"},{"lineNumber":310,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":311,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":312,"author":{"gitId":"unfazing"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2023-03-23"},{"lineNumber":313,"author":{"gitId":"unfazing"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2023-03-23"},{"lineNumber":314,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-23"},{"lineNumber":315,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-23"},{"lineNumber":316,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":317,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":318,"author":{"gitId":"unfazing"},"content":".button:default {","lastModifiedDate":"2023-03-23"},{"lineNumber":319,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2023-03-23"},{"lineNumber":320,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2023-03-23"},{"lineNumber":321,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":322,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":323,"author":{"gitId":"unfazing"},"content":".dialog-pane {","lastModifiedDate":"2023-03-23"},{"lineNumber":324,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-23"},{"lineNumber":325,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":326,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":327,"author":{"gitId":"unfazing"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2023-03-23"},{"lineNumber":328,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-23"},{"lineNumber":329,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":330,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":331,"author":{"gitId":"unfazing"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2023-03-23"},{"lineNumber":332,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2023-03-23"},{"lineNumber":333,"author":{"gitId":"unfazing"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-23"},{"lineNumber":334,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-23"},{"lineNumber":335,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":336,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":337,"author":{"gitId":"unfazing"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2023-03-23"},{"lineNumber":338,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2023-03-23"},{"lineNumber":339,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":340,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":341,"author":{"gitId":"unfazing"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2023-03-23"},{"lineNumber":342,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2023-03-23"},{"lineNumber":343,"author":{"gitId":"unfazing"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2023-03-23"},{"lineNumber":344,"author":{"gitId":"unfazing"},"content":"    -fx-fill: white;","lastModifiedDate":"2023-03-23"},{"lineNumber":345,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-23"},{"lineNumber":346,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":347,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":348,"author":{"gitId":"unfazing"},"content":".tab-pane {","lastModifiedDate":"2023-03-23"},{"lineNumber":349,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":350,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":351,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":352,"author":{"gitId":"unfazing"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2023-03-23"},{"lineNumber":353,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-23"},{"lineNumber":354,"author":{"gitId":"unfazing"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2023-03-23"},{"lineNumber":355,"author":{"gitId":"unfazing"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2023-03-23"},{"lineNumber":356,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":357,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":358,"author":{"gitId":"unfazing"},"content":".table-view {","lastModifiedDate":"2023-03-23"},{"lineNumber":359,"author":{"gitId":"unfazing"},"content":"    -fx-base: #f9f9f9;","lastModifiedDate":"2023-03-23"},{"lineNumber":360,"author":{"gitId":"unfazing"},"content":"    -fx-control-inner-background: #f9f9f9;","lastModifiedDate":"2023-03-23"},{"lineNumber":361,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: #f9f9f9;","lastModifiedDate":"2023-03-23"},{"lineNumber":362,"author":{"gitId":"unfazing"},"content":"    -fx-padding: 5;","lastModifiedDate":"2023-03-23"},{"lineNumber":363,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":364,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":365,"author":{"gitId":"unfazing"},"content":".table-view .column-header-background {","lastModifiedDate":"2023-03-23"},{"lineNumber":366,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-23"},{"lineNumber":367,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":368,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":369,"author":{"gitId":"unfazing"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2023-03-23"},{"lineNumber":370,"author":{"gitId":"unfazing"},"content":"    -fx-size: 35;","lastModifiedDate":"2023-03-23"},{"lineNumber":371,"author":{"gitId":"unfazing"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-23"},{"lineNumber":372,"author":{"gitId":"unfazing"},"content":"    -fx-border-color:","lastModifiedDate":"2023-03-23"},{"lineNumber":373,"author":{"gitId":"unfazing"},"content":"        transparent","lastModifiedDate":"2023-03-23"},{"lineNumber":374,"author":{"gitId":"unfazing"},"content":"        transparent","lastModifiedDate":"2023-03-23"},{"lineNumber":375,"author":{"gitId":"unfazing"},"content":"        black","lastModifiedDate":"2023-03-23"},{"lineNumber":376,"author":{"gitId":"unfazing"},"content":"        transparent;","lastModifiedDate":"2023-03-23"},{"lineNumber":377,"author":{"gitId":"unfazing"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2023-03-23"},{"lineNumber":378,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":379,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":380,"author":{"gitId":"unfazing"},"content":".table-view .column-header .label {","lastModifiedDate":"2023-03-23"},{"lineNumber":381,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2023-03-23"},{"lineNumber":382,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":383,"author":{"gitId":"unfazing"},"content":".label-bright {","lastModifiedDate":"2023-03-24"},{"lineNumber":384,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-24"},{"lineNumber":385,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-24"},{"lineNumber":386,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-24"},{"lineNumber":387,"author":{"gitId":"unfazing"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-24"},{"lineNumber":388,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":389,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":390,"author":{"gitId":"unfazing"},"content":".label-header {","lastModifiedDate":"2023-03-24"},{"lineNumber":391,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2023-03-24"},{"lineNumber":392,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-23"},{"lineNumber":393,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-23"},{"lineNumber":394,"author":{"gitId":"unfazing"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":395,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":396,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":397,"author":{"gitId":"unfazing"},"content":"#panel{","lastModifiedDate":"2023-03-24"},{"lineNumber":398,"author":{"gitId":"unfazing"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2023-03-24"},{"lineNumber":399,"author":{"gitId":"unfazing"},"content":"    -fx-border-radius: 15;","lastModifiedDate":"2023-03-24"},{"lineNumber":400,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 5;","lastModifiedDate":"2023-03-19"},{"lineNumber":401,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":402,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":403,"author":{"gitId":"unfazing"},"content":"#commandTypeLabel {","lastModifiedDate":"2023-03-24"},{"lineNumber":404,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2023-03-24"},{"lineNumber":405,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: #FFFFFF;","lastModifiedDate":"2023-03-24"},{"lineNumber":406,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":407,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":408,"author":{"gitId":"unfazing"},"content":".text-field {","lastModifiedDate":"2023-03-23"},{"lineNumber":409,"author":{"gitId":"unfazing"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2023-03-23"},{"lineNumber":410,"author":{"gitId":"unfazing"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-23"},{"lineNumber":411,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":412,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":413,"author":{"gitId":"unfazing"},"content":".list-cell .label {","lastModifiedDate":"2023-03-23"},{"lineNumber":414,"author":{"gitId":"unfazing"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-23"},{"lineNumber":415,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"rockman007372":30,"junianob":136,"unfazing":249}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core.index;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        final Index fifthCardIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(fifthCardIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(fifthCardIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(fifthCardIndex.equals(fifthCardIndex));","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(fifthCardIndex.equals(null));","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(fifthCardIndex.equals(5.0f));","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(fifthCardIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"-":53,"HJ-PRK":7}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"        assertNotNull(AppUtil.getImage(\"/images/powercardslogo.png\"));","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"unfazing":1,"-":35}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX;","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NO_DECK_SELECTED;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.deckcommands.UnselectDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"import seedu.address.storage.JsonMasterDeckStorage;","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"    private StorageManager storage;","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        JsonMasterDeckStorage masterDeckStorage \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"                new JsonMasterDeckStorage(temporaryFolder.resolve(\"masterDeck.json\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        storage \u003d new StorageManager(masterDeckStorage, userPrefsStorage);","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-23"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"    public void execute_commandExecutionError_throwsCommandException() { // test to delete deck, no deck selected","lastModifiedDate":"2023-03-23"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        String deleteDeckCommand \u003d \"deleteDeck 10\";","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        assertCommandException(deleteDeckCommand, MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"    public void execute_invalidCommandWhenDeckNotSelected_throwsParseException() { // deck needs to be selected","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        String invalidCommandWhenDeckNotSelected \u003d UnselectDeckCommand.COMMAND_WORD;","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"        assertParseException(invalidCommandWhenDeckNotSelected,","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"                String.format(MESSAGE_NO_DECK_SELECTED, UnselectDeckCommand.COMMAND_WORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"    /*","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-23"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"    public void execute_validCommandWhenDeckSelected_success() throws Exception { // select deck when deck selected","lastModifiedDate":"2023-03-23"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        String unselectDeck \u003d UnselectDeckCommand.COMMAND_WORD;","lastModifiedDate":"2023-03-23"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        Model modelWithDeckSelected \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-23"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        modelWithDeckSelected.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-23"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"        Logic logic \u003d new LogicManager(modelWithDeckSelected, storage);","lastModifiedDate":"2023-03-23"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        assertLogicSuccess(unselectDeck, UnselectDeckCommand.MESSAGE_SUCCESS, logic);","lastModifiedDate":"2023-03-23"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() { // deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"rockman007372"},"content":"        // Setup LogicManager with JsonMasterDeckIoExceptionThrowingStub","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"rockman007372"},"content":"        // JsonMasterDeckStorage addressBookStorage \u003d","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"rockman007372"},"content":"        //         new JsonMasterDeckIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"        // JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"        //        new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"        // StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-03-11"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        // logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-03-11"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"        // String addCommand \u003d AddCardCommand.COMMAND_WORD + NAME_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"        // Card expectedCard \u003d new CardBuilder(AMY).withTag().build();","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"        // ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"        // expectedModel.addCard(expectedCard);","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"        // String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"        // assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"    public void getFilteredCardList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":105,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCardList().remove(0));","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                      Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"ruiyigan"},"content":"    private void assertLogicSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"ruiyigan"},"content":"                                    Logic logic) throws CommandException, ParseException {","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"ruiyigan"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":149,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                                      String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                                      String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"rockman007372"},"content":"    private static class JsonMasterDeckIoExceptionThrowingStub extends JsonMasterDeckStorage {","lastModifiedDate":"2023-03-18"},{"lineNumber":176,"author":{"gitId":"rockman007372"},"content":"        private JsonMasterDeckIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2023-03-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"rockman007372"},"content":"        public void saveMasterDeck(ReadOnlyMasterDeck masterDeck, Path filePath) throws IOException {","lastModifiedDate":"2023-03-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"rockman007372":13,"ruiyigan":38,"unfazing":6,"-":123,"HJ-PRK":5}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_emptyMasterDeck_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_nonEmptyMasterDeck_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"        Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"        // expectedModel.setMasterDeck(new MasterDeck());","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"rockman007372":1,"ruiyigan":3,"-":25,"HJ-PRK":2}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    public static final String VALID_QUESTION_GRAVITY \u003d \"What is gravity\";","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"    public static final String VALID_QUESTION_PHOTOSYNTHESIS \u003d \"What is photosynthesis\";","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    public static final String VALID_ANSWER_GRAVITY \u003d \"A force of attraction between objects due to their mass\";","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public static final String VALID_ANSWER_PHOTOSYNTHESIS \u003d \"The process by which plants convert sunlight into energy\";","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"    public static final String VALID_TAG_HARD \u003d \"Hard\";","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    public static final String VALID_TAG_MEDIUM \u003d \"Medium\";","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"    public static final String VALID_DECK_SCIENCE \u003d \"Science\";","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"    public static final String VALID_DECK_SOCIOLOGY \u003d \"Sociology\";","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"    public static final String QUESTION_DESC_GRAVITY \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    public static final String QUESTION_DESC_PHOTOSYNTHESIS \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    public static final String ANSWER_DESC_GRAVITY \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"    public static final String ANSWER_DESC_PHOTOSYNTHESIS \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"    public static final String TAG_DESC_MEDIUM \u003d \" \" + PREFIX_TAG + VALID_TAG_MEDIUM;","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"    public static final String TAG_DESC_HARD \u003d \" \" + PREFIX_TAG + VALID_TAG_HARD;","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION; // empty string not allowed for question","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER; // empty string not allowed for answer","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hard*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"    public static final String DECK_DESC_SOCIOLOGY \u003d \" \" + VALID_DECK_SOCIOLOGY;","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public static final String DECK_DESC_SCIENCE \u003d \" \" + VALID_DECK_SCIENCE;","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"    public static final String INVALID_DECK_DESC \u003d \"\";","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"    public static final EditCardCommand.EditCardDescriptor DESC_GRAVITY;","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"    public static final EditCardCommand.EditCardDescriptor DESC_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"        DESC_GRAVITY \u003d new EditCardDescriptorBuilder()","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"                .withQuestion(VALID_QUESTION_GRAVITY)","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"                .withAnswer(VALID_ANSWER_GRAVITY)","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"                .withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"        DESC_PHOTOSYNTHESIS \u003d new EditCardDescriptorBuilder()","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"                .withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).withAnswer(VALID_ANSWER_PHOTOSYNTHESIS)","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"                .withTag(VALID_TAG_HARD).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"     * - the master deck, filtered card list and selected card in {@code actualModel} remain unchanged","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck expectedMasterDeck \u003d new MasterDeck(actualModel.getMasterDeck());","lastModifiedDate":"2023-03-19"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":108,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(expectedMasterDeck, actualModel.getMasterDeck());","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"     * Updates {@code model}\u0027s filtered list to show only the card at the given {@code targetIndex} in the","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"ruiyigan"},"content":"     * {@code model}\u0027s master deck.","lastModifiedDate":"2023-03-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":116,"author":{"gitId":"HJ-PRK"},"content":"    public static void showCardAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"unfazing"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCardList().size());","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"unfazing"},"content":"        Card card \u003d model.getFilteredCardList().get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"ruiyigan"},"content":"        final String otherQuestion \u003d card.getQuestion().question;","lastModifiedDate":"2023-03-17"},{"lineNumber":120,"author":{"gitId":"ruiyigan"},"content":"        model.updateFilteredCardList(c -\u003e c.getQuestion().question.equals(otherQuestion));","lastModifiedDate":"2023-03-17"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"        assertEquals(1, model.getFilteredCardList().size());","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":125,"author":{"gitId":"ruiyigan"},"content":"     * Updates {@code model}\u0027s filtered list to show only the deck at the given {@code targetIndex} in the","lastModifiedDate":"2023-03-18"},{"lineNumber":126,"author":{"gitId":"ruiyigan"},"content":"     * {@code model}\u0027s master deck.","lastModifiedDate":"2023-03-18"},{"lineNumber":127,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":128,"author":{"gitId":"ruiyigan"},"content":"    public static void showDeckAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2023-03-18"},{"lineNumber":129,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDeckList().size());","lastModifiedDate":"2023-03-18"},{"lineNumber":130,"author":{"gitId":"ruiyigan"},"content":"        Deck deck \u003d model.getFilteredDeckList().get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":131,"author":{"gitId":"ruiyigan"},"content":"        final String otherDeckName \u003d deck.getDeckName();","lastModifiedDate":"2023-03-18"},{"lineNumber":132,"author":{"gitId":"ruiyigan"},"content":"        model.updateFilteredDeckList(d -\u003e d.getDeckName().equals(otherDeckName));","lastModifiedDate":"2023-03-18"},{"lineNumber":133,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(1, model.getFilteredDeckList().size());","lastModifiedDate":"2023-03-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rockman007372":2,"ruiyigan":32,"unfazing":9,"-":73,"HJ-PRK":20}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"                MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"rockman007372":2,"junianob":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"                SHOWING_HELP_MESSAGE, true, false, false, false, false, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"rockman007372":2,"junianob":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/cardcommands/AddCardCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.testutil.AddCardDescriptorBuilder;","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.CardBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCardCommand}.","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"public class AddCardCommandIntegrationTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"        model.selectDeck(Index.fromOneBased(1)); // Deck(\"Programming Concept\")","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_newCard_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        Card validCard \u003d new CardBuilder().build(); // Deck(\"Default\") Tag(\"hard\")","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand.AddCardDescriptor cardDescriptor \u003d new AddCardDescriptorBuilder(validCard).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"        expectedModel.selectDeck(Index.fromOneBased(1));","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"        cardDescriptor.setDeck(expectedModel.getSelectedDeck().get()); // Change Deck to selectedDeck","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"        expectedModel.addCard(cardDescriptor.buildCard());","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(new AddCardCommand(cardDescriptor), model,","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"                String.format(AddCardCommand.MESSAGE_SUCCESS, validCard), expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_duplicateCard_throwsCommandException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        Card cardInList \u003d model.getMasterDeck().getCardList().get(0); // This card also belongs to the selectedDeck","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand.AddCardDescriptor cardDescriptor \u003d new AddCardDescriptorBuilder(cardInList).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(new AddCardCommand(cardDescriptor), model, AddCardCommand.MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"rockman007372":7,"ruiyigan":11,"unfazing":3,"-":29,"HJ-PRK":2}},{"path":"src/test/java/seedu/address/logic/commands/cardcommands/AddCardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.testutil.CardBuilder.DEFAULT_DECK;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import java.util.List;","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.ModelStub;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"import seedu.address.testutil.AddCardDescriptorBuilder;","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.CardBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"public class AddCardCommandTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    public void constructor_nullCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCardCommand(null));","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"        Card validCard \u003d new CardBuilder().build(); // Default Card","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        AddCardDescriptorBuilder cardDescBuilder \u003d new AddCardDescriptorBuilder(validCard);","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        CommandResult commandResult \u003d new AddCardCommand(cardDescBuilder.build()).execute(modelStub);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(String.format(AddCardCommand.MESSAGE_SUCCESS, validCard), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"        assertEquals(List.of(validCard), modelStub.cardsAdded);","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_duplicateCard_throwsCommandException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"        ModelStub modelStub \u003d new ModelStubWithDuplicatedCard();","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        Card validCard \u003d new CardBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        AddCardDescriptorBuilder cardDescBuilder \u003d new AddCardDescriptorBuilder(validCard);","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand addCardCommand \u003d new AddCardCommand(cardDescBuilder.build());","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(CommandException.class, AddCardCommand.MESSAGE_DUPLICATE_CARD, ()","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"                -\u003e addCardCommand.execute(modelStub));","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"    public void execute_noSelectedDeck_throwsCommandException() {","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"        ModelStub modelStub \u003d new ModelStubWithoutSelectedDeck();","lastModifiedDate":"2023-03-23"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"        Card validCard \u003d new CardBuilder().build();","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"        AddCardDescriptorBuilder cardDescBuilder \u003d new AddCardDescriptorBuilder(validCard);","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand addCardCommand \u003d new AddCardCommand(cardDescBuilder.build());","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(AssertionError.class, AddCardCommand.MESSAGE_NO_SELECTED_DECK, ()","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"                -\u003e addCardCommand.execute(modelStub));","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand.AddCardDescriptor questionGravity \u003d new AddCardDescriptorBuilder()","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"                .withQuestion(\"What is gravity\").withAnswer(\"Not sure\").withTag(\"easy\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand.AddCardDescriptor questionPhoto \u003d new AddCardDescriptorBuilder()","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"                .withQuestion(\"What is photosynthesis\").withAnswer(\"Not sure either\").withTag(\"hard\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand addACommand \u003d new AddCardCommand(questionGravity);","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand addBCommand \u003d new AddCardCommand(questionPhoto);","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"        assertEquals(addACommand, addACommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        AddCardCommand addGravityCommandCopy \u003d new AddCardCommand(questionGravity);","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"        assertEquals(addACommand, addGravityCommandCopy);","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(1, addACommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(null, addACommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(addACommand, addBCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"     * A Model stub that contains a duplicated card.","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"    private static class ModelStubWithDuplicatedCard extends ModelStub {","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"rockman007372"},"content":"        final Deck selectedDeck \u003d new Deck(DEFAULT_DECK);","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"rockman007372"},"content":"        ModelStubWithDuplicatedCard() {","lastModifiedDate":"2023-03-22"},{"lineNumber":96,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"rockman007372"},"content":"        public Optional\u003cDeck\u003e getSelectedDeck() {","lastModifiedDate":"2023-03-22"},{"lineNumber":100,"author":{"gitId":"rockman007372"},"content":"            return Optional.of(selectedDeck);","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"        public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"rockman007372"},"content":"            return true;","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":110,"author":{"gitId":"unfazing"},"content":"     * A Model stub that always accept the card being added.","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"     * The selectedDeck is always the DEFAULT_DECK","lastModifiedDate":"2023-03-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"    private static class ModelStubAcceptingCardAdded extends ModelStub {","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"rockman007372"},"content":"        final Deck selectedDeck \u003d new Deck(DEFAULT_DECK);","lastModifiedDate":"2023-03-22"},{"lineNumber":115,"author":{"gitId":"HJ-PRK"},"content":"        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"        public Optional\u003cDeck\u003e getSelectedDeck() {","lastModifiedDate":"2023-03-22"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"            return Optional.of(selectedDeck);","lastModifiedDate":"2023-03-22"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"        public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"            requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"HJ-PRK"},"content":"            return cardsAdded.stream().anyMatch(card::isSameCard);","lastModifiedDate":"2023-03-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"unfazing"},"content":"        public void addCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"            requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"HJ-PRK"},"content":"            cardsAdded.add(card);","lastModifiedDate":"2023-03-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"unfazing"},"content":"        public ReadOnlyMasterDeck getMasterDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"HJ-PRK"},"content":"            return new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":141,"author":{"gitId":"rockman007372"},"content":"     * A Model stub that does not have any deck selected.","lastModifiedDate":"2023-03-18"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"    private static class ModelStubWithoutSelectedDeck extends ModelStub {","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":145,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":146,"author":{"gitId":"rockman007372"},"content":"        public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-18"},{"lineNumber":147,"author":{"gitId":"rockman007372"},"content":"            return false;","lastModifiedDate":"2023-03-18"},{"lineNumber":148,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":149,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":150,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":151,"author":{"gitId":"rockman007372"},"content":"        public Optional\u003cDeck\u003e getSelectedDeck() {","lastModifiedDate":"2023-03-18"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"            return Optional.empty();","lastModifiedDate":"2023-03-18"},{"lineNumber":153,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":154,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":155,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"rockman007372":59,"ruiyigan":20,"unfazing":9,"-":57,"HJ-PRK":11}},{"path":"src/test/java/seedu/address/logic/commands/cardcommands/DeleteCardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":" * {@code DeleteCardCommand}.","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"public class DeleteCardCommandTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    private Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"    {","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"        model.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"        expectedModel.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        expectedModel.deleteCard(cardToDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(deleteCardCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(outOfBoundIndex);","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(deleteCardCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        showCardAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"        expectedModel.deleteCard(cardToDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"        showNoCard(expectedModel);","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(deleteCardCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"        showCardAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"        // ensures that outOfBoundIndex is still in bounds of master deck list","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMasterDeck().getCardList().size());","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(outOfBoundIndex);","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(deleteCardCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"        DeleteCardCommand deleteFirstCommand \u003d new DeleteCardCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"        DeleteCardCommand deleteSecondCommand \u003d new DeleteCardCommand(INDEX_SECOND);","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        DeleteCardCommand deleteFirstCommandCopy \u003d new DeleteCardCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"     * Updates {@code model}\u0027s filtered list to show nothing.","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"HJ-PRK"},"content":"    private void showNoCard(Model model) {","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"        model.updateFilteredCardList(p -\u003e false);","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"unfazing"},"content":"        assertTrue(model.getFilteredCardList().isEmpty());","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rockman007372":6,"ruiyigan":23,"unfazing":10,"-":67,"HJ-PRK":7}},{"path":"src/test/java/seedu/address/logic/commands/cardcommands/EditCardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HARD;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.CardBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCardCommand.","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"public class EditCardCommandTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"    private final Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    {","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"        model.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"        Card editedCard \u003d new CardBuilder().build(); // in DEFAULT deck","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"        expectedModel.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"        Card toEdit \u003d model.getFilteredCardList().get(0); // card at first index","lastModifiedDate":"2023-03-23"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        Card toReplace \u003d new Card(editedCard.getQuestion(), editedCard.getAnswer(),","lastModifiedDate":"2023-03-23"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"                editedCard.getTag(), toEdit.getDeck()); // new card is in the same deck as old card","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"        expectedModel.setCard(toEdit, toReplace);","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(editCardCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"        CardBuilder cardInList \u003d new CardBuilder(lastCard);","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"        Card editedCard \u003d cardInList.withQuestion(VALID_QUESTION_PHOTOSYNTHESIS)","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"                .withTag(VALID_TAG_HARD).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"                .withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).withTag(VALID_TAG_HARD).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(indexLastCard, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"        expectedModel.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        expectedModel.setCard(lastCard, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(editCardCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST, new EditCardCommand.EditCardDescriptor());","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"        Card editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"        expectedModel.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(editCardCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"        showCardAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2023-03-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"        Card cardInFilteredList \u003d model.getFilteredCardList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"        Card editedCard \u003d new CardBuilder(cardInFilteredList).withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST,","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).build());","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"unfazing"},"content":"        expectedModel.setCard(model.getFilteredCardList().get(0), editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(editCardCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_duplicateCardUnfilteredList_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"ruiyigan"},"content":"        Card firstCard \u003d model.getFilteredCardList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":114,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstCard).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_SECOND, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCardCommand, model, EditCardCommand.MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_duplicateCardFilteredList_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"HJ-PRK"},"content":"        showCardAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"HJ-PRK"},"content":"        // edit card in filtered list into a duplicate in master deck","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"ruiyigan"},"content":"        Card cardInList \u003d model.getMasterDeck().getCardList().get(INDEX_SECOND.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":126,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST,","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"ruiyigan"},"content":"                new EditCardDescriptorBuilder(cardInList).build());","lastModifiedDate":"2023-03-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCardCommand, model, EditCardCommand.MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_invalidCardIndexUnfilteredList_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"unfazing"},"content":"                .withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":137,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCardCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"HJ-PRK"},"content":"     * but smaller than size of master deck","lastModifiedDate":"2023-03-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"HJ-PRK"},"content":"    public void execute_invalidCardIndexFilteredList_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":148,"author":{"gitId":"HJ-PRK"},"content":"        showCardAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2023-03-19"},{"lineNumber":149,"author":{"gitId":"ruiyigan"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"unfazing"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMasterDeck().getCardList().size());","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand editCardCommand \u003d new EditCardCommand(outOfBoundIndex,","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).build());","lastModifiedDate":"2023-03-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":156,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCardCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"ruiyigan"},"content":"        final EditCardCommand standardCommand \u003d new EditCardCommand(INDEX_FIRST, DESC_GRAVITY);","lastModifiedDate":"2023-03-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"HJ-PRK"},"content":"        EditCardDescriptor copyDescriptor \u003d new EditCardDescriptor(DESC_GRAVITY);","lastModifiedDate":"2023-03-19"},{"lineNumber":165,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand commandWithSameValues \u003d new EditCardCommand(INDEX_FIRST, copyDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":178,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_SECOND, DESC_GRAVITY)));","lastModifiedDate":"2023-03-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":181,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_FIRST, DESC_PHOTOSYNTHESIS)));","lastModifiedDate":"2023-03-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"rockman007372":14,"ruiyigan":46,"unfazing":14,"-":92,"HJ-PRK":18}},{"path":"src/test/java/seedu/address/logic/commands/cardcommands/EditCardDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HARD;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"public class EditCardDescriptorTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"                new EditCardCommand.EditCardDescriptor(DESC_GRAVITY);","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(DESC_GRAVITY.equals(descriptorWithSameValues));","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(DESC_GRAVITY.equals(DESC_GRAVITY));","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(DESC_GRAVITY.equals(null));","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(DESC_GRAVITY.equals(5));","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(DESC_GRAVITY.equals(DESC_PHOTOSYNTHESIS));","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor editedGravity \u003d new EditCardDescriptorBuilder(DESC_GRAVITY)","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"                .withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(DESC_GRAVITY.equals(editedGravity));","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        editedGravity \u003d new EditCardDescriptorBuilder(DESC_GRAVITY).withAnswer(VALID_ANSWER_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(DESC_GRAVITY.equals(editedGravity));","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        editedGravity \u003d new EditCardDescriptorBuilder(DESC_GRAVITY).withTag(VALID_TAG_HARD).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(DESC_GRAVITY.equals(editedGravity));","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"rockman007372":1,"ruiyigan":7,"unfazing":3,"-":27,"HJ-PRK":11}},{"path":"src/test/java/seedu/address/logic/commands/cardcommands/FindCardsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.LOOP;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import java.util.List;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"public class FindCardsCommandTest {","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    private Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"    public void equals() {","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        FindCardsCommand findFirstCommand \u003d new FindCardsCommand(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        FindCardsCommand findSecondCommand \u003d new FindCardsCommand(Collections.singletonList(\"second\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        FindCardsCommand findFirstCommandCopy \u003d new FindCardsCommand(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        // different find card command -\u003e returns false","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"    public void execute_zeroKeywords_noCardsFound() {","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d prepareCardPredicate(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        List keywords \u003d prepareKeywords(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        FindCardsCommand command \u003d new FindCardsCommand(keywords);","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"                expectedMessage, false, false, false, false, false, false, true, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        model.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.updateFilteredCardList(predicate);","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredCardList());","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"    public void execute_singleKeywords_oneCardFound() {","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d \"loop\";","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d prepareCardPredicate(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        List keywords \u003d prepareKeywords(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        FindCardsCommand command \u003d new FindCardsCommand(keywords);","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"junianob"},"content":"                expectedMessage, false, false, false, false, false, false, true, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        model.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.updateFilteredCardList(predicate);","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(Arrays.asList(LOOP), model.getFilteredCardList());","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"     * Parses {@code userInput} into a {@code DeckContainsKeywordsPredicate}.","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"    private QuestionContainsKeywordsPredicate prepareCardPredicate(String userInput) {","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"ruiyigan"},"content":"     * Parses {@code userInput} into a {@code List}.","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"    private List prepareKeywords(String userInput) {","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"        return Arrays.asList(userInput.split(\"\\\\s+\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"junianob":7,"ruiyigan":91}},{"path":"src/test/java/seedu/address/logic/commands/cardcommands/ShowCardsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.commands.cardcommands;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ShowDecksCommand.","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"public class ShowCardsCommandTest {","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"        expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    public void execute_cardListIsNotFiltered_showsSameCardList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"        expectedModel.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"                ShowCardsCommand.MESSAGE_SUCCESS, false, false, false, false, false, false, false, false, true, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        model.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(new ShowCardsCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    public void execute_cardListIsFiltered_showsEverything() {","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"        expectedModel.updateFilteredCardList(Model.PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"                ShowCardsCommand.MESSAGE_SUCCESS, false, false, false, false, false, false, false, false, true, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        model.selectDeck(INDEX_FIRST);","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(new ShowCardsCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"rockman007372":2,"junianob":7,"ruiyigan":12,"unfazing":1,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/commandresult/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.commandresult;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"        assertEquals(commandResult, new CommandResult(\"feedback\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"        assertEquals(commandResult, new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"                        false, false, false, false, false, false, false, false, false, false));","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"        assertEquals(commandResult, commandResult);","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(null, commandResult);","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult, new CommandResult(\"different\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult, new CommandResult(","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"                \"feedback\", true, false, false, false, false, false, false, false, false, false));","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"                false, true, false, false, false, false, false, false, false, false));","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"        // different startReview value -\u003e return false","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"                false, false, true, false, false, false, false, false, false, false));","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"        // different endReview value -\u003e return false","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"                false, false, false, true, false, false, false, false, false, false));","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"        // different selectDeck value -\u003e return false","lastModifiedDate":"2023-03-23"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-23"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"                false, false, false, false, true, false, false, false, false, false));","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"        // different unSelectDeck value -\u003e return false","lastModifiedDate":"2023-03-23"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-23"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":"                false, false, false, false, false, true, false, false, false, false));","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"junianob"},"content":"                \"feedback\", true, false, false, false, false, false, false, false, false, false).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"junianob"},"content":"                \"feedback\", false, true, false, false, false, false, false, false, false, false).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"        // different startReview value -\u003e return different hashcode","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"junianob"},"content":"                false, false, true, false, false, false, false, false, false, false).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"        // different endReview value -\u003e return different hashcode","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"junianob"},"content":"                false, false, false, true, false, false, false, false, false, false).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":82,"author":{"gitId":"junianob"},"content":"        // different selectDeck value -\u003e return different hashcode","lastModifiedDate":"2023-03-23"},{"lineNumber":83,"author":{"gitId":"junianob"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-23"},{"lineNumber":84,"author":{"gitId":"junianob"},"content":"                false, false, false, false, true, false, false, false, false, false).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":86,"author":{"gitId":"junianob"},"content":"        // different unSelectDeck value -\u003e return different hashcode","lastModifiedDate":"2023-03-23"},{"lineNumber":87,"author":{"gitId":"junianob"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\",","lastModifiedDate":"2023-03-23"},{"lineNumber":88,"author":{"gitId":"junianob"},"content":"                false, false, false, false, false, true, false, false, false, false).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"rockman007372":22,"junianob":26,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/deckcommands/AddDeckCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalDecks.VALID_DECK_HISTORY;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalDecks.VALID_DECK_SCIENCE;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.ModelStub;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"public class AddDeckCommandTest {","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    public void constructor_nullDeck_throwsNullPointerException() {","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddDeckCommand(null));","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public void execute_deckAcceptedByModel_success() throws Exception {","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        ModelStubAcceptingDeckAdded modelStub \u003d new ModelStubAcceptingDeckAdded();","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        CommandResult commandResult \u003d new AddDeckCommand(VALID_DECK_HISTORY).execute(modelStub);","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(String.format(AddDeckCommand.MESSAGE_SUCCESS, VALID_DECK_HISTORY.getDeckName()),","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(Arrays.asList(VALID_DECK_HISTORY), modelStub.decksAdded);","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    public void execute_duplicateDeck_throwsCommandException() {","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        Deck validDeck \u003d new Deck(\"Biology\");","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        AddDeckCommand addDeckCommand \u003d new AddDeckCommand(validDeck);","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        ModelStub modelStub \u003d new ModelStubWithDeck(validDeck);","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"                AddDeckCommand.MESSAGE_DUPLICATE_DECK, () -\u003e addDeckCommand.execute(modelStub));","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"    public void equals() {","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        AddDeckCommand addValidScienceDeckCommand \u003d new AddDeckCommand(VALID_DECK_SCIENCE);","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        AddDeckCommand addValidHistoryDeckCommand \u003d new AddDeckCommand(VALID_DECK_HISTORY);","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(addValidScienceDeckCommand.equals(addValidScienceDeckCommand));","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        AddDeckCommand addValidScienceDeckCommandCopy \u003d new AddDeckCommand(VALID_DECK_SCIENCE);","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(addValidScienceDeckCommand.equals(addValidScienceDeckCommandCopy));","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(addValidScienceDeckCommand.equals(1));","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(addValidScienceDeckCommand.equals(null));","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        // different flashcard -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(addValidScienceDeckCommand.equals(addValidHistoryDeckCommand));","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"     * A Model stub that contains a single deck.","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"    private static class ModelStubWithDeck extends ModelStub {","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        private final Deck deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        ModelStubWithDeck(Deck deck) {","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"            requireNonNull(deck);","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"            this.deck \u003d deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-18"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"            requireNonNull(deck);","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"            return this.deck.isSameDeck(deck);","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"     * A Model stub that always accept the deck being added.","lastModifiedDate":"2023-03-18"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"    private static class ModelStubAcceptingDeckAdded extends ModelStub {","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"ruiyigan"},"content":"        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"        public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-18"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"            requireNonNull(deck);","lastModifiedDate":"2023-03-18"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"            return decksAdded.stream().anyMatch(deck::isSameDeck);","lastModifiedDate":"2023-03-18"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"ruiyigan"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"        public void addDeck(Deck deck) {","lastModifiedDate":"2023-03-18"},{"lineNumber":103,"author":{"gitId":"ruiyigan"},"content":"            requireNonNull(deck);","lastModifiedDate":"2023-03-18"},{"lineNumber":104,"author":{"gitId":"ruiyigan"},"content":"            decksAdded.add(deck);","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":109,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"rockman007372":6,"ruiyigan":103}},{"path":"src/test/java/seedu/address/logic/commands/deckcommands/DeleteDeckCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":" * {@code DeleteDeckCommand}.","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"public class DeleteDeckCommandTest {","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    private Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        Deck deckToDelete \u003d model.getFilteredDeckList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        DeleteDeckCommand deleteDeckCommand \u003d new DeleteDeckCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(DeleteDeckCommand.MESSAGE_SUCCESS, deckToDelete);","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"        expectedModel.deleteDeck(deckToDelete);","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(deleteDeckCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        DeleteDeckCommand deleteDeckCommand \u003d new DeleteDeckCommand(outOfBoundIndex);","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(deleteDeckCommand, model, Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"        showDeckAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        Deck deckToDelete \u003d model.getFilteredDeckList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        DeleteDeckCommand deleteDeckCommand \u003d new DeleteDeckCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(DeleteDeckCommand.MESSAGE_SUCCESS, deckToDelete);","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"        expectedModel.deleteDeck(deckToDelete);","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        showNoDeck(expectedModel);","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(deleteDeckCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2023-03-18"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        showDeckAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"        // ensures that outOfBoundIndex is still in bounds of master deck list","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMasterDeck().getDeckList().size());","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        DeleteDeckCommand deleteDeckCommand \u003d new DeleteDeckCommand(outOfBoundIndex);","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(deleteDeckCommand, model, Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"    public void execute_deletingDeck_deletesCards() {","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        Deck deckToDelete \u003d model.getFilteredDeckList().get(INDEX_FIRST.getZeroBased()); // contains 2 cards","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"        expectedModel.deleteDeck(deckToDelete);","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(model.getMasterDeck().getCardList().size() - 2,","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"                expectedModel.getMasterDeck().getCardList().size());","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"    public void equals() {","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"        DeleteDeckCommand deleteFirstCommand \u003d new DeleteDeckCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-18"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"        DeleteDeckCommand deleteSecondCommand \u003d new DeleteDeckCommand(INDEX_SECOND);","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"ruiyigan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2023-03-18"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-18"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"        DeleteDeckCommand deleteFirstCommandCopy \u003d new DeleteDeckCommand(INDEX_FIRST);","lastModifiedDate":"2023-03-18"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2023-03-18"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":101,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":103,"author":{"gitId":"ruiyigan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":104,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2023-03-18"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":109,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":110,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":111,"author":{"gitId":"ruiyigan"},"content":"     * Updates {@code model}\u0027s filtered list to show no deck.","lastModifiedDate":"2023-03-18"},{"lineNumber":112,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"ruiyigan"},"content":"    private void showNoDeck(Model model) {","lastModifiedDate":"2023-03-18"},{"lineNumber":115,"author":{"gitId":"ruiyigan"},"content":"        model.updateFilteredDeckList(p -\u003e false);","lastModifiedDate":"2023-03-18"},{"lineNumber":116,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":117,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(model.getFilteredDeckList().isEmpty());","lastModifiedDate":"2023-03-18"},{"lineNumber":118,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":119,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"rockman007372":5,"ruiyigan":114}},{"path":"src/test/java/seedu/address/logic/commands/deckcommands/EditDeckCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditDeckCommand.","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"public class EditDeckCommandTest {","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    private final Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public void execute_editDeck_editSuccessful() {","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        Deck editedDeck \u003d new Deck(\"Edited Deck\");","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        EditDeckCommand editDeckCommand \u003d new EditDeckCommand(INDEX_FIRST, editedDeck);","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"        String expectedMessage \u003d String.format(EditDeckCommand.MESSAGE_EDIT_DECK_SUCCESS,","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"                INDEX_FIRST.getOneBased(), editedDeck);","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.setDeck(model.getFilteredDeckList().get(0), editedDeck);","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"        expectedModel.moveCards(model.getFilteredDeckList().get(0), editedDeck);","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        assertCommandSuccess(editDeckCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"    public void execute_duplicateDeck_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        Deck firstDeck \u003d model.getFilteredDeckList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        EditDeckCommand editDeckCommand \u003d new EditDeckCommand(INDEX_SECOND, firstDeck);","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editDeckCommand, model, EditDeckCommand.MESSAGE_DUPLICATE_DECK);","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    public void execute_invalidDeckIndex_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        EditDeckCommand editDeckCommand \u003d new EditDeckCommand(outOfBoundIndex, new Deck(\"Invalid Deck\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editDeckCommand, model, Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"    public void equals() {","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        Deck deck \u003d new Deck(\"Original Deck\");","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        final EditDeckCommand standardCommand \u003d new EditDeckCommand(INDEX_FIRST, deck);","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        Deck copyDeck \u003d new Deck(deck.getDeckName());","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        EditDeckCommand commandWithSameValues \u003d new EditDeckCommand(INDEX_FIRST, copyDeck);","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(standardCommand.equals(new EditDeckCommand(INDEX_SECOND, deck)));","lastModifiedDate":"2023-03-19"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(standardCommand.equals(new EditDeckCommand(INDEX_FIRST, new Deck(\"Different Deck\"))));","lastModifiedDate":"2023-03-19"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"rockman007372":8,"ruiyigan":79}},{"path":"src/test/java/seedu/address/logic/commands/deckcommands/FindDecksCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DECKS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalDecks.VALID_DECK_SCIENCE;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import java.util.List;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.DeckContainsKeywordsPredicate;","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"public class FindDecksCommandTest {","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    private Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public void equals() {","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        FindDecksCommand findFirstCommand \u003d new FindDecksCommand(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        FindDecksCommand findSecondCommand \u003d new FindDecksCommand(Collections.singletonList(\"second\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        FindDecksCommand findFirstCommandCopy \u003d new FindDecksCommand(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        // different find deck command -\u003e returns false","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    public void execute_zeroKeywords_noDeckFound() {","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DECKS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        DeckContainsKeywordsPredicate predicate \u003d prepareDeckPredicate(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        List keywords \u003d prepareKeywords(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        FindDecksCommand command \u003d new FindDecksCommand(keywords);","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"                expectedMessage, false, false, false, false, false, false, false, true, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.updateFilteredDeckList(predicate);","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredDeckList());","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"    public void execute_singleKeywords_oneDecksFound() {","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d \"science\";","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DECKS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        DeckContainsKeywordsPredicate predicate \u003d prepareDeckPredicate(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"        List keywords \u003d prepareKeywords(userInput);","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        FindDecksCommand command \u003d new FindDecksCommand(keywords);","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"junianob"},"content":"                expectedMessage, false, false, false, false, false, false, false, true, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.updateFilteredDeckList(predicate);","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(Arrays.asList(VALID_DECK_SCIENCE), model.getFilteredDeckList());","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"     * Parses {@code userInput} into a {@code DeckContainsKeywordsPredicate}.","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"    private DeckContainsKeywordsPredicate prepareDeckPredicate(String userInput) {","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"        return new DeckContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"     * Parses {@code userInput} into a {@code List}.","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"    private List prepareKeywords(String userInput) {","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"        return Arrays.asList(userInput.split(\"\\\\s+\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"junianob":8,"ruiyigan":85}},{"path":"src/test/java/seedu/address/logic/commands/deckcommands/SelectDeckCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"public class SelectDeckCommandTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    private Deck testDeck \u003d new Deck(\"Test Deck\");","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    public void execute_validIndex_success() {","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        model.addDeck(testDeck);","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"        Index validIndex \u003d INDEX_FIRST;","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        SelectDeckCommand selectDeckCommand \u003d new SelectDeckCommand(validIndex);","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(SelectDeckCommand.MESSAGE_SUCCESS, testDeck.getDeckName());","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"                expectedMessage, false, false, false, false, true, false, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.addDeck(testDeck);","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.selectDeck(validIndex);","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(selectDeckCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"    public void execute_invalidIndex_failure() {","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        model.addDeck(testDeck);","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        Index invalidIndex \u003d INDEX_SECOND;","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        SelectDeckCommand selectDeckCommand \u003d new SelectDeckCommand(invalidIndex);","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d SelectDeckCommand.MESSAGE_INVALID_DECK_DISPLAYED_INDEX;","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(selectDeckCommand, model, expectedMessage);","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public void equals() {","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        Index index1 \u003d INDEX_FIRST;","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        Index index2 \u003d INDEX_SECOND;","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        SelectDeckCommand selectDeckCommand1 \u003d new SelectDeckCommand(index1);","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"        SelectDeckCommand selectDeckCommand2 \u003d new SelectDeckCommand(index1);","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        SelectDeckCommand selectDeckCommand3 \u003d new SelectDeckCommand(index2);","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(selectDeckCommand1.equals(selectDeckCommand1));","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(selectDeckCommand1.equals(selectDeckCommand2));","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(selectDeckCommand1.equals(selectDeckCommand3));","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"rockman007372":1,"junianob":4,"ruiyigan":60}},{"path":"src/test/java/seedu/address/logic/commands/deckcommands/ShowDecksCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ShowDecksCommand.","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"public class ShowDecksCommandTest {","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"        model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"        expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public void execute_deckListIsNotFiltered_showsSameDeckList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"                ShowDecksCommand.MESSAGE_SUCCESS, false, false, false, false, false, false, false, false, false, true);","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(new ShowDecksCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"    public void execute_deckListIsFiltered_showsEverything() {","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"                ShowDecksCommand.MESSAGE_SUCCESS, false, false, false, false, false, false, false, false, false, true);","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(new ShowDecksCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"junianob":7,"ruiyigan":9,"unfazing":1,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/deckcommands/UnselectDeckCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.logic.commands.deckcommands;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.commandresult.CommandResult;","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"public class UnselectDeckCommandTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    public void execute_unselectDeck_success() {","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"        Model model \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"        model.selectDeck(Index.fromOneBased(1));","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"        expectedModel.selectDeck(Index.fromOneBased(1));","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"                UnselectDeckCommand.MESSAGE_SUCCESS, false, false, false,","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"                false, false, true, false, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        expectedModel.unselectDeck();","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"        assertCommandSuccess(new UnselectDeckCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"rockman007372":8,"junianob":4,"ruiyigan":21}},{"path":"src/test/java/seedu/address/logic/parser/AddCardCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_GRAVITY;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_GRAVITY;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HARD;","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MEDIUM;","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDIUM;","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.AddCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.AddCardCommand.AddCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"import seedu.address.testutil.AddCardDescriptorBuilder;","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"public class AddCardCommandParserTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    private final AddCardCommandParser parser \u003d new AddCardCommandParser();","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        AddCardDescriptor expectedCardDescriptor \u003d new AddCardDescriptorBuilder()","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"                .withQuestion(VALID_QUESTION_PHOTOSYNTHESIS)","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"                .withAnswer(VALID_ANSWER_PHOTOSYNTHESIS).withTag(VALID_TAG_MEDIUM).build(); // No deck specified","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_PHOTOSYNTHESIS","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"                + ANSWER_DESC_PHOTOSYNTHESIS + TAG_DESC_MEDIUM, new AddCardCommand(expectedCardDescriptor));","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        // multiple question - last question accepted","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, QUESTION_DESC_GRAVITY + QUESTION_DESC_PHOTOSYNTHESIS","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"                + ANSWER_DESC_PHOTOSYNTHESIS + TAG_DESC_MEDIUM, new AddCardCommand(expectedCardDescriptor));","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        // multiple answer - last answer accepted","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, QUESTION_DESC_PHOTOSYNTHESIS + ANSWER_DESC_GRAVITY","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"                + ANSWER_DESC_PHOTOSYNTHESIS + TAG_DESC_MEDIUM, new AddCardCommand(expectedCardDescriptor));","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"        AddCardDescriptor expectedCardMultipleTags \u003d new AddCardDescriptorBuilder()","lastModifiedDate":"2023-03-22"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"                .withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).withAnswer(VALID_ANSWER_PHOTOSYNTHESIS)","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"                .withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, QUESTION_DESC_PHOTOSYNTHESIS + ANSWER_DESC_PHOTOSYNTHESIS","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"                + TAG_DESC_MEDIUM, new AddCardCommand(expectedCardMultipleTags));","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        AddCardDescriptor expectedCard \u003d new AddCardDescriptorBuilder().withQuestion(VALID_QUESTION_PHOTOSYNTHESIS)","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"                .withAnswer(VALID_ANSWER_PHOTOSYNTHESIS).build(); // tags are optional","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, QUESTION_DESC_PHOTOSYNTHESIS + ANSWER_DESC_PHOTOSYNTHESIS,","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"                new AddCardCommand(expectedCard));","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        // missing question prefix","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        assertParseFailure(parser, VALID_QUESTION_PHOTOSYNTHESIS + ANSWER_DESC_PHOTOSYNTHESIS,","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"        // missing answer prefix","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"        assertParseFailure(parser, QUESTION_DESC_PHOTOSYNTHESIS + VALID_ANSWER_PHOTOSYNTHESIS,","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"                expectedMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"        assertParseFailure(parser, VALID_QUESTION_PHOTOSYNTHESIS + VALID_ANSWER_PHOTOSYNTHESIS,","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"        // invalid question","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_GRAVITY","lastModifiedDate":"2023-03-19"},{"lineNumber":93,"author":{"gitId":"ruiyigan"},"content":"                + TAG_DESC_HARD, Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-19"},{"lineNumber":94,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"        // invalid answer","lastModifiedDate":"2023-03-19"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, QUESTION_DESC_PHOTOSYNTHESIS + INVALID_ANSWER_DESC","lastModifiedDate":"2023-03-19"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"                + TAG_DESC_HARD, Answer.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-19"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"        // invalid tag","lastModifiedDate":"2023-03-20"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, QUESTION_DESC_PHOTOSYNTHESIS + ANSWER_DESC_PHOTOSYNTHESIS","lastModifiedDate":"2023-03-20"},{"lineNumber":101,"author":{"gitId":"ruiyigan"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":103,"author":{"gitId":"ruiyigan"},"content":"        // non-empty preamble","lastModifiedDate":"2023-03-20"},{"lineNumber":104,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_PHOTOSYNTHESIS","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"ruiyigan"},"content":"                        + ANSWER_DESC_PHOTOSYNTHESIS + TAG_DESC_HARD + TAG_DESC_HARD,","lastModifiedDate":"2023-03-20"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"rockman007372":9,"ruiyigan":58,"unfazing":2,"-":30,"HJ-PRK":9}},{"path":"src/test/java/seedu/address/logic/parser/AddDeckCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DECK_DESC_SOCIOLOGY;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_DESC;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.AddDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"public class AddDeckCommandParserTest {","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    private AddDeckCommandParser parser \u003d new AddDeckCommandParser();","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        Deck expectedDeck \u003d new Deck(\"Sociology\");","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DECK_DESC_SOCIOLOGY,","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"                new AddDeckCommand(expectedDeck));","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(Deck.MESSAGE_CONSTRAINTS, AddDeckCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        // missing argument for deck name","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, INVALID_DECK_DESC, expectedMessage);","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"rockman007372":1,"ruiyigan":32}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCardCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.DeleteCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":" * outside of the DeleteCardCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" * same path through the DeleteCardCommand, and therefore we test only one of them.","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"public class DeleteCardCommandParserTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    private DeleteCardCommandParser parser \u003d new DeleteCardCommandParser();","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCardCommand(INDEX_FIRST));","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"ruiyigan":8,"-":24}},{"path":"src/test/java/seedu/address/logic/parser/DeleteDeckCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.DeleteDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"public class DeleteDeckCommandParserTest {","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    private DeleteDeckCommandParser parser \u003d new DeleteDeckCommandParser();","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, \"1\", new DeleteDeckCommand(INDEX_FIRST));","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeckCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"rockman007372":1,"ruiyigan":24}},{"path":"src/test/java/seedu/address/logic/parser/EditCardCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HARD;","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MEDIUM;","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GRAVITY;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GRAVITY;","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HARD;","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDIUM;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"public class EditCardCommandParserTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"    private EditCardCommandParser parser \u003d new EditCardCommandParser();","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, VALID_QUESTION_GRAVITY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"1\", EditCardCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"-5\" + QUESTION_DESC_GRAVITY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"0\" + QUESTION_DESC_GRAVITY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        Index targetIndex \u003d INDEX_SECOND;","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_GRAVITY + QUESTION_DESC_GRAVITY","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"                + TAG_DESC_HARD + TAG_DESC_MEDIUM;","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"                .withQuestion(VALID_QUESTION_GRAVITY)","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"                .withAnswer(VALID_ANSWER_GRAVITY)","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"                .withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"HJ-PRK"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2023-03-11"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2023-03-19"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_GRAVITY).build();","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"HJ-PRK"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"        Index targetIndex \u003d INDEX_THIRD;","lastModifiedDate":"2023-03-18"},{"lineNumber":109,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":110,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_GRAVITY).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"ruiyigan"},"content":"        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"ruiyigan"},"content":"        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_GRAVITY).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":117,"author":{"gitId":"ruiyigan"},"content":"        expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"ruiyigan"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_MEDIUM;","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"ruiyigan"},"content":"        descriptor \u003d new EditCardDescriptorBuilder().withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"ruiyigan"},"content":"        expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":129,"author":{"gitId":"ruiyigan"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":130,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_GRAVITY","lastModifiedDate":"2023-03-19"},{"lineNumber":131,"author":{"gitId":"ruiyigan"},"content":"                + TAG_DESC_MEDIUM + ANSWER_DESC_GRAVITY + TAG_DESC_MEDIUM","lastModifiedDate":"2023-03-19"},{"lineNumber":132,"author":{"gitId":"ruiyigan"},"content":"                + ANSWER_DESC_PHOTOSYNTHESIS + TAG_DESC_HARD;","lastModifiedDate":"2023-03-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"ruiyigan"},"content":"                .withAnswer(VALID_ANSWER_PHOTOSYNTHESIS).withTag(VALID_TAG_HARD)","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"ruiyigan"},"content":"        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"ruiyigan":57,"unfazing":2,"-":76,"HJ-PRK":6}},{"path":"src/test/java/seedu/address/logic/parser/EditDeckCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DECK_DESC_SCIENCE;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.deckcommands.EditDeckCommand;","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"public class EditDeckCommandParserTest {","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDeckCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    private EditDeckCommandParser parser \u003d new EditDeckCommandParser();","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"        // no index specified","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, DECK_DESC_SCIENCE, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"rockman007372":1,"ruiyigan":22}},{"path":"src/test/java/seedu/address/logic/parser/FindDecksCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.deckcommands.FindDecksCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"public class FindDecksCommandParserTest {","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    private FindDecksCommandParser parser \u003d new FindDecksCommandParser();","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"                FindDecksCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"        FindDecksCommand expectedFindCommand \u003d","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"                new FindDecksCommand(Arrays.asList(\"What\u0027s\", \"gravity\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, \"What\u0027s gravity\", expectedFindCommand);","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        assertParseSuccess(parser, \" \\n What\u0027s \\n \\t gravity  \\t\", expectedFindCommand);","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"ruiyigan":9,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/MasterDeckParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"public class MasterDeckParserTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    private final MasterDeckParser parser \u003d new MasterDeckParser();","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public void parseCommand_add() throws Exception { // edit in the future as deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        // Card card \u003d new CardBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"        // AddCardCommand command \u003d (AddCardCommand)","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"        // parser.parseCommandWhenDeckNotSelected(CardUtil.getAddCommand(card));","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"        // assertEquals(new AddCardCommand(card), command);","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(ClearCommand.COMMAND_WORD","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"    public void parseCommand_delete() throws Exception { // edit in the future as deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        // DeleteCardCommand command \u003d (DeleteCardCommand) parser.parseCommandWhenDeckNotSelected(","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        //        DeleteCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        // assertEquals(new DeleteCardCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    public void parseCommand_edit() throws Exception { // edit in the future as deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        // Card card \u003d new CardBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        // EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(card).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        // EditCardCommand command \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        // (EditCardCommand) parser.parseCommandWhenDeckNotSelected(EditCardCommand.COMMAND_WORD","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        //        + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        //        + CardUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        // assertEquals(new EditCardCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(ExitCommand.COMMAND_WORD","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"    /*","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommandInMainUnselectedMode(","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(new FindCommand(keywords), command);","lastModifiedDate":"2023-03-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"    */","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(HelpCommand.COMMAND_WORD","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"    /*","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        assertTrue(parser.parseCommandInMainUnselectedMode(ListCommand.COMMAND_WORD","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof ListCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"    */","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"            -\u003e parser.parseCommandInMainUnselectedMode(\"\"));","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"                -\u003e parser.parseCommandInMainUnselectedMode(\"unknownCommand\"));","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"ruiyigan":25,"unfazing":15,"-":53}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    private static final String INVALID_QUESTION \u003d \" \";","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    private static final String INVALID_ANSWER \u003d \" \";","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"    private static final String INVALID_TAG \u003d \"#hard\";","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"    private static final String VALID_QUESTION \u003d \"What is gravity\";","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    private static final String VALID_ANSWER \u003d \"A force of attraction between objects due to their mass\";","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"    private static final String VALID_TAG_MEDIUM \u003d \"medium\";","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    private static final String VALID_TAG_HARD \u003d \"hard\";","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"    public void parseQuestion_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"    public void parseQuestion_invalidValue_throwsParseException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"    public void parseQuestion_validValueWithoutWhitespace_returnsQuestion() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        Question expectedQuestion \u003d new Question(VALID_QUESTION);","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"    public void parseQuestion_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"        Question expectedQuestion \u003d new Question(VALID_QUESTION);","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"    public void parseAnswer_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"    public void parseAnswer_invalidValue_throwsParseException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);","lastModifiedDate":"2023-03-19"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER));","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":88,"author":{"gitId":"HJ-PRK"},"content":"        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER + WHITESPACE;","lastModifiedDate":"2023-03-19"},{"lineNumber":89,"author":{"gitId":"HJ-PRK"},"content":"        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));","lastModifiedDate":"2023-03-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"rockman007372"},"content":"        Tag expectedTag \u003d new Tag(Tag.TagName.MEDIUM);","lastModifiedDate":"2023-03-26"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_MEDIUM));","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_MEDIUM + WHITESPACE;","lastModifiedDate":"2023-03-19"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"        Tag expectedTag \u003d new Tag(Tag.TagName.MEDIUM);","lastModifiedDate":"2023-03-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"unfazing"},"content":"    void parseReviewLimit_validValues_returnsNumCardInteger() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":118,"author":{"gitId":"unfazing"},"content":"        String inputAll \u003d \"none\";","lastModifiedDate":"2023-03-30"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"        assertEquals(-1, ParserUtil.parseReviewLimit(inputAll));","lastModifiedDate":"2023-03-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"        String inputTen \u003d \"10\";","lastModifiedDate":"2023-03-26"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"        assertEquals(10, ParserUtil.parseReviewLimit(inputTen));","lastModifiedDate":"2023-03-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"    void parseReviewLimit_invalidValues_throwsParseException() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"        String inputString \u003d \"helloWorld\";","lastModifiedDate":"2023-03-26"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReviewLimit(inputString));","lastModifiedDate":"2023-03-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":130,"author":{"gitId":"rockman007372"},"content":"        String inputFloat \u003d \"10.5\";","lastModifiedDate":"2023-03-26"},{"lineNumber":131,"author":{"gitId":"unfazing"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReviewLimit(inputFloat));","lastModifiedDate":"2023-03-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"rockman007372":7,"ruiyigan":5,"unfazing":9,"-":85,"HJ-PRK":27}},{"path":"src/test/java/seedu/address/model/MasterDeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDIUM;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.LOOP;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.card.exceptions.DuplicateCardException;","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.CardBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"public class MasterDeckTest {","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    private final MasterDeck masterDeck \u003d new MasterDeck();","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(Collections.emptyList(), masterDeck.getCardList());","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e masterDeck.resetData(null));","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    public void resetData_withValidReadOnlyMasterDeck_replacesData() {","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        MasterDeck newData \u003d getTypicalMasterDeck();","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        masterDeck.resetData(newData);","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(newData, masterDeck);","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"    public void resetData_withDuplicateCards_throwsDuplicateCardException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"        // Two cards with the same identity fields","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        Card editedLoop \u003d new CardBuilder(LOOP).withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e newCards \u003d Arrays.asList(LOOP, editedLoop);","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeckStub newData \u003d new MasterDeckStub(newCards);","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(DuplicateCardException.class, () -\u003e masterDeck.resetData(newData));","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"    public void hasCard_nullCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e masterDeck.hasCard(null));","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"    public void hasCard_cardNotInMasterDeck_returnsFalse() {","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(masterDeck.hasCard(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"    public void hasCard_cardInMasterDeck_returnsTrue() {","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        masterDeck.addCard(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(masterDeck.hasCard(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"    public void hasCard_cardWithSameIdentityFieldsInMasterDeck_returnsTrue() {","lastModifiedDate":"2023-03-17"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        masterDeck.addCard(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        Card editedLoop \u003d new CardBuilder(LOOP).withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        assertTrue(masterDeck.hasCard(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"    public void getCardList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-17"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e masterDeck.getCardList().remove(0));","lastModifiedDate":"2023-03-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"     * A stub ReadOnlyDeck whose cards list can violate interface constraints.","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"    private static class MasterDeckStub implements ReadOnlyMasterDeck {","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        private final ObservableList\u003cCard\u003e cards \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"HJ-PRK"},"content":"        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeckStub(Collection\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"            this.cards.setAll(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"        public ObservableList\u003cCard\u003e getCardList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"            return cards;","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"        @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"        public ObservableList\u003cDeck\u003e getDeckList() {","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"            return decks;","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"ruiyigan":24,"unfazing":10,"-":58,"HJ-PRK":13}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_NO_CARDS;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.LOOP;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.VARIABLE;","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.MasterDeckBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        assertEquals(new MasterDeck(), new MasterDeck(modelManager.getMasterDeck()));","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"        userPrefs.setMasterDeckFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"        userPrefs.setMasterDeckFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"    public void setMasterDeckFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setMasterDeckFilePath(null));","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"HJ-PRK"},"content":"    public void setMasterDeckFilePath_validPath_setsMasterDeckFilePath() {","lastModifiedDate":"2023-03-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        modelManager.setMasterDeckFilePath(path);","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"        assertEquals(path, modelManager.getMasterDeckFilePath());","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"    public void hasCard_nullCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCard(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"    public void hasCard_cardNotInMasterDeck_returnsFalse() {","lastModifiedDate":"2023-03-19"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(modelManager.hasCard(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"    public void hasCard_cardInMasterDeck_returnsTrue() {","lastModifiedDate":"2023-03-19"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"        modelManager.addCard(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(modelManager.hasCard(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"    public void getFilteredCardList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCardList().remove(0));","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck masterDeck \u003d new MasterDeckBuilder().withCard(LOOP).withCard(VARIABLE).build();","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck differentMasterDeck \u003d new MasterDeck();","lastModifiedDate":"2023-03-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"        modelManager \u003d new ModelManager(masterDeck, userPrefs);","lastModifiedDate":"2023-03-19"},{"lineNumber":105,"author":{"gitId":"HJ-PRK"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(masterDeck, userPrefs);","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"        assertEquals(modelManager, modelManagerCopy);","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"rockman007372"},"content":"        assertEquals(modelManager, modelManager);","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(null, modelManager);","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(5, modelManager);","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"HJ-PRK"},"content":"        // different masterDeck -\u003e returns false","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(modelManager, new ModelManager(differentMasterDeck, userPrefs));","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"ruiyigan"},"content":"        String[] keywords \u003d LOOP.getQuestion().question.split(\"\\\\s+\");","lastModifiedDate":"2023-03-17"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"        modelManager.updateFilteredCardList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(modelManager, new ModelManager(masterDeck, userPrefs));","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"rockman007372"},"content":"        modelManager.updateFilteredCardList(PREDICATE_SHOW_NO_CARDS);","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"HJ-PRK"},"content":"        differentUserPrefs.setMasterDeckFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(modelManager, new ModelManager(masterDeck, differentUserPrefs));","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"rockman007372":10,"ruiyigan":7,"unfazing":8,"-":94,"HJ-PRK":14}},{"path":"src/test/java/seedu/address/model/ModelStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.model;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import javafx.util.Pair;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.review.Review;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":" * A default model stub that have all the methods failing.","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"public class ModelStub implements Model {","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"    public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"    public void setMasterDeckFilePath(Path deckFilePath) {","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"    public void addCard(Card card) {","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"    public void setMasterDeck(ReadOnlyMasterDeck newData) {","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"    public ReadOnlyMasterDeck getMasterDeck() {","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"    public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"rockman007372"},"content":"    public void deleteCard(Card target) {","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"    public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cCard\u003e getFilteredCardList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cDeck\u003e getFilteredDeckList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"rockman007372"},"content":"    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"        return; // AddCardCommand does call updateFilteredCardList method","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"rockman007372"},"content":"    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cDeck\u003e getSelectedDeck() {","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"rockman007372"},"content":"        return Optional.of(new Deck(\"Default\"));","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"    public void addDeck(Deck deck) {","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"    public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"    public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"rockman007372"},"content":"    public void moveCards(Deck oldDeck, Deck newDeck) {","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"rockman007372"},"content":"    public void deleteDeck(Deck key) {","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"rockman007372"},"content":"    public void selectDeck(Index deckIndex) {","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"rockman007372"},"content":"    public void unselectDeck() {","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"rockman007372"},"content":"    public String getSelectedDeckName() {","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"rockman007372"},"content":"    public int getDeckSize(int deckIndex) {","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"unfazing"},"content":"    public int getDeckSizeFilteredTag(int deckIndex, List\u003cTagName\u003e difficulties) {","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-29"},{"lineNumber":157,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":158,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":159,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Review Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cReview\u003e getReview() {","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cCard\u003e getReviewCardList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"unfazing"},"content":"    public void reviewDeck(Index deckIndex, List\u003cTagName\u003e difficulties) {","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"rockman007372"},"content":"    public void setNumCardsPerReview(int limit) {","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":182,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e\u003e getReviewStatsList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":183,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"rockman007372"},"content":"    public void endReview() {","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":192,"author":{"gitId":"rockman007372"},"content":"    public String getReviewDeckName() {","lastModifiedDate":"2023-03-28"},{"lineNumber":193,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":196,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":197,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cPair\u003cString, String\u003e \u003e getReviewDeckNameList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":199,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":200,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":201,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":202,"author":{"gitId":"rockman007372"},"content":"    public void flipCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":203,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":204,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":205,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":206,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":207,"author":{"gitId":"rockman007372"},"content":"    public boolean goToPrevCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":208,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":209,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":210,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":211,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":212,"author":{"gitId":"rockman007372"},"content":"    public boolean goToNextCard() {","lastModifiedDate":"2023-03-28"},{"lineNumber":213,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":214,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":215,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":216,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":217,"author":{"gitId":"rockman007372"},"content":"    public ModelState getState() {","lastModifiedDate":"2023-03-28"},{"lineNumber":218,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":219,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":220,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":221,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":222,"author":{"gitId":"rockman007372"},"content":"    public void tagCurrentCardInReview(Tag tag) {","lastModifiedDate":"2023-03-28"},{"lineNumber":223,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":224,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":225,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":226,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":227,"author":{"gitId":"rockman007372"},"content":"    public boolean isReviewCardFlipped() {","lastModifiedDate":"2023-03-28"},{"lineNumber":228,"author":{"gitId":"rockman007372"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-28"},{"lineNumber":229,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":230,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"rockman007372":220,"ruiyigan":1,"unfazing":9}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    public void setMasterDeckFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMasterDeckFilePath(null));","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":19,"HJ-PRK":2}},{"path":"src/test/java/seedu/address/model/card/AnswerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"public class AnswerTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Answer(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    public void constructor_invalidAnswer_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"        String invalidAnswer \u003d \"\";","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"    public void isValidAnswer() {","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        assertFalse(Answer.isValidAnswer(\"\")); // empty string","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        assertFalse(Answer.isValidAnswer(\" \")); // spaces only","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(Answer.isValidAnswer(\"A force of attraction between objects due to their mass\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        assertTrue(Answer.isValidAnswer(\"-\")); // one character","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(Answer.isValidAnswer(\"The process by which plants convert sunlight into energy. \"","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"                + \"It generally involves the green pigment chlorophyll \"","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"                + \"and generates oxygen as a by-product.\")); // long address","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"unfazing":7,"-":23,"HJ-PRK":8}},{"path":"src/test/java/seedu/address/model/card/CardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_SCIENCE;","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDIUM;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.LOOP;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.CardBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"public class CardTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"    public void constructor_noTag_defaultTag() {","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"        Card expectedCard \u003d new Card(","lastModifiedDate":"2023-03-26"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"                new Question(VALID_QUESTION_PHOTOSYNTHESIS),","lastModifiedDate":"2023-03-26"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"                new Answer(VALID_ANSWER_PHOTOSYNTHESIS),","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"                new Tag(TagName.UNTAGGED),","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"                new Deck(VALID_DECK_SCIENCE));","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"        Card cardWithoutTag \u003d new Card(new Question(VALID_QUESTION_PHOTOSYNTHESIS),","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"                new Answer(VALID_ANSWER_PHOTOSYNTHESIS),","lastModifiedDate":"2023-03-26"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"                null,","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"                new Deck(VALID_DECK_SCIENCE));","lastModifiedDate":"2023-03-26"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        assertEquals(expectedCard, cardWithoutTag);","lastModifiedDate":"2023-03-26"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"    public void constructor_missingDeck_throwsNullPointerException() {","lastModifiedDate":"2023-03-26"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Card(","lastModifiedDate":"2023-03-26"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"                new Question(VALID_QUESTION_PHOTOSYNTHESIS),","lastModifiedDate":"2023-03-26"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"                new Answer(VALID_ANSWER_PHOTOSYNTHESIS),","lastModifiedDate":"2023-03-26"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"                new Tag(TagName.MEDIUM),","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"                null));","lastModifiedDate":"2023-03-26"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"    public void isSameCard() {","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(LOOP.isSameCard(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(LOOP.isSameCard(null));","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"        // same question and answer and deck, all other attributes different -\u003e returns true","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        Card editedLoop \u003d new CardBuilder(LOOP).withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"        assertTrue(LOOP.isSameCard(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"        // different question, all other attributes same -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"        editedLoop \u003d new CardBuilder(LOOP).withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"        assertFalse(LOOP.isSameCard(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"        // different answer, all other attributes same -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"        editedLoop \u003d new CardBuilder(LOOP).withAnswer(VALID_ANSWER_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"        assertFalse(LOOP.isSameCard(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"        // question differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        Card editedPhotosynthesis \u003d new CardBuilder(PHOTOSYNTHESIS)","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"                .withQuestion(VALID_QUESTION_PHOTOSYNTHESIS.toLowerCase())","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"                .build();","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"        assertFalse(PHOTOSYNTHESIS.isSameCard(editedPhotosynthesis));","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"        // question has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        String questionWithTrailingSpaces \u003d VALID_QUESTION_PHOTOSYNTHESIS + \" \";","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        editedPhotosynthesis \u003d new CardBuilder(PHOTOSYNTHESIS).withQuestion(questionWithTrailingSpaces).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        assertFalse(PHOTOSYNTHESIS.isSameCard(editedPhotosynthesis));","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"        Card loopCopy \u003d new CardBuilder(LOOP).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"        assertTrue(LOOP.equals(loopCopy));","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(LOOP.equals(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(LOOP.equals(null));","lastModifiedDate":"2023-03-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(LOOP.equals(5));","lastModifiedDate":"2023-03-17"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(LOOP.equals(PHOTOSYNTHESIS));","lastModifiedDate":"2023-03-17"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"        // different question -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"        Card editedLoop \u003d new CardBuilder(LOOP).withQuestion(VALID_QUESTION_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"        assertFalse(LOOP.equals(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"        // different answer -\u003e returns false","lastModifiedDate":"2023-03-18"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"        editedLoop \u003d new CardBuilder(LOOP).withAnswer(VALID_ANSWER_PHOTOSYNTHESIS).build();","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        assertFalse(LOOP.equals(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"        editedLoop \u003d new CardBuilder(LOOP).withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"        assertFalse(LOOP.equals(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":110,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"rockman007372"},"content":"        // different flip attribute -\u003e returns false","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"rockman007372"},"content":"        editedLoop \u003d new CardBuilder(LOOP).withFlipAttribute(!LOOP.isFlipped()).build();","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"rockman007372"},"content":"        assertNotEquals(editedLoop, LOOP);","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"rockman007372"},"content":"    public void isInDeck() {","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"rockman007372"},"content":"        Deck defaultDeck \u003d new Deck(CardBuilder.DEFAULT_DECK);","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"rockman007372"},"content":"        Deck otherDeck \u003d new Deck(\"Other\");","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"rockman007372"},"content":"        Card defaultCard \u003d new CardBuilder().withDeck(CardBuilder.DEFAULT_DECK).build();","lastModifiedDate":"2023-03-26"},{"lineNumber":121,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"rockman007372"},"content":"        assertTrue(defaultCard.isInDeck(defaultDeck));","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"rockman007372"},"content":"        assertFalse(defaultCard.isInDeck(otherDeck));","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"rockman007372":47,"ruiyigan":13,"unfazing":33,"-":31,"HJ-PRK":1}},{"path":"src/test/java/seedu/address/model/card/QuestionContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.CardBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"public class QuestionContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    public void test_questionContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"gravity\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(predicate.test(new CardBuilder().withQuestion(\"What is gravity\").build()));","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"What\", \"gravity\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(predicate.test(new CardBuilder().withQuestion(\"What is gravity\").build()));","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"gravity\", \"photosynthesis\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(predicate.test(new CardBuilder().withQuestion(\"What is photosynthesis\").build()));","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"wHaT\", \"gRaVIty\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(predicate.test(new CardBuilder().withQuestion(\"What is gravity\").build()));","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"    public void test_questionDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(predicate.test(new CardBuilder().withQuestion(\"What is gravity\").build()));","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"photosynthesis\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(predicate.test(new CardBuilder().withQuestion(\"What is gravity\").build()));","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"        // Keywords match answer, but does not match question","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"sunlight\", \"energy\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(predicate.test(new CardBuilder().withQuestion(\"What is gravity\")","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"                .withAnswer(\"The process by which plants convert sunlight into energy\").build()));","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"ruiyigan":1,"unfazing":11,"-":50,"HJ-PRK":17}},{"path":"src/test/java/seedu/address/model/card/QuestionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"public class QuestionTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Question(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    public void constructor_invalidQuestion_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"        String invalidQuestion \u003d \"\";","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    public void isValidName() {","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        // null name","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        // invalid name","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        assertFalse(Question.isValidQuestion(\"\")); // empty string","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        assertFalse(Question.isValidQuestion(\" \")); // spaces only","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        // valid name","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(Question.isValidQuestion(\"what is gravity\")); // alphabets only","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(Question.isValidQuestion(\"98\")); // numbers only","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(Question.isValidQuestion(\"What is 1 plus 1\")); // alphanumeric characters","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(Question.isValidQuestion(\"Who is Isaac Newton\")); // with capital letters","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"        assertTrue(Question.isValidQuestion(\"Why does the moon\u0027s gravity cause tides on earth but\"","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"                + \"the Sun\u0027s gravity does not?\")); // long question","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"unfazing":30,"HJ-PRK":9}},{"path":"src/test/java/seedu/address/model/card/UniqueDeckListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GRAVITY;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HARD;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDIUM;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.LOOP;","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.card.exceptions.CardNotFoundException;","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.card.exceptions.DuplicateCardException;","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.CardBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"public class UniqueDeckListTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    public void contains_nullCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.contains(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    public void contains_cardNotInList_returnsFalse() {","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(uniqueCardList.contains(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    public void contains_cardInList_returnsTrue() {","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(uniqueCardList.contains(LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    public void contains_cardWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        Card editedLoop \u003d new CardBuilder(LOOP).withTag(VALID_TAG_MEDIUM).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        assertTrue(uniqueCardList.contains(editedLoop));","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"    public void add_nullCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.add(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"    public void add_duplicateCard_throwsDuplicateCardException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.add(LOOP));","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"    public void setCard_nullTargetCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(null, LOOP));","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"    public void setCard_nullEditedCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(LOOP, null));","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"    public void setCard_targetCardNotInList_throwsCardNotFoundException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(CardNotFoundException.class, () -\u003e uniqueCardList.setCard(LOOP, LOOP));","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"    public void setCard_editedCardIsSameCard_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.setCard(LOOP, LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        expectedUniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"    public void setCard_editedCardHasSameIdentity_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"        Card editedGravity \u003d new CardBuilder(LOOP).withAnswer(VALID_ANSWER_GRAVITY).withTag(VALID_TAG_HARD)","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"        uniqueCardList.setCard(LOOP, editedGravity);","lastModifiedDate":"2023-03-19"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"HJ-PRK"},"content":"        expectedUniqueCardList.add(editedGravity);","lastModifiedDate":"2023-03-19"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"HJ-PRK"},"content":"    public void setCard_editedCardHasDifferentIdentity_success() {","lastModifiedDate":"2023-03-19"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.setCard(LOOP, PHOTOSYNTHESIS);","lastModifiedDate":"2023-03-17"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"ruiyigan"},"content":"        expectedUniqueCardList.add(PHOTOSYNTHESIS);","lastModifiedDate":"2023-03-17"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"    public void setCard_editedCardHasNonUniqueIdentity_throwsDuplicateCardException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(PHOTOSYNTHESIS);","lastModifiedDate":"2023-03-17"},{"lineNumber":109,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.setCard(LOOP, PHOTOSYNTHESIS));","lastModifiedDate":"2023-03-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"HJ-PRK"},"content":"    public void remove_nullCard_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.remove(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"HJ-PRK"},"content":"    public void remove_cardDoesNotExist_throwsCardNotFoundException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(CardNotFoundException.class, () -\u003e uniqueCardList.remove(LOOP));","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"HJ-PRK"},"content":"    public void remove_existingCard_removesCard() {","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":125,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.remove(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"HJ-PRK"},"content":"    public void setCards_nullUniqueCardList_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":132,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((UniqueCardList) null));","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"HJ-PRK"},"content":"    public void setCards_uniqueCardList_replacesOwnListWithProvidedUniqueCardList() {","lastModifiedDate":"2023-03-19"},{"lineNumber":137,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":138,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"ruiyigan"},"content":"        expectedUniqueCardList.add(PHOTOSYNTHESIS);","lastModifiedDate":"2023-03-17"},{"lineNumber":140,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.setCards(expectedUniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"HJ-PRK"},"content":"    public void setCards_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((List\u003cCard\u003e) null));","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"HJ-PRK"},"content":"    public void setCards_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-03-19"},{"lineNumber":151,"author":{"gitId":"ruiyigan"},"content":"        uniqueCardList.add(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":152,"author":{"gitId":"ruiyigan"},"content":"        List\u003cCard\u003e cardList \u003d Collections.singletonList(PHOTOSYNTHESIS);","lastModifiedDate":"2023-03-17"},{"lineNumber":153,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.setCards(cardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"ruiyigan"},"content":"        expectedUniqueCardList.add(PHOTOSYNTHESIS);","lastModifiedDate":"2023-03-17"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"HJ-PRK"},"content":"    public void setCards_listWithDuplicateCards_throwsDuplicateCardException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":161,"author":{"gitId":"ruiyigan"},"content":"        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(LOOP, LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":162,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.setCards(listWithDuplicateCards));","lastModifiedDate":"2023-03-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"            -\u003e uniqueCardList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"ruiyigan":29,"unfazing":23,"-":84,"HJ-PRK":34}},{"path":"src/test/java/seedu/address/model/deck/DeckContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.model.deck;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import java.util.List;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"public class DeckContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    public void equals() {","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        DeckContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"                new DeckContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        DeckContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"                new DeckContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        DeckContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"                new DeckContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-24"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-24"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-03-24"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        // different deck -\u003e returns false","lastModifiedDate":"2023-03-24"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    public void test_deckContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        // One keyword","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        DeckContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"                new DeckContainsKeywordsPredicate(Collections.singletonList(\"science\"));","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(predicate.test(new Deck(\"Science\")));","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        // Multiple keywords","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        predicate \u003d new DeckContainsKeywordsPredicate(Arrays.asList(\"social\", \"studies\"));","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(predicate.test(new Deck(\"Social Studies\")));","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"        // Only one matching keyword","lastModifiedDate":"2023-03-24"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        predicate \u003d new DeckContainsKeywordsPredicate(Arrays.asList(\"asian\", \"studies\"));","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(predicate.test(new Deck(\"Asian History\")));","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        // Mixed-case keyword","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        predicate \u003d new DeckContainsKeywordsPredicate(Arrays.asList(\"sCienCE\"));","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(predicate.test(new Deck(\"Science\")));","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"    public void test_deckDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-03-24"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        // Zero keywords","lastModifiedDate":"2023-03-24"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"        DeckContainsKeywordsPredicate predicate \u003d new DeckContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-24"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(predicate.test(new Deck(\"Science\")));","lastModifiedDate":"2023-03-24"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-03-24"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        predicate \u003d new DeckContainsKeywordsPredicate(Arrays.asList(\"Math\"));","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(predicate.test(new Deck(\"Science\")));","lastModifiedDate":"2023-03-24"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"ruiyigan":73}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2017-12-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import java.util.List;","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"        // valid tag name","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"        List\u003cString\u003e validTagNameTestList \u003d List.of(\"easy\", \"medium\", \"hard\", \"easY\", \"MediUm\", \"HARD\");","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"        for (String name : validTagNameTestList) {","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"            assertTrue(Tag.isValidTagName(name));","lastModifiedDate":"2023-03-26"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"        // invalid tag name","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"        assertFalse(Tag.isValidTagName(\"random\"));","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"        assertFalse(Tag.isValidTagName(\"easyyy\"));","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        assertFalse(Tag.isValidTagName(\"easy medium\"));","lastModifiedDate":"2023-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"rockman007372":15,"-":20}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedCardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.storage.JsonAdaptedCard.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.VARIABLE;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"public class JsonAdaptedCardTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"    private static final String INVALID_QUESTION \u003d \" \";","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    private static final String INVALID_ANSWER \u003d \" \";","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    private static final String INVALID_TAG \u003d \"#Hard\";","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"    private static final String VALID_QUESTION \u003d VARIABLE.getQuestion().toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"    private static final String VALID_ANSWER \u003d VARIABLE.getAnswer().toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    private static final String VALID_TAG \u003d VARIABLE.getTagName();","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"    private static final String VALID_DECK \u003d VARIABLE.getDeck().toString();","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"    public void toModelType_validCardDetails_returnsCard() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"        JsonAdaptedCard card \u003d new JsonAdaptedCard(VARIABLE);","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(VARIABLE, card.toModelType());","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"    public void toModelType_invalidQuestion_throwsIllegalValueException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"        JsonAdaptedCard card \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"                new JsonAdaptedCard(INVALID_QUESTION, VALID_ANSWER, VALID_TAG, VALID_DECK);","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    public void toModelType_nullQuestion_throwsIllegalValueException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard card \u003d new JsonAdaptedCard(null, VALID_ANSWER, VALID_TAG, VALID_DECK);","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    public void toModelType_invalidAnswer_throwsIllegalValueException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        JsonAdaptedCard card \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"                new JsonAdaptedCard(VALID_QUESTION, INVALID_ANSWER, VALID_TAG, VALID_DECK);","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"    public void toModelType_nullAnswer_throwsIllegalValueException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard card \u003d new JsonAdaptedCard(VALID_QUESTION, null, VALID_TAG, VALID_DECK);","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"        JsonAdaptedCard card \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"                new JsonAdaptedCard(VALID_QUESTION, VALID_ANSWER, INVALID_TAG, VALID_DECK);","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalValueException.class, card::toModelType);","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ruiyigan":9,"unfazing":7,"-":30,"HJ-PRK":20}},{"path":"src/test/java/seedu/address/storage/JsonMasterDeckStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.testutil.TypicalCards.GRAVITY;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.LOOP;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.SMOG;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"public class JsonMasterDeckStorageTest {","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMasterDeckStorageTest\");","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public void readMasterDeck_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e readMasterDeck(null));","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    private java.util.Optional\u003cReadOnlyMasterDeck\u003e readMasterDeck(String filePath) throws Exception {","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"        return new JsonMasterDeckStorage(Paths.get(filePath)).readMasterDeck(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        assertFalse(readMasterDeck(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMasterDeck(\"notJsonFormatMasterDeck.json\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"    public void readMasterDeck_invalidCardMasterDeck_throwDataConversionException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMasterDeck(\"invalidCardMasterDeck.json\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"    //    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"    //    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"    //        assertThrows(DataConversionException.class, ()","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"    //        -\u003e readAddressBook(\"invalidAndValidCardMasterDeck.json\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"    //    }","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"    public void readAndSaveMasterDeck_allInOrder_success() throws Exception {","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"        Path filePath \u003d testFolder.resolve(\"TempMasterDeck.json\");","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        MasterDeck original \u003d getTypicalMasterDeck();","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"        JsonMasterDeckStorage jsonMasterDeckStorage \u003d new JsonMasterDeckStorage(filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"rockman007372"},"content":"        jsonMasterDeckStorage.saveMasterDeck(original, filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"rockman007372"},"content":"        ReadOnlyMasterDeck readBack \u003d jsonMasterDeckStorage.readMasterDeck(filePath).get();","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(readBack));","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        original.addCard(SMOG);","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        original.removeCard(LOOP);","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"        jsonMasterDeckStorage.saveMasterDeck(original, filePath);","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"rockman007372"},"content":"        readBack \u003d jsonMasterDeckStorage.readMasterDeck(filePath).get();","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(readBack));","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"        original.addCard(GRAVITY);","lastModifiedDate":"2023-03-18"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"        jsonMasterDeckStorage.saveMasterDeck(original); // file path not specified","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"rockman007372"},"content":"        readBack \u003d jsonMasterDeckStorage.readMasterDeck().get(); // file path not specified","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(readBack));","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"HJ-PRK"},"content":"    public void saveMasterDeck_nullMasterDeck_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveMasterDeck(null, \"SomeFile.json\"));","lastModifiedDate":"2023-03-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"     * Saves {@code masterDeck} at the specified {@code filePath}.","lastModifiedDate":"2023-03-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"    private void saveMasterDeck(ReadOnlyMasterDeck masterDeck, String filePath) {","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"rockman007372"},"content":"            new JsonMasterDeckStorage(Paths.get(filePath))","lastModifiedDate":"2023-03-18"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"                    .saveMasterDeck(masterDeck, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-03-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"HJ-PRK"},"content":"    public void saveMasterDeck_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveMasterDeck(new MasterDeck(), null));","lastModifiedDate":"2023-03-17"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"rockman007372":11,"ruiyigan":19,"-":66,"HJ-PRK":15}},{"path":"src/test/java/seedu/address/storage/JsonSerializableMasterDeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.testutil.TypicalCards;","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"public class JsonSerializableMasterDeckTest {","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"            .get(\"src\", \"test\", \"data\", \"JsonSerializableMasterDeckTest\");","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    private static final Path TYPICAL_CARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCardsMasterDeck.json\");","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    private static final Path INVALID_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCardMasterDeck.json\");","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"    private static final Path DUPLICATE_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCardMasterDeck.json\");","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    private static final Path MISSING_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingDeckMasterDeck.json\");","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public void toModelType_typicalCardsFile_success() throws Exception {","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"        JsonSerializableMasterDeck dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CARDS_FILE,","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"                JsonSerializableMasterDeck.class).get();","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck masterDeckFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck typicalCardMasterDeck \u003d TypicalCards.getTypicalMasterDeck();","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(masterDeckFromFile, typicalCardMasterDeck);","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"    public void toModelType_invalidCardFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        JsonSerializableMasterDeck dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CARD_FILE,","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"                JsonSerializableMasterDeck.class).get();","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    public void toModelType_duplicateCards_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"        JsonSerializableMasterDeck dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CARD_FILE,","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"                JsonSerializableMasterDeck.class).get();","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableMasterDeck.MESSAGE_DUPLICATE_CARD,","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"    @Test","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"    public void toModelType_cardExistsWithoutDeck_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"        JsonSerializableMasterDeck dataFromFile \u003d JsonUtil.readJsonFile(MISSING_DECK_FILE,","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"                JsonSerializableMasterDeck.class).get();","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableMasterDeck.MESSAGE_MISSING_DECK,","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"rockman007372":18,"ruiyigan":31,"HJ-PRK":8}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"        userPrefs.setMasterDeckFilePath(Paths.get(\"masterdeck.json\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":122,"HJ-PRK":1}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.testutil.TypicalCards.getTypicalMasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"        JsonMasterDeckStorage masterDeckStorage \u003d new JsonMasterDeckStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"        storageManager \u003d new StorageManager(masterDeckStorage, userPrefsStorage);","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"    public void masterDeckReadSave() throws Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"         * {@link JsonMasterDeckStorage} class.","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonMasterDeckStorageTest} class.","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        MasterDeck original \u003d getTypicalMasterDeck();","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        storageManager.saveMasterDeck(original);","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"        ReadOnlyMasterDeck retrieved \u003d storageManager.readMasterDeck().get();","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(retrieved));","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"    public void getMasterDeckFilePath() {","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"        assertNotNull(storageManager.getMasterDeckFilePath());","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rockman007372":4,"ruiyigan":3,"-":54,"HJ-PRK":7}},{"path":"src/test/java/seedu/address/testutil/AddCardDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.AddCardCommand.AddCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":" * A utility class to help with building AddCardDescriptor objects.","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"public class AddCardDescriptorBuilder {","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    private AddCardDescriptor descriptor;","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"    public AddCardDescriptorBuilder() {","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"        descriptor \u003d new AddCardDescriptor();","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"    public AddCardDescriptorBuilder(AddCardDescriptor descriptor) {","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"        this.descriptor \u003d new AddCardDescriptor(descriptor);","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"     * Returns an {@code AddCardDescriptor} with fields containing {@code card}\u0027s details","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    public AddCardDescriptorBuilder(Card card) {","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"        descriptor \u003d new AddCardDescriptor();","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"        descriptor.setQuestion(card.getQuestion());","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"        descriptor.setAnswer(card.getAnswer());","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setTag(card.getTag());","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"        descriptor.setDeck(card.getDeck());","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"     * Sets the {@code Question} of the {@code AddCardDescriptor} that we are building.","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    public AddCardDescriptorBuilder withQuestion(String questions) {","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"        descriptor.setQuestion(new Question(questions));","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"        return this;","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"     * Sets the {@code Answer} of the {@code AddCardDescriptor} that we are building.","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"    public AddCardDescriptorBuilder withAnswer(String answer) {","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"        descriptor.setAnswer(new Answer(answer));","lastModifiedDate":"2023-03-22"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"        return this;","lastModifiedDate":"2023-03-22"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"     * Parses the {@code tag} into a {@code Tag} and set it to the {@code AddCardDescriptor}","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"     * that we are building.","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"    public AddCardDescriptorBuilder withTag(String tag) {","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"        descriptor.setTag(new Tag(TagName.valueOf(tag.toUpperCase())));","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        return this;","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"     * Returns a AddCardDescriptor instance","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"     * @return the AddCardDescriptor instance","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"    public AddCardDescriptor build() {","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"        return descriptor;","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"rockman007372":66,"ruiyigan":4}},{"path":"src/test/java/seedu/address/testutil/CardBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" * A utility class to help with building Card objects.","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"public class CardBuilder {","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    public static final String DEFAULT_QUESTION \u003d \"What is a default question\";","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    public static final String DEFAULT_ANSWER \u003d \"A default question is a standard, \"","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"            + \"common question used to provide basic information or understanding\";","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"    public static final TagName DEFAULT_TAG \u003d TagName.HARD;","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public static final String DEFAULT_DECK \u003d \"Default\";","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    private Question question;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    private Answer answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    private Tag tag;","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    private Deck deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"    private boolean isFlipped;","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"     * Creates a {@code CardBuilder} with the default details.","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public CardBuilder() {","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        question \u003d new Question(DEFAULT_QUESTION);","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        answer \u003d new Answer(DEFAULT_ANSWER);","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        tag \u003d new Tag(DEFAULT_TAG);","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"        deck \u003d new Deck(DEFAULT_DECK);","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"        isFlipped \u003d true;","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"     * Initializes the CardBuilder with the data of {@code cardToCopy}.","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    public CardBuilder(Card cardToCopy) {","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        question \u003d cardToCopy.getQuestion();","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        answer \u003d cardToCopy.getAnswer();","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        tag \u003d cardToCopy.getTag();","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        deck \u003d cardToCopy.getDeck();","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"rockman007372"},"content":"        isFlipped \u003d cardToCopy.isFlipped();","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"     * Sets the {@code Question} of the {@code Card} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    public CardBuilder withQuestion(String question) {","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        this.question \u003d new Question(question);","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Tag} of the {@code Card} that we are building.","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"    public CardBuilder withTag(String tagName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"        this.tag \u003d new Tag(TagName.valueOf(tagName.toUpperCase()));","lastModifiedDate":"2023-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"     * Sets the {@code Answer} of the {@code Card} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"    public CardBuilder withAnswer(String answer) {","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        this.answer \u003d new Answer(answer);","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Deck} of the {@code Card} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"    public CardBuilder withDeck(String deckName) {","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"        this.deck \u003d new Deck(deckName);","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"     * Sets the flip attribute of the card we are building.","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"rockman007372"},"content":"    public CardBuilder withFlipAttribute(boolean isFlipped) {","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"rockman007372"},"content":"        this.isFlipped \u003d isFlipped;","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"rockman007372"},"content":"        return this;","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"rockman007372"},"content":"     * Builds the card.","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"rockman007372"},"content":"     * @return the card built.","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"    public Card build() {","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"rockman007372"},"content":"        Card toBuild \u003d new Card(question, answer, tag, deck);","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"rockman007372"},"content":"        return new Card(toBuild, isFlipped);","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"rockman007372":24,"ruiyigan":30,"unfazing":11,"-":34}},{"path":"src/test/java/seedu/address/testutil/CardUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.AddCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":" * A utility class for Card.","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"public class CardUtil {","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"     * Returns an add command string for adding the {@code card}.","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public static String getAddCommand(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        return AddCardCommand.COMMAND_WORD + \" \" + getCardDetails(card);","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"     * Returns the part of command string for the given {@code card}\u0027s details.","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public static String getCardDetails(Card card) {","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        sb.append(PREFIX_QUESTION + card.getQuestion().question + \" \");","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        sb.append(PREFIX_ANSWER + card.getAnswer().answer + \" \");","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        sb.append(PREFIX_TAG + card.getTagName() + \" \");","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"     * Returns the part of command string for the given {@code EditCardDescriptor}\u0027s details.","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"    public static String getEditCardDescriptorDetails(EditCardDescriptor descriptor) {","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"        descriptor.getQuestion().ifPresent(question -\u003e sb.append(PREFIX_QUESTION)","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"                .append(question.question).append(\" \"));","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer.answer).append(\" \"));","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        descriptor.getTag().ifPresent(tag -\u003e sb.append(PREFIX_TAG).append(tag.tagName).append(\" \"));","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"ruiyigan":13,"unfazing":6,"-":24,"HJ-PRK":3}},{"path":"src/test/java/seedu/address/testutil/EditCardDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.cardcommands.EditCardCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"import seedu.address.model.tag.Tag.TagName;","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":" * A utility class to help with building EditCardDescriptor objects.","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"public class EditCardDescriptorBuilder {","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    private EditCardCommand.EditCardDescriptor descriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    public EditCardDescriptorBuilder() {","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        descriptor \u003d new EditCardCommand.EditCardDescriptor();","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    public EditCardDescriptorBuilder(EditCardCommand.EditCardDescriptor descriptor) {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        this.descriptor \u003d new EditCardCommand.EditCardDescriptor(descriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"     * Returns an {@code EditCardDescriptor} with fields containing {@code card}\u0027s details","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public EditCardDescriptorBuilder(Card card) {","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        descriptor \u003d new EditCardDescriptor();","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setQuestion(card.getQuestion());","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setAnswer(card.getAnswer());","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setTag(card.getTag());","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Question} of the {@code EditCardDescriptor} that we are building.","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"    public EditCardDescriptorBuilder withQuestion(String question) {","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setQuestion(new Question(question));","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Answer} of the {@code EditCardDescriptor} that we are building.","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public EditCardDescriptorBuilder withAnswer(String answer) {","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setAnswer(new Answer(answer));","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Tag} of the {@code EditCardDescriptor} that we are building.","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"    public EditCardDescriptorBuilder withTag(String tagName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"        descriptor.setTag(new Tag(TagName.valueOf(tagName.toUpperCase())));","lastModifiedDate":"2023-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"     * Sets the {@code Deck} of the {@code EditCardDescriptor} that we are building.","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"rockman007372"},"content":"    public EditCardDescriptorBuilder withDeck(Deck deck) {","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"rockman007372"},"content":"        descriptor.setDeck(deck);","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"rockman007372"},"content":"        return this;","lastModifiedDate":"2023-03-23"},{"lineNumber":68,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":69,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"    public EditCardCommand.EditCardDescriptor build() {","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"rockman007372":12,"ruiyigan":24,"unfazing":3,"-":34}},{"path":"src/test/java/seedu/address/testutil/MasterDeckBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":" * A utility class to help with building MasterDeck objects.","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":" *     {@code Deck ab \u003d new MasterDeckBuilder().withCard(\"What is 1 + 1\", \"2\").build();}","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"public class MasterDeckBuilder {","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    private MasterDeck masterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    public MasterDeckBuilder() {","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"        masterDeck \u003d new MasterDeck();","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    public MasterDeckBuilder(MasterDeck masterDeck) {","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        this.masterDeck \u003d masterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"     * Adds a new {@code Card} to the {@code Deck} that we are building.","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public MasterDeckBuilder withCard(Card card) {","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        masterDeck.addCard(card);","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        return this;","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public MasterDeck build() {","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        return masterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"ruiyigan":34}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"     * Returns the middle index of the card in the {@code model}\u0027s card list.","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        return Index.fromOneBased(model.getFilteredCardList().size() / 2);","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"     * Returns the last index of the card in the {@code model}\u0027s card list.","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"        return Index.fromOneBased(model.getFilteredCardList().size());","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"     * Returns the card in the {@code model}\u0027s card list at {@code index}.","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"    public static Card getCard(Model model, Index index) {","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        return model.getFilteredCardList().get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ruiyigan":1,"unfazing":7,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalCards.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GRAVITY;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_SCIENCE;","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GRAVITY;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_PHOTOSYNTHESIS;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HARD;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDIUM;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import java.util.List;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":" * A utility class containing a list of {@code Card} objects to be used in tests.","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"public class TypicalCards {","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    public static final Card LOOP \u003d new CardBuilder().withQuestion(\"What is a loop\")","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"A construct that repeats instructions until a condition is met\")","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"            .withTag(\"Hard\").withDeck(\"Programming Concepts\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public static final Card VARIABLE \u003d new CardBuilder().withQuestion(\"What is a variable\")","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"A named memory location that stores a value\")","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"            .withTag(\"Hard\").withDeck(\"Programming Concepts\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    public static final Card ATOM \u003d new CardBuilder().withQuestion(\"What is the structure of an atom\")","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"Atoms consist of a nucleus containing protons and neutrons\"","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"                    + \", surrounded by electrons in shells or energy levels\")","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"            .withTag(\"Untagged\").withDeck(\"Science\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    public static final Card LIFE \u003d new CardBuilder().withQuestion(\"What is the basic unit of life\")","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"The cell is the basic unit of life\").withTag(\"Medium\")","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"Science\").build();","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"    public static final Card PRESIDENT \u003d new CardBuilder()","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"            .withQuestion(\"Who was the first president of the United States\")","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"George Washington\")","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"            .withTag(\"Untagged\").withDeck(\"History\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    public static final Card INDEPENDENCE \u003d new CardBuilder().withQuestion(\"When did Singapore gain independence\")","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"9 August 1965\").withTag(\"Untagged\")","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"History\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    public static final Card EARTHQUAKE \u003d new CardBuilder().withQuestion(\"What is an earthquake\")","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"An earthquake is a sudden and rapid shaking \"","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"                    + \"of the earth caused by the shifting of tectonic plates\")","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"            .withTag(\"Untagged\")","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"Geography\").build();","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    // Manually added","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"    public static final Card SMOG \u003d new CardBuilder().withQuestion(\"What is smog\")","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"A mixture of smoke and fog, caused by pollutants in the atmosphere\")","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"Geography\").build();","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    public static final Card FRACTION \u003d new CardBuilder().withQuestion(\"What is a fraction\")","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(\"A part of a whole expressed as a ratio of two numbers\")","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"Math\").build();","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"    // Manually added - Card\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"    public static final Card GRAVITY \u003d new CardBuilder().withQuestion(VALID_QUESTION_GRAVITY)","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(VALID_ANSWER_GRAVITY).withTag(VALID_TAG_MEDIUM).withDeck(VALID_DECK_SCIENCE).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"    public static final Card PHOTOSYNTHESIS \u003d new CardBuilder().withQuestion(VALID_QUESTION_PHOTOSYNTHESIS)","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"            .withAnswer(VALID_ANSWER_PHOTOSYNTHESIS).withTag(VALID_TAG_HARD)","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(VALID_DECK_SCIENCE)","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"            .build();","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"    private TypicalCards() {} // prevents instantiation","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"     * Returns an {@code Deck} with all the typical cards.","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"    public static MasterDeck getTypicalMasterDeck() {","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"rockman007372"},"content":"        MasterDeck masterDeck \u003d new MasterDeck();","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        for (Card card : getTypicalCards()) {","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"rockman007372"},"content":"            masterDeck.addCard(card);","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"rockman007372"},"content":"        masterDeck.initDecks();","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"rockman007372"},"content":"        return masterDeck;","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"    public static List\u003cCard\u003e getTypicalCards() {","lastModifiedDate":"2023-03-17"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(LOOP, VARIABLE, ATOM, LIFE, PRESIDENT, INDEPENDENCE, EARTHQUAKE));","lastModifiedDate":"2023-03-17"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"rockman007372":4,"ruiyigan":78,"unfazing":2}},{"path":"src/test/java/seedu/address/testutil/TypicalDecks.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import java.util.List;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":" * A utility class containing a list of {@code Deck} objects to be used in tests.","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"public class TypicalDecks {","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    public static final Deck VALID_DECK_HISTORY \u003d new Deck(\"History\");","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    public static final Deck VALID_DECK_SCIENCE \u003d new Deck(\"Science\");","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    private TypicalDecks() {} // prevents instantiation","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    public static List\u003cDeck\u003e getTypicalDecks() {","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(VALID_DECK_HISTORY, VALID_DECK_SCIENCE));","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"ruiyigan":21}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"ruiyigan":3,"-":9}}]
