[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"## Product name: PowerCards","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"1. Main Screen - add new flashcards or decks, edit existing flashcards or decks","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"2. Review Screen - study a particular masterDeck of cards","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"### Target user profile: University Students","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"### Value proposition: ","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"- Enable users to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"- The application will present the question to the user which the user can respond to with their guess. ","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"- The application can track the learning of the user through the number of errors made.","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"# Links","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"- [About Us](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/docs/AboutUs.md)","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"- [Developer Guide](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/docs/DeveloperGuide.md)","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"- [User Guide](https://github.com/AY2223S2-CS2103T-W11-3/tp/blob/master/docs/UserGuide.md)","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"# Acknowledgements","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"- This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"ruiyigan":10,"unfazing":4,"-":6,"HJ-PRK":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"### Rui Yi Gan","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/ruiyigan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"[[homepage](https://sg.linkedin.com/in/rui-yi-gan)]","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"[[github](https://github.com/ruiyigan)]","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"[[portfolio](team/ruiyigan.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Role: Project Advisor","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"### Lian Kok Hai","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/unfazing.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"[[homepage](https://liankokhai.com)]","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/unfazing)]","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"[[portfolio](team/unfazing.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"### Park Hyunjin","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/hj-prk.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/HJ-PRK] ","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"[[portfolio](team/hj-prk.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"### Tran Hieu Nghia","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/rockman007372.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/rockman007372)]","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"[[portfolio](team/rockman007372.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":"### Bryan Juniano","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"junianob"},"content":"\u003cimg src\u003d\"images/junianob.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"[[github](http://github.com/junianob)]","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"junianob"},"content":"[[portfolio](team/junianob.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"junianob":22,"-":39}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a card).","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"unfazing"},"content":"Step 2. The user executes `delete 5` command to delete the 5th card in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2023-03-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"unfazing"},"content":"Step 3. The user executes `add n/David …​` to add a new card. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2023-03-10"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"unfazing"},"content":"Step 4. The user now decides that adding the card was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"unfazing"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the card being deleted).","lastModifiedDate":"2023-03-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"HJ-PRK"},"content":"* Needs to study a group of terms and definitions efficiently","lastModifiedDate":"2023-03-05"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"HJ-PRK"},"content":"**Value proposition**: study various topics using flashcards on the desktop","lastModifiedDate":"2023-03-05"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"HJ-PRK"},"content":"| **`Epic`** | **user**                                  | **manage PowerCards**\t\t       | \t\t\t\t                                                                |","lastModifiedDate":"2023-03-05"},{"lineNumber":277,"author":{"gitId":"HJ-PRK"},"content":"| `* * *`  | user                                       | create a new PowerCard with a question and answer pair               |                                  |","lastModifiedDate":"2023-03-05"},{"lineNumber":278,"author":{"gitId":"HJ-PRK"},"content":"| `* *`  | user                                         | search for PowerCards using keywords in the questions                |                                  |","lastModifiedDate":"2023-03-05"},{"lineNumber":279,"author":{"gitId":"HJ-PRK"},"content":"| `* *`  | user                                         | rewrite the question or the answer in the PowerCard                  | \t\t\t\t\t\t                      |","lastModifiedDate":"2023-03-05"},{"lineNumber":280,"author":{"gitId":"HJ-PRK"},"content":"| **`Epic`**  | **user**                                | **group PowerCards into decks of the same topic**                    | \t\t\t\t                          |","lastModifiedDate":"2023-03-05"},{"lineNumber":281,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user                                        | set the name of a masterDeck                                               | \t                                |","lastModifiedDate":"2023-03-11"},{"lineNumber":282,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | list all decks I have created     |\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":283,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | list all the PowerCards in a masterDeck |\t\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":284,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | add PowerCards in a masterDeck\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":285,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | remove PowerCards in a masterDeck\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":286,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | rename a masterDeck\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":287,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | delete a masterDeck\t\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":288,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | add the description of each masterDeck\t\t | I can check later what this masterDeck is about.\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":289,"author":{"gitId":"HJ-PRK"},"content":"| **`Epic`**    | **user**                                       | **review decks of PowerCards** | \t\t\t\t               |","lastModifiedDate":"2023-03-05"},{"lineNumber":290,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | review a single masterDeck of PowerCards           | I can test my knowledge of the topic\t                                               |","lastModifiedDate":"2023-03-11"},{"lineNumber":291,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | mark a flash card to be correct / wrong during review          | \t\t\t\t                                   |","lastModifiedDate":"2023-03-05"},{"lineNumber":292,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | review multiple decks of PowerCards          | I can test my knowledge of multiple topics                                    |","lastModifiedDate":"2023-03-05"},{"lineNumber":293,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | see how many PowerCards I have left to review in one masterDeck          | \t\t                                   |","lastModifiedDate":"2023-03-11"},{"lineNumber":294,"author":{"gitId":"HJ-PRK"},"content":"| **`Epic`**    | **user**                                       | **keep track of how effective my learning has been** | \t\t\t\t               |","lastModifiedDate":"2023-03-05"},{"lineNumber":295,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | record the number of questions I got right\t | I can see my progress\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":296,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | see which are the PowerCards I struggle with / succeed at\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":297,"author":{"gitId":"HJ-PRK"},"content":"| `*` | user | see which topics (decks) I am stronger / weaker in\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":298,"author":{"gitId":"HJ-PRK"},"content":"| `*` | user | see how many times I have reviewed a PowerCard or masterDeck\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":299,"author":{"gitId":"HJ-PRK"},"content":"| `*` | user | see how long I spent on each question during review\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":300,"author":{"gitId":"HJ-PRK"},"content":"| `*` | user | revise PowerCards that I got wrong for\t\t | I can see what I’m weak at\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":301,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | reset the statistics\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":302,"author":{"gitId":"HJ-PRK"},"content":"| **`Epic`**    | **user**                                       | **share and receive decks from my friends** | \t\t\t\t               |","lastModifiedDate":"2023-03-05"},{"lineNumber":303,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | import decks from other users.          | \t\t\t\t                                   |","lastModifiedDate":"2023-03-05"},{"lineNumber":304,"author":{"gitId":"HJ-PRK"},"content":"| `* * *` | user | export decks for other users.         | \t\t\t\t                                   |","lastModifiedDate":"2023-03-05"},{"lineNumber":305,"author":{"gitId":"HJ-PRK"},"content":"| **`Epic`**    | **user**                                       | **undo and redo changes I make** | \t\t\t\t               |","lastModifiedDate":"2023-03-05"},{"lineNumber":306,"author":{"gitId":"HJ-PRK"},"content":"| `*` | user | retrieve a masterDeck or flash card should I accidentally delete a PowerCard or masterDeck\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-11"},{"lineNumber":307,"author":{"gitId":"HJ-PRK"},"content":"| `*` | user | redo changes that I had undone.\t |\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":308,"author":{"gitId":"HJ-PRK"},"content":"| **`Epic`**    | **user**                                       | **adjust the frequency of certain PowerCards appearing based on my input** | \t\t\t\t               |","lastModifiedDate":"2023-03-05"},{"lineNumber":309,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | tag PowerCards that are hard\t | they will appear more frequently\t\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":310,"author":{"gitId":"HJ-PRK"},"content":"| `* *` | user | tag PowerCards that are easy\t | they will appear less frequently\t\t\t\t|","lastModifiedDate":"2023-03-05"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"rockman007372"},"content":"For all use cases below, the **System** is the `Powercard` and the **Actor** is the `user`, unless specified otherwise.","lastModifiedDate":"2023-03-11"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"rockman007372"},"content":"**Use case: UC1 - Add a powerdeck**","lastModifiedDate":"2023-03-11"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":321,"author":{"gitId":"rockman007372"},"content":"1. User requests to create a new deck with a specified name.","lastModifiedDate":"2023-03-11"},{"lineNumber":322,"author":{"gitId":"rockman007372"},"content":"2. System creates a new deck with the given name.","lastModifiedDate":"2023-03-11"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"rockman007372"},"content":"**Use case: UC2 - Add a powercard**","lastModifiedDate":"2023-03-11"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":329,"author":{"gitId":"rockman007372"},"content":"1. User chooses a deck to add powercard to.","lastModifiedDate":"2023-03-11"},{"lineNumber":330,"author":{"gitId":"rockman007372"},"content":"2. System enters the chosen deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":331,"author":{"gitId":"rockman007372"},"content":"3. User enters the question and answer details for the card.","lastModifiedDate":"2023-03-11"},{"lineNumber":332,"author":{"gitId":"rockman007372"},"content":"4. System adds the card to the chosen deck.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":333,"author":{"gitId":"rockman007372"},"content":"   Steps 3-4 are repeated for as many times as required until the User finishes adding more cards to the deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"rockman007372"},"content":"**Use case: UC3 - Delete a powercard**","lastModifiedDate":"2023-03-11"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":339,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":341,"author":{"gitId":"rockman007372"},"content":"1.  User requests to enter a specific deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":342,"author":{"gitId":"rockman007372"},"content":"2.  System shows a list of powercards inside the chosen deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":343,"author":{"gitId":"rockman007372"},"content":"3.  User requests to delete a specific powercard in the deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":344,"author":{"gitId":"rockman007372"},"content":"4.  System deletes the powercard.","lastModifiedDate":"2023-03-11"},{"lineNumber":345,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":346,"author":{"gitId":"HJ-PRK"},"content":"Use case ends.","lastModifiedDate":"2023-03-05"},{"lineNumber":347,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":348,"author":{"gitId":"rockman007372"},"content":"**Extensions:**","lastModifiedDate":"2023-03-11"},{"lineNumber":349,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":350,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2a. The list is empty.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":351,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends.","lastModifiedDate":"2023-03-11"},{"lineNumber":352,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":353,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a. The given index is invalid.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":354,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a1. System shows an error message.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":355,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case resumes at step 2","lastModifiedDate":"2023-03-11"},{"lineNumber":356,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":357,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":358,"author":{"gitId":"rockman007372"},"content":"**Use case: UC4 - Find a powercard**","lastModifiedDate":"2023-03-11"},{"lineNumber":359,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":360,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":361,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":362,"author":{"gitId":"rockman007372"},"content":"1. User requests to find powercards containing a certain string in the question.","lastModifiedDate":"2023-03-11"},{"lineNumber":363,"author":{"gitId":"rockman007372"},"content":"2. System shows a list of cards matching the query.","lastModifiedDate":"2023-03-11"},{"lineNumber":364,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":365,"author":{"gitId":"HJ-PRK"},"content":"Use case ends.","lastModifiedDate":"2023-03-05"},{"lineNumber":366,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":367,"author":{"gitId":"rockman007372"},"content":"**Extensions:**","lastModifiedDate":"2023-03-11"},{"lineNumber":368,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":369,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2a. There are no powercards the match the query.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":370,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends.","lastModifiedDate":"2023-03-11"},{"lineNumber":371,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":372,"author":{"gitId":"rockman007372"},"content":"**Use case: UC5 - Review  a deck**","lastModifiedDate":"2023-03-11"},{"lineNumber":373,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":374,"author":{"gitId":"rockman007372"},"content":"**MSS:**","lastModifiedDate":"2023-03-11"},{"lineNumber":375,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":376,"author":{"gitId":"HJ-PRK"},"content":"1. User requests to review a particular deck","lastModifiedDate":"2023-03-05"},{"lineNumber":377,"author":{"gitId":"rockman007372"},"content":"2. Application shows a random, non-repeating card in the deck","lastModifiedDate":"2023-03-11"},{"lineNumber":378,"author":{"gitId":"rockman007372"},"content":"3. User attempts to answer the question in the card.","lastModifiedDate":"2023-03-11"},{"lineNumber":379,"author":{"gitId":"rockman007372"},"content":"4. Application reveals the answer to the powercard.","lastModifiedDate":"2023-03-11"},{"lineNumber":380,"author":{"gitId":"rockman007372"},"content":"5. User self-grades question as easy/medium/difficult.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":381,"author":{"gitId":"rockman007372"},"content":"   Repeat step 2-5 until all powercards in deck have been exhausted.","lastModifiedDate":"2023-03-11"},{"lineNumber":382,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":383,"author":{"gitId":"HJ-PRK"},"content":"Use case ends.","lastModifiedDate":"2023-03-05"},{"lineNumber":384,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":385,"author":{"gitId":"rockman007372"},"content":"**Extensions:**","lastModifiedDate":"2023-03-11"},{"lineNumber":386,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":387,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1a. There are no decks with the name requested by the user.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":388,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends","lastModifiedDate":"2023-03-11"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a. User decides to end the review early.  ","lastModifiedDate":"2023-03-11"},{"lineNumber":391,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. User requests to end the review session  ","lastModifiedDate":"2023-03-11"},{"lineNumber":392,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a2. Powercard ends the session and brings the user back to default area  ","lastModifiedDate":"2023-03-11"},{"lineNumber":393,"author":{"gitId":"rockman007372"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends","lastModifiedDate":"2023-03-11"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"HJ-PRK"},"content":"2.  Should be able to hold up to 1000 Powercards without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2023-03-05"},{"lineNumber":400,"author":{"gitId":"HJ-PRK"},"content":"3. A Powercard should load when prompted without any noticeable lag","lastModifiedDate":"2023-03-05"},{"lineNumber":401,"author":{"gitId":"HJ-PRK"},"content":"4. Every command should provide a response within 2 seconds","lastModifiedDate":"2023-03-05"},{"lineNumber":402,"author":{"gitId":"HJ-PRK"},"content":"5. The Powercard program is not expected to determine the correctness of the user’s response","lastModifiedDate":"2023-03-05"},{"lineNumber":403,"author":{"gitId":"HJ-PRK"},"content":"6. A Powercard should be easily added/deleted in less than 3 commands after opening the program","lastModifiedDate":"2023-03-05"},{"lineNumber":404,"author":{"gitId":"HJ-PRK"},"content":"7.The data stored by Powercard should be forward compatible such that old data can still be loaded in newer versions of the program","lastModifiedDate":"2023-03-05"},{"lineNumber":405,"author":{"gitId":"HJ-PRK"},"content":"8. The maximum character limit of a powercard text should be [TO BE DETERMINED]","lastModifiedDate":"2023-03-05"},{"lineNumber":406,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":409,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"HJ-PRK"},"content":"* **Deck**: A group of PowerCards (flashcards) of a specific topic","lastModifiedDate":"2023-03-05"},{"lineNumber":413,"author":{"gitId":"HJ-PRK"},"content":"*{More to be added}*","lastModifiedDate":"2023-03-05"},{"lineNumber":414,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":415,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":416,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"unfazing"},"content":"### Deleting a card","lastModifiedDate":"2023-03-10"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"unfazing"},"content":"1. Deleting a card while all cards are being shown","lastModifiedDate":"2023-03-10"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"unfazing"},"content":"   1. Prerequisites: List all cards using the `list` command. Multiple cards in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"unfazing"},"content":"      Expected: No card is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2023-03-10"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"rockman007372":45,"unfazing":9,"-":344,"HJ-PRK":71}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"PowerCards (PCs) is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, PCs can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"# Quick start","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"1. Download the latest `powercards.jar` from [here]().","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your PCs.","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar powercards.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"# Features","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"  e.g. in `add q/QUESTION`, `QUESTION` is a parameter which can be used as `add q/What is chemical symbol for Oxygen?`.","lastModifiedDate":"2023-03-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"  e.g `q/QUESTION [t/TAG]` can be used as `q/What is chemical symbol for Oxygen? t/chemistry` or as `q/What is chemical symbol for Oxygen?`.","lastModifiedDate":"2023-03-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/chemistry`, `t/chemistry t/science` etc.","lastModifiedDate":"2023-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"## Main Mode","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"Main mode will be started by default when the program is launched.","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"### Listing all Decks : `list`","lastModifiedDate":"2023-03-05"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"_**No Decks should not be selected to use this command.**_","lastModifiedDate":"2023-03-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"Shows a list of all Decks.","lastModifiedDate":"2023-03-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"Format: `list`","lastModifiedDate":"2023-03-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"### Selecting a Deck : `select`","lastModifiedDate":"2023-03-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"Selects a masterDeck. ","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"Format: `select INDEX`","lastModifiedDate":"2023-03-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-03-05"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"* `select 2`","lastModifiedDate":"2023-03-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"### Unselecting a Deck : `unselect`","lastModifiedDate":"2023-03-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"Unselects masterDeck","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"Format: `unselect`","lastModifiedDate":"2023-03-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"Examples:","lastModifiedDate":"2023-03-05"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"* `unselect`","lastModifiedDate":"2023-03-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"### Adding a Powercard: `add`","lastModifiedDate":"2023-03-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"HJ-PRK"},"content":"_**User must select a masterDeck to use this command.**_","lastModifiedDate":"2023-03-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"Adds a Powercard to the **selected** Deck.","lastModifiedDate":"2023-03-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"Format: `add q/QUESTION a/ANSWER`","lastModifiedDate":"2023-03-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"\u003c!-- \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2023-03-05"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"A card can have any number of tags (including 0)","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"\u003c/div\u003e --\u003e","lastModifiedDate":"2023-03-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"ruiyigan"},"content":"* `add q/What is chemical symbol for Oxygen? a/O`","lastModifiedDate":"2023-03-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"### Listing all Powercards : `list`","lastModifiedDate":"2023-03-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":109,"author":{"gitId":"HJ-PRK"},"content":"_**User must select a masterDeck to use this command.**_","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"ruiyigan"},"content":"Shows a list of all Powercard in the **selected** Deck.","lastModifiedDate":"2023-03-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"ruiyigan"},"content":"### Editing a Powercard : `edit`","lastModifiedDate":"2023-03-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"HJ-PRK"},"content":"_**User must select a masterDeck to use this command.**_","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":119,"author":{"gitId":"ruiyigan"},"content":"Edits an existing Powercard in a Deck.","lastModifiedDate":"2023-03-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"ruiyigan"},"content":"Format: `edit INDEX [q/QUESTION] [a/ANSWER]`","lastModifiedDate":"2023-03-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"* Edits the card at the specified `INDEX`. The index refers to the index number shown in the displayed card list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"ruiyigan"},"content":"*  `edit 1 q/What is chemical symbol for Caarbon? a/C` Edits the question and answer of the 1st Powercard to be `What is chemical symbol for Oxygen?` and `C` respectively.","lastModifiedDate":"2023-03-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"HJ-PRK"},"content":"### Reviewing a masterDeck: `review`","lastModifiedDate":"2023-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":132,"author":{"gitId":"HJ-PRK"},"content":"_**User must select a masterDeck to use this command.**_","lastModifiedDate":"2023-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"HJ-PRK"},"content":"Begins reviewing a masterDeck. ","lastModifiedDate":"2023-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":136,"author":{"gitId":"HJ-PRK"},"content":"Format: `review`","lastModifiedDate":"2023-03-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"ruiyigan"},"content":"PCs data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-03-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":150,"author":{"gitId":"ruiyigan"},"content":"PCs data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-03-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":153,"author":{"gitId":"ruiyigan"},"content":"If your changes to the data file makes its format invalid, PCs will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2023-03-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"HJ-PRK"},"content":"## Review Mode","lastModifiedDate":"2023-03-09"},{"lineNumber":161,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":162,"author":{"gitId":"HJ-PRK"},"content":"Review mode is started when `review` has been entered on the main mode.","lastModifiedDate":"2023-03-09"},{"lineNumber":163,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"HJ-PRK"},"content":"### Flipping the Powercard: `flip`","lastModifiedDate":"2023-03-09"},{"lineNumber":165,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":166,"author":{"gitId":"HJ-PRK"},"content":"Flips the Powercard to check the answer of it.","lastModifiedDate":"2023-03-09"},{"lineNumber":167,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":168,"author":{"gitId":"HJ-PRK"},"content":"Format: `flip`","lastModifiedDate":"2023-03-09"},{"lineNumber":169,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":170,"author":{"gitId":"HJ-PRK"},"content":"### Marking the Powercard as correct: `correct`","lastModifiedDate":"2023-03-09"},{"lineNumber":171,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":172,"author":{"gitId":"HJ-PRK"},"content":"Marks the current Powercard as correct.","lastModifiedDate":"2023-03-09"},{"lineNumber":173,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":174,"author":{"gitId":"HJ-PRK"},"content":"Format: `correct`","lastModifiedDate":"2023-03-09"},{"lineNumber":175,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":176,"author":{"gitId":"HJ-PRK"},"content":"### Marking the Powercard as wrong: `wrong`","lastModifiedDate":"2023-03-09"},{"lineNumber":177,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":178,"author":{"gitId":"HJ-PRK"},"content":"Marks the current PowerCard as wrong.","lastModifiedDate":"2023-03-09"},{"lineNumber":179,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":180,"author":{"gitId":"HJ-PRK"},"content":"Format: `wrong`","lastModifiedDate":"2023-03-09"},{"lineNumber":181,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":182,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"ruiyigan"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous PCs home folder.","lastModifiedDate":"2023-03-05"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"ruiyigan":37,"unfazing":2,"-":119,"HJ-PRK":38}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"ecp -\u003e ec ++: index, editCardDescriptor","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"ruiyigan":1,"-":20}},{"path":"docs/team/hj-prk.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"title: Park Hyunjin\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"### Project: PowerCards","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"* **New Feature**:  (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"* **Project management**:","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"    * User Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"        * A(To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"* **Community**:","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"* **Tools**:","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"HJ-PRK":47}},{"path":"docs/team/junianob.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"title: Bryan Juniano\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"### Project: PowerCards","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"* **Project management**:","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"    * User Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"        * A(To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"* **Community**:","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"* **Tools**:","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"junianob":46}},{"path":"docs/team/rockman007372.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"---","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"layout: page ","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"title: Tran Hieu Nghia\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"---","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"### Project: PowerCards","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-03-05"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-05"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":"* **New Feature**:  (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"* **Project management**:","lastModifiedDate":"2023-03-05"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-05"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-05"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"    * User Guide:","lastModifiedDate":"2023-03-05"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"        * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-05"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"        * A(To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":36,"author":{"gitId":"rockman007372"},"content":"* **Community**:","lastModifiedDate":"2023-03-05"},{"lineNumber":37,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"* **Tools**:","lastModifiedDate":"2023-03-05"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"    * (To be added)","lastModifiedDate":"2023-03-05"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"rockman007372":46}},{"path":"docs/team/ruiyigan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"title: Gan Rui Yi\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"### Project: PowerCards","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"* **Project management**:","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    * User Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        * A(To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"* **Community**:","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"* **Tools**:","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"    * (To be added)","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"ruiyigan":46}},{"path":"docs/team/unfazing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"---","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"layout: page","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"title: Lian Kok Hai\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"---","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"### Project: PowerCards","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"PowerCards enable university students to input a pool of information (question-answer pairs) of their desired topic and utilize the application to practice active recall of this information.","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"    * What it does: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    * Justification: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"    * Highlights: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"* **New Feature**: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"* **Code contributed**: (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"* **Project management**:","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"    * User Guide:","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        * A(To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"* **Community**:","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"* **Tools**:","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"    * (To be added)","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"unfazing":46}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":" * Changes the remark of an existing card in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"            + \": Edits the remark of the card identified \"","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"            + \"by the index number used in the last card listing. \"","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"     * @param index of the card in the filtered card list to edit the remark","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"     * @param remark of the card to be updated to","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of card data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the card’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a card.","lastModifiedDate":"2023-03-10"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"unfazing"},"content":"Create a new `Remark` in `seedu.address.model.card`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2023-03-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"unfazing"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each card.","lastModifiedDate":"2023-03-10"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2022-01-02"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"unfazing"},"content":"public PersonCard(Person card, int displayedIndex) {","lastModifiedDate":"2023-03-10"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"unfazing"},"content":"    remark.setText(card.getRemark().value);","lastModifiedDate":"2023-03-10"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"unfazing"},"content":"        Person cardToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":347,"author":{"gitId":"unfazing"},"content":"        Person editedCard \u003d new Person(","lastModifiedDate":"2023-03-10"},{"lineNumber":348,"author":{"gitId":"unfazing"},"content":"                cardToEdit.getName(), cardToEdit.getPhone(), cardToEdit.getEmail(),","lastModifiedDate":"2023-03-10"},{"lineNumber":349,"author":{"gitId":"unfazing"},"content":"                cardToEdit.getAddress(), remark, cardToEdit.getTags());","lastModifiedDate":"2023-03-10"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"unfazing"},"content":"        model.setPerson(cardToEdit, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(generateSuccessMessage(editedCard));","lastModifiedDate":"2023-03-10"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"unfazing"},"content":"     * {@code cardToEdit}.","lastModifiedDate":"2023-03-10"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"unfazing"},"content":"    private String generateSuccessMessage(Person cardToEdit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"unfazing"},"content":"        return String.format(message, cardToEdit);","lastModifiedDate":"2023-03-10"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"unfazing":19,"-":382}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.card.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"  \"cards\": [ {","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"unfazing":2,"-":110}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.address.logic.Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"A quick look at the `seedu.address.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"unfazing"},"content":"       Person cardToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":193,"author":{"gitId":"ruiyigan"},"content":"       Person editedCard \u003d createEditedPerson(cardToEdit, editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"       if (!cardToEdit.isSamePerson(editedCard) \u0026\u0026 model.hasPerson(editedCard)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"       model.setPerson(cardToEdit, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"unfazing"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCard));","lastModifiedDate":"2023-03-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"unfazing"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the card data.","lastModifiedDate":"2023-03-10"},{"lineNumber":205,"author":{"gitId":"unfazing"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ cards.\u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"unfazing"},"content":"     FYI, The \u0027filtered list\u0027 is the list of cards resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the cards so that the user can see the edited card along with all other cards. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":207,"author":{"gitId":"unfazing"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of cards is being tracked.","lastModifiedDate":"2023-03-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"unfazing"},"content":"        cards.addAll(","lastModifiedDate":"2023-03-10"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ruiyigan":1,"unfazing":9,"-":291}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Deck ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        Optional\u003cReadOnlyMasterDeck\u003e addressBookOptional;","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"        ReadOnlyMasterDeck initialData;","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleMasterDeck);","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"            initialData \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"            initialData \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Deck\");","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"unfazing"},"content":"        logger.info(\"Starting Deck \" + MainApp.VERSION);","lastModifiedDate":"2023-03-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"unfazing":7,"-":170,"HJ-PRK":6}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid\";","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ruiyigan":2,"-":11,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"     * Returns the Deck.","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"     * @see seedu.address.model.Model#getMasterDeck()","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"    ReadOnlyMasterDeck getAddressBook();","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"    ObservableList\u003cCard\u003e getFilteredPersonList();","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    /** Returns an unmodifiable view of the filtered list of decks */","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"    ObservableList\u003cDeck\u003e getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"junianob":3,"unfazing":4,"-":45,"HJ-PRK":2}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.parser.MasterDeckParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.review.Review;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"    private final MasterDeckParser masterDeckParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        masterDeckParser \u003d new MasterDeckParser();","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        Command command;","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        Optional\u003cDeck\u003e selectedDeck \u003d this.model.getSelectedDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"        Optional\u003cReview\u003e currReview \u003d this.model.getReview();","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        if (currReview.isPresent()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"            if (currReview.get().isFlipped()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"                command \u003d masterDeckParser.parseCommandWhenReviewingAndFlipped(commandText);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"            } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"                command \u003d masterDeckParser.parseCommandWhenReviewingAndUnflipped(commandText);","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"        } else if (selectedDeck.isPresent()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"            command \u003d masterDeckParser.parseCommandWhenDeckSelected(commandText);","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        } else {","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"            command \u003d masterDeckParser.parseCommandWhenDeckNotSelected(commandText);","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"rockman007372"},"content":"        CommandResult commandResult \u003d command.execute(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"            storage.saveAddressBook(model.getMasterDeck());","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"    public ReadOnlyMasterDeck getAddressBook() {","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        return model.getMasterDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"    public ObservableList\u003cCard\u003e getFilteredPersonList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"        return model.getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"junianob"},"content":"    public ObservableList\u003cDeck\u003e getFilteredDeckList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"junianob"},"content":"        return model.getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"        return model.getMasterDeckFilePath();","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"rockman007372":6,"junianob":2,"ruiyigan":12,"unfazing":12,"-":70,"HJ-PRK":2}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":" * Adds a card to the selected deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card to the selected deck. \"","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_QUESTION + \"QUESTION \"","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_ANSWER + \"ANSWER \"","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_QUESTION + \"When was the RSA (Rivest–Shamir–Adleman) algorithm invented? \"","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_ANSWER + \"1977 by Ron Rivest, Adi Shamir, and Leonard Adleman \"","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"            + PREFIX_TAG + \"CS2107\";","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the master deck\";","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"    private final Card toAdd;","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"     * Creates an AddCommand to add the specified {@code Card}","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"    public AddCommand(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"        requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        toAdd \u003d card;","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"        Optional\u003cDeck\u003e selectedDeck \u003d model.getSelectedDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"        if (model.hasCard(toAdd)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        toAdd.setDeck(selectedDeck);","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        model.addCard(toAdd);","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ruiyigan":16,"unfazing":9,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/AddDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-11"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":" * Adds a card to the address book.","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"public class AddDeckCommand extends Command {","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"    public static final String COMMAND_WORD \u003d \"addDeck\";","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new deck \"","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"            + \"DECK NAME\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"            + \"LAK1201\";","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New deck created: %1$s\";","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the deck list\";","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"    private final Deck toAdd;","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"     * Creates an AddDeckCommand to add the specified {@code Deck}","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"    public AddDeckCommand(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        toAdd \u003d deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"        if (model.hasDeck(toAdd)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DECK);","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"        model.addDeck(toAdd);","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getDeckName()));","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof AddDeckCommand // instanceof handles nulls","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 toAdd.equals(((AddDeckCommand) other).toAdd));","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"HJ-PRK":53}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"public class ClearCommand extends Command { //todo: this command is dangerous and should warn users in the future","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"        model.setMasterDeck(new MasterDeck());","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":1,"unfazing":1,"-":19,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":" * Deletes a card identified using it\u0027s displayed index from the selected deck.","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"            + \": Deletes the card identified by the index number used in the displayed selected deck.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        Card cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        model.deleteCard(cardToDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ruiyigan":5,"unfazing":4,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/DeleteDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":" * Deletes a deck identified using its displayed index from the deck list.","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"public class DeleteDeckCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"    public static final String COMMAND_WORD \u003d \"deleteDeck\";","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Select a deck to delete \"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"            + \"by the index number used in the displayed deck list.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"            + \"Parameter: INDEX (must be a positive integer).\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deck deleted: %1$s\"; // %1$s is the first argument in format","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"Deck index provided is invalid\";","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"    private final Index deckIndex;","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"     * Creates a DeleteDeckCommand to delete the specified {@code Deck}","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"    public DeleteDeckCommand(Index idx) {","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(idx);","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        this.deckIndex \u003d idx;","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"        List\u003cDeck\u003e deckList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        if (deckIndex.getZeroBased() \u003e\u003d deckList.size()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        Deck targetDeck \u003d deckList.get(deckIndex.getZeroBased());","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"        model.removeDeck(targetDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetDeck.getDeckName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof DeleteDeckCommand // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 deckIndex.equals(((DeleteDeckCommand) other).deckIndex));","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"HJ-PRK":60}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":" * Edits the details of an existing card in the selected deck.","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card identified \"","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"            + \"by the index number used in the displayed card list. \"","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"            + \"[\" + PREFIX_QUESTION + \"QUESTION] \"","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"            + \"[\" + PREFIX_ANSWER + \"ANSWER] \"","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the master deck.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"    private final EditCardDescriptor editCardDescriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"     * @param index of the card in the selected deck to edit","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"     * @param editCardDescriptor details to edit the card with","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"    public EditCommand(Index index, EditCardDescriptor editCardDescriptor) {","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"        Card cardToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        if (!cardToEdit.isSameCard(editedCard) \u0026\u0026 model.hasCard(editedCard)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        model.setCard(cardToEdit, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"     * Creates and returns a {@code Card} with the details of {@code cardToEdit}","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"     * edited with {@code editCardDescriptor}.","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor) {","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"        assert cardToEdit !\u003d null;","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"        Question updatedQuestion \u003d editCardDescriptor.getQuestion().orElse(cardToEdit.getQuestion());","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"        Answer updatedAnswer \u003d editCardDescriptor.getAnswer().orElse(cardToEdit.getAnswer());","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"        Set\u003cTag\u003e updatedTags \u003d editCardDescriptor.getTags().orElse(cardToEdit.getTags());","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"        Optional\u003cDeck\u003e updatedDeck \u003d editCardDescriptor.getDeck().orElse(Optional.of(cardToEdit.getDeck().get()));","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        return new Card(updatedQuestion, updatedAnswer, updatedTags, updatedDeck);","lastModifiedDate":"2023-03-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":110,"author":{"gitId":"ruiyigan"},"content":"                \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"     * Stores the details to edit the card with. Each non-empty field value will replace the","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"     * corresponding field value of the card.","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":117,"author":{"gitId":"ruiyigan"},"content":"    public static class EditCardDescriptor {","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"unfazing"},"content":"        private Question question;","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"        private Answer answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":121,"author":{"gitId":"ruiyigan"},"content":"        private Optional\u003cDeck\u003e deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":123,"author":{"gitId":"ruiyigan"},"content":"        public EditCardDescriptor() {}","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":129,"author":{"gitId":"ruiyigan"},"content":"        public EditCardDescriptor(EditCardDescriptor toCopy) {","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"ruiyigan"},"content":"            setQuestion(toCopy.question);","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"ruiyigan"},"content":"            setAnswer(toCopy.answer);","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":133,"author":{"gitId":"ruiyigan"},"content":"            setDeck(toCopy.deck);","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"HJ-PRK"},"content":"            return CollectionUtil.isAnyNonNull(question, answer, tags);","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"ruiyigan"},"content":"        public void setQuestion(Question question) {","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"unfazing"},"content":"            this.question \u003d question;","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"ruiyigan"},"content":"        public Optional\u003cQuestion\u003e getQuestion() {","lastModifiedDate":"2023-03-14"},{"lineNumber":148,"author":{"gitId":"unfazing"},"content":"            return Optional.ofNullable(question);","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"ruiyigan"},"content":"        public void setAnswer(Answer answer) {","lastModifiedDate":"2023-03-14"},{"lineNumber":152,"author":{"gitId":"unfazing"},"content":"            this.answer \u003d answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"ruiyigan"},"content":"        public Optional\u003cAnswer\u003e getAnswer() {","lastModifiedDate":"2023-03-14"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"            return Optional.ofNullable(answer);","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"ruiyigan"},"content":"        public void setDeck(Optional\u003cDeck\u003e deck) {","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"ruiyigan"},"content":"            this.deck \u003d deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":161,"author":{"gitId":"ruiyigan"},"content":"        public Optional\u003cOptional\u003cDeck\u003e\u003e getDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"ruiyigan"},"content":"            return Optional.ofNullable(deck);","lastModifiedDate":"2023-03-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":174,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":175,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":176,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":177,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":190,"author":{"gitId":"ruiyigan"},"content":"            if (!(other instanceof EditCardDescriptor)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":195,"author":{"gitId":"ruiyigan"},"content":"            EditCardDescriptor e \u003d (EditCardDescriptor) other;","lastModifiedDate":"2023-03-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":197,"author":{"gitId":"ruiyigan"},"content":"            return getQuestion().equals(e.getQuestion())","lastModifiedDate":"2023-03-14"},{"lineNumber":198,"author":{"gitId":"ruiyigan"},"content":"                    \u0026\u0026 getAnswer().equals(e.getAnswer())","lastModifiedDate":"2023-03-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"ruiyigan":45,"unfazing":19,"-":136,"HJ-PRK":2}},{"path":"src/main/java/seedu/address/logic/commands/EditDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":" * Edits the name of the deck","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"public class EditDeckCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"    public static final String COMMAND_WORD \u003d \"editDeck\";","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the name of the deck \"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"            + \"by the index number used in the displayed deck list. \"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"            + \"[DECK NAME]...\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"            + \"LAC1201\";","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_EDIT_DECK_SUCCESS \u003d \"Edited Deck: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck name already exists.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    private final Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"    private final Deck editedDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"     * @param index      of the deck to edit","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"     * @param editedDeck edited deck of new name","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"    public EditDeckCommand(Index index, Deck editedDeck) {","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"        this.editedDeck \u003d editedDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        if (model.hasDeck(editedDeck)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DECK);","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"        Deck deckToEdit \u003d lastShownList.get(index.getZeroBased()); //target","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"        model.setDeck(deckToEdit, editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck.getDeckName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"HJ-PRK"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"            return true;","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"        if (!(other instanceof EditDeckCommand)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"            return false;","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"        // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"        EditDeckCommand e \u003d (EditDeckCommand) other;","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"        return index.equals(e.index) \u0026\u0026 editedDeck.equals(e.editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"HJ-PRK":84}},{"path":"src/main/java/seedu/address/logic/commands/EndReviewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Ends current review session.","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class EndReviewCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"endReview\";","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Ended the review.\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"        model.endReview();","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"unfazing":23}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":19,"HJ-PRK":1}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    private final QuestionContainsKeywordsPredicate predicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    public FindCommand(QuestionContainsKeywordsPredicate predicate) {","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        model.updateFilteredCardList(predicate);","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"                String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, model.getFilteredCardList().size()));","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"ruiyigan":1,"unfazing":4,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/FlipCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Flips the current flashcard under review to show its answer to the user.","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class FlipCardCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"[\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Flashcard is flipped! Showing answer.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"            + \"\\nTo mark correct enter \u0027\"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"            + \"\\nTo mark wrong enter ;\";","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"        model.flipCard(); // Todo: any possible exception here?","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"rockman007372":1,"unfazing":23}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"unfazing":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/MarkCorrectCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Marks the current card under review as correct.","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class MarkCorrectCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"\u0027\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Nicely! Showing next flashcard.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter [ to flip card and show answer!\"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter ] to return to previous card.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter \\\\ to skip to next card.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        model.markCorrect();","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"unfazing":26}},{"path":"src/main/java/seedu/address/logic/commands/MarkWrongCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Marks the current card under review as wrong.","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class MarkWrongCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \";\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You\u0027ll get it next time! Showing next flashcard.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter [ to flip card and show answer!\"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter ] to return to previous card.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter \\\\ to skip to next card.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        model.markWrong();","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"unfazing":26}},{"path":"src/main/java/seedu/address/logic/commands/NextCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Sets the next card as the card currently under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class NextCardCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"\\\\\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Skipped to next flashcard.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter [ to flip card and show answer!\"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter ] to return to previous card.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter \\\\ to skip to next card.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        model.goToNextCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"unfazing":26}},{"path":"src/main/java/seedu/address/logic/commands/PreviousCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Sets the previous card as the card currently under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class PreviousCardCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"]\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Went back to previous flashcard.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter [ to flip card and show answer!\"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter ] to return to previous card.\"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"            + \"\\nEnter \\\\ to skip to next card.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        model.goToPrevCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"unfazing":27}},{"path":"src/main/java/seedu/address/logic/commands/ReviewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":" * Starts a review session of a Deck.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class ReviewCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"review\";","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Review a deck of cards \"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"            + \"by the index number used in the displayed deck list.\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"            + \"Parameter: INDEX (must be a positive integer).\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deck to be reviewed: %1$s\\nEnter [ to flip card and show answer!\";","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"Deck index provided is invalid\";","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_EMPTY_DECK \u003d \"The deck you chose to review is empty\";","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    private final Index deckIndex;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"     * Creates a ReviewCommand with the specified index of the deck.","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"    public ReviewCommand(Index idx) {","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        requireNonNull(idx);","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        this.deckIndex \u003d idx;","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"        List\u003cDeck\u003e deckList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        boolean isIndexOutOfBound \u003d deckIndex.getZeroBased() \u003e\u003d deckList.size();","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        if (isIndexOutOfBound) {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"            throw new CommandException(MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        } else if (model.getDeckSize(deckIndex.getZeroBased()) \u003d\u003d 0) {","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"            throw new CommandException(MESSAGE_EMPTY_DECK);","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"        model.reviewDeck(deckIndex);","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getReviewDeckName()));","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"                || (other instanceof ReviewCommand // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 deckIndex.equals(((ReviewCommand) other).deckIndex));","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"unfazing":59}},{"path":"src/main/java/seedu/address/logic/commands/SelectDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":" * Selects a deck to operate on.","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class SelectDeckCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"    public static final String COMMAND_WORD \u003d \"selectDeck\";","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Select a deck of cards \"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"            + \"by the index number used in the displayed deck list.\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"            + \"Parameter: INDEX (must be a positive integer).\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deck selected: %1$s\"; // %1$s is the first argument in format","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"Deck index provided is invalid\";","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"    private final Index deckIndex;","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"     * Creates an AddCommand to add the specified {@code Card}","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"    public SelectDeckCommand(Index idx) {","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(idx);","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"        this.deckIndex \u003d idx;","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"rockman007372"},"content":"        List\u003cDeck\u003e deckList \u003d model.getFilteredDeckList();","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"rockman007372"},"content":"        boolean isIndexOutOfBound \u003d deckIndex.getZeroBased() \u003e\u003d deckList.size();","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"rockman007372"},"content":"        if (isIndexOutOfBound) {","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"rockman007372"},"content":"            throw new CommandException(MESSAGE_INVALID_DECK_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"rockman007372"},"content":"        model.selectDeck(deckIndex);","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getSelectedDeckName()));","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"rockman007372"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"rockman007372"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"rockman007372"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"rockman007372"},"content":"                || (other instanceof SelectDeckCommand // instanceof handles nulls","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"                \u0026\u0026 deckIndex.equals(((SelectDeckCommand) other).deckIndex));","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"rockman007372":45,"ruiyigan":1,"unfazing":10}},{"path":"src/main/java/seedu/address/logic/commands/UnselectDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":" * Selects a deck to operate on.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"public class UnselectDeckCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public static final String COMMAND_WORD \u003d \"unselectDeck\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"The deck has been unselected.\";","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        model.unselectDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"unfazing":24}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        Card card \u003d new Card(question, answer, tagList, Optional.empty());","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        return new AddCommand(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"ruiyigan":8,"unfazing":4,"-":43}},{"path":"src/main/java/seedu/address/logic/parser/AddDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-11"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.AddDeckCommand;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":" * Parses input arguments and creates a new AddDeckCommand object","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"public class AddDeckCommandParser implements Parser\u003cAddDeckCommand\u003e {","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    public AddDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"        Deck deck \u003d ParserUtil.parseDeck(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"        return new AddDeckCommand(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"HJ-PRK":24}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"ruiyigan":2,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/DeleteDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.DeleteDeckCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":" * Parses input arguments and creates a new DeleteDeck object","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"public class DeleteDeckCommandParser implements Parser\u003cDeleteDeckCommand\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteDeckCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"     * and returns an DeleteDeckCommand object for execution.","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"    public DeleteDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"        Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"                    DeleteDeckCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"        return new DeleteDeckCommand(index);","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"HJ-PRK":34}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor editCardDescriptor \u003d new EditCardDescriptor();","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"            editCardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"            editCardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCardDescriptor::setTags);","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        if (!editCardDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        return new EditCommand(index, editCardDescriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"ruiyigan":12,"-":62}},{"path":"src/main/java/seedu/address/logic/parser/EditDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HJ-PRK"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.EditDeckCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.SelectDeckCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":" * Parses input arguments and creates a new EditDeckCommand object","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"public class EditDeckCommandParser implements Parser\u003cEditDeckCommand\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"     * Parses the given {@code String} of arguments in the context of the EditDeckCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"     * and returns an EditDeckCommand object for execution.","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"    public EditDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"        Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"            String i \u003d String.valueOf(args.charAt(1));","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"            index \u003d ParserUtil.parseIndex(i);","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"                    SelectDeckCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"        Deck editedDeck \u003d ParserUtil.parseDeck(args.substring(2));","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"        return new EditDeckCommand(index, editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"HJ-PRK":40}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        return new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"unfazing":2,"-":31}},{"path":"src/main/java/seedu/address/logic/parser/MasterDeckParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.AddDeckCommand;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.DeleteDeckCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.logic.commands.EditDeckCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.EndReviewCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.FlipCardCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.MarkCorrectCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.MarkWrongCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.NextCardCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.PreviousCardCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.ReviewCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.SelectDeckCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.UnselectDeckCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"public class MasterDeckParser {","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"     * Parses user input into command for execution when no deck is selected.","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public Command parseCommandWhenDeckNotSelected(String userInput) throws ParseException {","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        case AddDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"            return new AddDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"        case DeleteDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"            return new DeleteDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        case EditDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"            return new EditDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":83,"author":{"gitId":"rockman007372"},"content":"        case SelectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-12"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"            return new SelectDeckCommandParser().parse(arguments);","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"        case ReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"            return new ReviewCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"     * Parses user input into command for execution when a deck is selected.","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":97,"author":{"gitId":"ruiyigan"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"ruiyigan"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"ruiyigan"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"rockman007372"},"content":"    public Command parseCommandWhenDeckSelected(String userInput) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"ruiyigan"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":107,"author":{"gitId":"ruiyigan"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-03-11"},{"lineNumber":108,"author":{"gitId":"ruiyigan"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-03-11"},{"lineNumber":109,"author":{"gitId":"ruiyigan"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"ruiyigan"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"ruiyigan"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"ruiyigan"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"ruiyigan"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"ruiyigan"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"ruiyigan"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"        case UnselectDeckCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"            return new UnselectDeckCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"        case ReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"            return new ReviewCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"rockman007372"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"rockman007372"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"ruiyigan"},"content":"        default:","lastModifiedDate":"2023-03-11"},{"lineNumber":130,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-11"},{"lineNumber":131,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":132,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":133,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"unfazing"},"content":"     * Parses user input into command for execution when a review is underway and the card is unflipped.","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"unfazing"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"unfazing"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"    public Command parseCommandWhenReviewingAndUnflipped(String userInput) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"unfazing"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"unfazing"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"unfazing"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"unfazing"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"unfazing"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"unfazing"},"content":"        case EndReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"unfazing"},"content":"            return new EndReviewCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"        case PreviousCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":155,"author":{"gitId":"unfazing"},"content":"            return new PreviousCardCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"unfazing"},"content":"        case NextCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":158,"author":{"gitId":"unfazing"},"content":"            return new NextCardCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":159,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":160,"author":{"gitId":"unfazing"},"content":"        case FlipCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":161,"author":{"gitId":"unfazing"},"content":"            return new FlipCardCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":163,"author":{"gitId":"unfazing"},"content":"        default:","lastModifiedDate":"2023-03-14"},{"lineNumber":164,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-14"},{"lineNumber":165,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":166,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":167,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":169,"author":{"gitId":"unfazing"},"content":"     * Parses user input into command for execution when a review is underway and the card is flipped.","lastModifiedDate":"2023-03-14"},{"lineNumber":170,"author":{"gitId":"unfazing"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":171,"author":{"gitId":"unfazing"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-03-14"},{"lineNumber":172,"author":{"gitId":"unfazing"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-03-14"},{"lineNumber":173,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-14"},{"lineNumber":174,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":175,"author":{"gitId":"unfazing"},"content":"    public Command parseCommandWhenReviewingAndFlipped(String userInput) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":176,"author":{"gitId":"unfazing"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2023-03-14"},{"lineNumber":177,"author":{"gitId":"unfazing"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":178,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":179,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":180,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"unfazing"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-03-14"},{"lineNumber":182,"author":{"gitId":"unfazing"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-03-14"},{"lineNumber":183,"author":{"gitId":"unfazing"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-03-14"},{"lineNumber":184,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":185,"author":{"gitId":"unfazing"},"content":"        case EndReviewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":186,"author":{"gitId":"unfazing"},"content":"            return new EndReviewCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":188,"author":{"gitId":"unfazing"},"content":"        case MarkCorrectCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":189,"author":{"gitId":"unfazing"},"content":"            return new MarkCorrectCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":190,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":191,"author":{"gitId":"unfazing"},"content":"        case MarkWrongCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":192,"author":{"gitId":"unfazing"},"content":"            return new MarkWrongCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":193,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"        case PreviousCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":195,"author":{"gitId":"unfazing"},"content":"            return new PreviousCardCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":196,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"        case NextCardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":198,"author":{"gitId":"unfazing"},"content":"            return new NextCardCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":199,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":200,"author":{"gitId":"rockman007372"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":201,"author":{"gitId":"rockman007372"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":202,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":203,"author":{"gitId":"ruiyigan"},"content":"        default:","lastModifiedDate":"2023-03-11"},{"lineNumber":204,"author":{"gitId":"ruiyigan"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-11"},{"lineNumber":205,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":206,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rockman007372":10,"ruiyigan":36,"unfazing":85,"-":64,"HJ-PRK":12}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"     * Parses a {@code String question} into a {@code Question}.","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    public static Question parseQuestion(String question) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(question);","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        String trimmedQuestion \u003d question.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"        if (!Question.isValidQuestion(trimmedQuestion)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        return new Question(trimmedQuestion);","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"     * Parses a {@code String answer} into an {@code Answer}.","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"    public static Answer parseAnswer(String answer) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        requireNonNull(answer);","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        String trimmedAnswer \u003d answer.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        if (!Answer.isValidAnswer(trimmedAnswer)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        return new Answer(trimmedAnswer);","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":95,"author":{"gitId":"HJ-PRK"},"content":"     * Parses {@code Collection\u003cString\u003e decks} into a {@code Set\u003cDeck\u003e}","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":97,"author":{"gitId":"HJ-PRK"},"content":"    public static Deck parseDeck(String deckName) throws ParseException {","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(deckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"        String trimmedDeckName \u003d deckName.trim();","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"        if (!Answer.isValidAnswer(trimmedDeckName)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"HJ-PRK"},"content":"        return new Deck(trimmedDeckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"ruiyigan":12,"unfazing":4,"-":76,"HJ-PRK":13}},{"path":"src/main/java/seedu/address/logic/parser/ReviewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.ReviewCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":" * Parses input arguments and creates a new SelectDeck object","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"public class ReviewCommandParser implements Parser\u003cReviewCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"     * Parses the given {@code String} of arguments in the context of the ReviewCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"     * and returns an ReviewCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public ReviewCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        Index index;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"                    ReviewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        return new ReviewCommand(index);","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"unfazing":34}},{"path":"src/main/java/seedu/address/logic/parser/SelectDeckCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"rockman007372"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"rockman007372"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"rockman007372"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.logic.commands.SelectDeckCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":" * Parses input arguments and creates a new SelectDeck object","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"rockman007372"},"content":"public class SelectDeckCommandParser implements Parser\u003cSelectDeckCommand\u003e {","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectDeckCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"     * and returns an SelectDeckCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":"    public SelectDeckCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":"        Index index;","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"rockman007372"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"rockman007372"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"rockman007372"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"                    SelectDeckCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"        return new SelectDeckCommand(index);","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"rockman007372":31,"unfazing":3}},{"path":"src/main/java/seedu/address/model/MasterDeck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.UniqueCardList;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.UniqueDeckList;","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"public class MasterDeck implements ReadOnlyMasterDeck {","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    private final UniqueCardList cards;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    private final UniqueDeckList decks;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        cards \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        decks \u003d new UniqueDeckList();","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"    public MasterDeck() {}","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"     * Creates an Deck using the Persons in the {@code toBeCopied}","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"    public MasterDeck(ReadOnlyMasterDeck toBeCopied) {","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"     * Replaces the contents of the card list with {@code cards}.","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"     * {@code cards} must not contain duplicate cards.","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"    public void setCards(List\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        this.cards.setCards(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"    public void setDecks(List\u003cDeck\u003e decks) {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"        this.decks.setDecks(decks);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"     * Resets the existing data of this {@code Deck} with {@code newData}.","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"    public void resetData(ReadOnlyMasterDeck newData) {","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"        setCards(newData.getCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"        setDecks(newData.getDeckList());","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"    //// card-level operations","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"     * Returns true if a card with the same identity as {@code card} exists in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"    public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        return cards.contains(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"     * Adds a card to the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"     * The card must not already exist in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"    public void addCard(Card p) {","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"        cards.add(p);","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"     * Replaces the given card {@code target} in the list with {@code editedCard}.","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"     * The card identity of {@code editedCard} must not be the same as another existing card in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"    public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"        requireNonNull(editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"        cards.setCard(target, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"     * Removes {@code key} from this {@code Deck}.","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"     * {@code key} must exist in the MasterDeck.","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"    public void removeCard(Card key) {","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"        cards.remove(key);","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"unfazing"},"content":"     * For sample data (SampleDataUtil), Cards may be added without adding Decks,","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"unfazing"},"content":"     * hence this function initialises Decks from the list of Cards.","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"unfazing"},"content":"     * In normal operation, Cards can only be added when a Deck is selected","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"     * hence this function should not be called in normal operation.","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"    public void initDecks() {","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"        for (Card card: cards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"ruiyigan"},"content":"            if (!decks.contains(card.getDeck().get())) {","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"ruiyigan"},"content":"                addDeck(card.getDeck().get());","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":124,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if a deck with the same identity as {@code deck} exists.","lastModifiedDate":"2023-03-11"},{"lineNumber":125,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":126,"author":{"gitId":"HJ-PRK"},"content":"    public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":127,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":128,"author":{"gitId":"HJ-PRK"},"content":"        return decks.contains(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":129,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":130,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":131,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":132,"author":{"gitId":"HJ-PRK"},"content":"     * Adds a card to the address book.","lastModifiedDate":"2023-03-11"},{"lineNumber":133,"author":{"gitId":"HJ-PRK"},"content":"     * The card must not already exist in the address book.","lastModifiedDate":"2023-03-11"},{"lineNumber":134,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":135,"author":{"gitId":"HJ-PRK"},"content":"    public void addDeck(Deck d) {","lastModifiedDate":"2023-03-11"},{"lineNumber":136,"author":{"gitId":"HJ-PRK"},"content":"        decks.add(d);","lastModifiedDate":"2023-03-11"},{"lineNumber":137,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":138,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":139,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":140,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the given deck {@code target} in the list with {@code editedDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":141,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist.","lastModifiedDate":"2023-03-11"},{"lineNumber":142,"author":{"gitId":"HJ-PRK"},"content":"     * The deck identity of {@code editedCard} must not be the same as another existing deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":143,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":144,"author":{"gitId":"HJ-PRK"},"content":"    public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":145,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":146,"author":{"gitId":"HJ-PRK"},"content":"        decks.setDeck(target, editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":147,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":148,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":149,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":150,"author":{"gitId":"HJ-PRK"},"content":"     * Removes {@code key} from this {@code MasterDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":151,"author":{"gitId":"HJ-PRK"},"content":"     * {@code key} must exist.","lastModifiedDate":"2023-03-11"},{"lineNumber":152,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":153,"author":{"gitId":"HJ-PRK"},"content":"    public void removeDeck(Deck key) {","lastModifiedDate":"2023-03-11"},{"lineNumber":154,"author":{"gitId":"HJ-PRK"},"content":"        ArrayList\u003cCard\u003e remCards \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-14"},{"lineNumber":155,"author":{"gitId":"HJ-PRK"},"content":"        for (Card c : cards) {","lastModifiedDate":"2023-03-14"},{"lineNumber":156,"author":{"gitId":"HJ-PRK"},"content":"            Deck targetDeck \u003d c.getDeck().orElse(new Deck(\"\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"HJ-PRK"},"content":"            if (targetDeck.equals(key)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":158,"author":{"gitId":"HJ-PRK"},"content":"                remCards.add(c);","lastModifiedDate":"2023-03-14"},{"lineNumber":159,"author":{"gitId":"HJ-PRK"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":160,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":161,"author":{"gitId":"HJ-PRK"},"content":"        for (Card r : remCards) {","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"HJ-PRK"},"content":"            removeCard(r);","lastModifiedDate":"2023-03-14"},{"lineNumber":163,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":164,"author":{"gitId":"HJ-PRK"},"content":"        decks.remove(key);","lastModifiedDate":"2023-03-11"},{"lineNumber":165,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":166,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"unfazing"},"content":"        return cards.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2023-03-10"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"unfazing"},"content":"    public ObservableList\u003cCard\u003e getCardList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":175,"author":{"gitId":"unfazing"},"content":"        return cards.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":178,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":179,"author":{"gitId":"HJ-PRK"},"content":"    public ObservableList\u003cDeck\u003e getDeckList() {","lastModifiedDate":"2023-03-11"},{"lineNumber":180,"author":{"gitId":"HJ-PRK"},"content":"        return decks.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-11"},{"lineNumber":181,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":182,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":186,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof MasterDeck // instanceof handles nulls","lastModifiedDate":"2023-03-11"},{"lineNumber":187,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 cards.equals(((MasterDeck) other).cards));","lastModifiedDate":"2023-03-11"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":192,"author":{"gitId":"unfazing"},"content":"        return cards.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":194,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ruiyigan":2,"unfazing":50,"-":81,"HJ-PRK":62}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.review.Review;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true; //this is unnecessary?","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"     * Returns the user prefs\u0027 deck book file path.","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"    Path getMasterDeckFilePath();","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"     * Sets the user prefs\u0027 deck file path.","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"    void setMasterDeckFilePath(Path deckFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"     * Replaces deck data with the data in {@code addressBook}.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"    void setMasterDeck(ReadOnlyMasterDeck deck);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"    /** Returns the Deck */","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"    ReadOnlyMasterDeck getMasterDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"     * Returns true if a card with the same identity as {@code card} exists in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"    boolean hasCard(Card card);","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"     * Deletes the given card.","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"     * The card must exist in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"    void deleteCard(Card target);","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"     * Adds the given card.","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"     * {@code card} must not already exist in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"    void addCard(Card card);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"unfazing"},"content":"     * Replaces the given card {@code target} with {@code editedCard}.","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"     * The card identity of {@code editedCard} must not be the same as another existing card in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"unfazing"},"content":"    void setCard(Card target, Card editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"    /** Returns an unmodifiable view of the filtered card list */","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"    ObservableList\u003cCard\u003e getFilteredCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"rockman007372"},"content":"    /** Returns an unmodifiable view of the filtered deck list */","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"    ObservableList\u003cDeck\u003e getFilteredDeckList();","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"     * Updates the filter of the filtered card list to filter by the given {@code predicate}.","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"    void updateFilteredCardList(Predicate\u003cCard\u003e predicate);","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"    /* NEWLY ADDED COMMANDS TO SUPPORT DECK LIST (NOT IN AB3) */","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"    /** Returns the deck */","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"ruiyigan"},"content":"    Optional\u003cDeck\u003e getSelectedDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"    void addDeck(Deck deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":107,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if a deck with the same name as {@code deck} exists.","lastModifiedDate":"2023-03-11"},{"lineNumber":108,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":109,"author":{"gitId":"HJ-PRK"},"content":"    boolean hasDeck(Deck deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the given deck {@code target} with {@code editedDeck}.","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist.","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"HJ-PRK"},"content":"     * The deck name of {@code editedDeck} must not be the same as another existing deck.","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"HJ-PRK"},"content":"    void setDeck(Deck target, Deck editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"HJ-PRK"},"content":"    void removeDeck(Deck key);","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"    void selectDeck(Index idx);","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"    void unselectDeck();","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"ruiyigan"},"content":"    String getSelectedDeckName();","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"    int getDeckSize(int deckIndex);","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"    void reviewDeck(Index idx);","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"rockman007372"},"content":"    Optional\u003cReview\u003e getReview();","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"unfazing"},"content":"    void endReview();","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":133,"author":{"gitId":"unfazing"},"content":"    String getReviewDeckName();","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"rockman007372"},"content":"    void flipCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"    void markWrong();","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"    void markCorrect();","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"    void goToPrevCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"unfazing"},"content":"    void goToNextCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"rockman007372":5,"ruiyigan":3,"unfazing":56,"-":64,"HJ-PRK":16}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.CardInDeckPredicate;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.IsSameCardPredicate;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.review.Review;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"rockman007372"},"content":"    private final MasterDeck masterDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"rockman007372"},"content":"    private final FilteredList\u003cDeck\u003e filteredDecks;","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"rockman007372"},"content":"    private final FilteredList\u003cCard\u003e filteredCards;","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"rockman007372"},"content":"    private Deck selectedDeck;","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"rockman007372"},"content":"    private Review currReview;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"    public ModelManager(ReadOnlyMasterDeck masterDeck, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(masterDeck, userPrefs);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        logger.fine(\"Initializing with address book: \" + masterDeck + \" and user prefs \" + userPrefs);","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        this.masterDeck \u003d new MasterDeck(masterDeck);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        filteredCards \u003d new FilteredList\u003c\u003e(this.masterDeck.getCardList());","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"        filteredDecks \u003d new FilteredList\u003c\u003e(this.masterDeck.getDeckList());","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"        this(new MasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"unfazing"},"content":"    public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"    public void setMasterDeckFilePath(Path masterDeckFilePath) {","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"        requireNonNull(masterDeckFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"        userPrefs.setAddressBookFilePath(masterDeckFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"rockman007372"},"content":"    /* MasterDeck Operations */","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"    public void setMasterDeck(ReadOnlyMasterDeck deck) {","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"        this.masterDeck.resetData(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"    public ReadOnlyMasterDeck getMasterDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"rockman007372"},"content":"    /* PowerCard Operations */","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"    public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeck.hasCard(card);","lastModifiedDate":"2023-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":110,"author":{"gitId":"unfazing"},"content":"    public void deleteCard(Card target) {","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.removeCard(target);","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"    public void addCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"rockman007372"},"content":"        masterDeck.addCard(card); // Todo: setDeck of card to selectedDeck here","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"    public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(target, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.setCard(target, editedCard);","lastModifiedDate":"2023-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card/Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":132,"author":{"gitId":"unfazing"},"content":"    public ObservableList\u003cCard\u003e getFilteredCardList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"HJ-PRK"},"content":"        return filteredCards;","lastModifiedDate":"2023-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":136,"author":{"gitId":"rockman007372"},"content":"    public ObservableList\u003cDeck\u003e getFilteredDeckList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"rockman007372"},"content":"        return filteredDecks;","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-03-11"},{"lineNumber":143,"author":{"gitId":"HJ-PRK"},"content":"        filteredCards.setPredicate(predicate);","lastModifiedDate":"2023-03-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":160,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeck.equals(other.masterDeck)","lastModifiedDate":"2023-03-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":162,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 filteredDecks.equals(other.filteredDecks);","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":166,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PowerDeck Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":167,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"unfazing"},"content":"    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"unfazing"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-03-13"},{"lineNumber":171,"author":{"gitId":"unfazing"},"content":"        filteredDecks.setPredicate(predicate);","lastModifiedDate":"2023-03-13"},{"lineNumber":172,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":175,"author":{"gitId":"HJ-PRK"},"content":"    public void addDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":176,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.addDeck(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":177,"author":{"gitId":"HJ-PRK"},"content":"        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);","lastModifiedDate":"2023-03-11"},{"lineNumber":178,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":179,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":180,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":181,"author":{"gitId":"HJ-PRK"},"content":"    public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":182,"author":{"gitId":"HJ-PRK"},"content":"        return masterDeck.hasDeck(deck);","lastModifiedDate":"2023-03-11"},{"lineNumber":183,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":186,"author":{"gitId":"HJ-PRK"},"content":"    public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.setDeck(target, editedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":188,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":189,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":190,"author":{"gitId":"unfazing"},"content":"    public void removeDeck(Deck key) { //TODO should remove all cards associated with deck","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"HJ-PRK"},"content":"        masterDeck.removeDeck(key);","lastModifiedDate":"2023-03-11"},{"lineNumber":192,"author":{"gitId":"HJ-PRK"},"content":"        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);","lastModifiedDate":"2023-03-11"},{"lineNumber":193,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":194,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":195,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":196,"author":{"gitId":"unfazing"},"content":"    public void selectDeck(Index deckIndex) {","lastModifiedDate":"2023-03-10"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"        int zeroBasesIdx \u003d deckIndex.getZeroBased();","lastModifiedDate":"2023-03-10"},{"lineNumber":198,"author":{"gitId":"rockman007372"},"content":"        selectedDeck \u003d filteredDecks.get(zeroBasesIdx);","lastModifiedDate":"2023-03-14"},{"lineNumber":199,"author":{"gitId":"rockman007372"},"content":"        assert selectedDeck !\u003d null : \"selectedDeck cannot be null here\";","lastModifiedDate":"2023-03-14"},{"lineNumber":200,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new CardInDeckPredicate(selectedDeck));","lastModifiedDate":"2023-03-14"},{"lineNumber":201,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":202,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":203,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":204,"author":{"gitId":"unfazing"},"content":"    public void unselectDeck() {","lastModifiedDate":"2023-03-10"},{"lineNumber":205,"author":{"gitId":"rockman007372"},"content":"        this.selectedDeck \u003d null;","lastModifiedDate":"2023-03-14"},{"lineNumber":206,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-13"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":209,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":210,"author":{"gitId":"ruiyigan"},"content":"    public Optional\u003cDeck\u003e getSelectedDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":211,"author":{"gitId":"rockman007372"},"content":"        return Optional.ofNullable(selectedDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":212,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":213,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":214,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":215,"author":{"gitId":"ruiyigan"},"content":"    public String getSelectedDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":216,"author":{"gitId":"rockman007372"},"content":"        return Optional.ofNullable(selectedDeck)","lastModifiedDate":"2023-03-14"},{"lineNumber":217,"author":{"gitId":"rockman007372"},"content":"                .map(Deck::getDeckName)","lastModifiedDate":"2023-03-14"},{"lineNumber":218,"author":{"gitId":"rockman007372"},"content":"                .orElse(\"None\");","lastModifiedDate":"2023-03-14"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":221,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":222,"author":{"gitId":"unfazing"},"content":"    public int getDeckSize(int deckIndex) {","lastModifiedDate":"2023-03-14"},{"lineNumber":223,"author":{"gitId":"unfazing"},"content":"        Deck deck \u003d filteredDecks.get(deckIndex);","lastModifiedDate":"2023-03-14"},{"lineNumber":224,"author":{"gitId":"unfazing"},"content":"        return new FilteredList\u003c\u003e(","lastModifiedDate":"2023-03-14"},{"lineNumber":225,"author":{"gitId":"unfazing"},"content":"                masterDeck.getCardList(), new CardInDeckPredicate(deck)","lastModifiedDate":"2023-03-14"},{"lineNumber":226,"author":{"gitId":"unfazing"},"content":"        ).size();","lastModifiedDate":"2023-03-14"},{"lineNumber":227,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":228,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":229,"author":{"gitId":"rockman007372"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Review Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2023-03-14"},{"lineNumber":230,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":231,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":232,"author":{"gitId":"ruiyigan"},"content":"     * Starts a new review session based on deckIndex selected","lastModifiedDate":"2023-03-13"},{"lineNumber":233,"author":{"gitId":"rockman007372"},"content":"     * @param deckIndex Index of the deck","lastModifiedDate":"2023-03-14"},{"lineNumber":234,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":235,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":236,"author":{"gitId":"unfazing"},"content":"    public void reviewDeck(Index deckIndex) {","lastModifiedDate":"2023-03-13"},{"lineNumber":237,"author":{"gitId":"unfazing"},"content":"        int zeroBasesIdx \u003d deckIndex.getZeroBased();","lastModifiedDate":"2023-03-13"},{"lineNumber":238,"author":{"gitId":"unfazing"},"content":"        Deck deckToReview \u003d filteredDecks.get(zeroBasesIdx);","lastModifiedDate":"2023-03-13"},{"lineNumber":239,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e cardList \u003d new FilteredList\u003c\u003e(","lastModifiedDate":"2023-03-13"},{"lineNumber":240,"author":{"gitId":"unfazing"},"content":"                masterDeck.getCardList(), new CardInDeckPredicate(deckToReview)","lastModifiedDate":"2023-03-13"},{"lineNumber":241,"author":{"gitId":"unfazing"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":242,"author":{"gitId":"rockman007372"},"content":"        currReview \u003d new Review(deckToReview, cardList);","lastModifiedDate":"2023-03-14"},{"lineNumber":243,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new IsSameCardPredicate(currReview.getCurrCard()));","lastModifiedDate":"2023-03-14"},{"lineNumber":244,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":245,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":246,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":247,"author":{"gitId":"unfazing"},"content":"    public void markCorrect() {","lastModifiedDate":"2023-03-14"},{"lineNumber":248,"author":{"gitId":"unfazing"},"content":"        this.currReview.markCurrCardAsCorrect();","lastModifiedDate":"2023-03-14"},{"lineNumber":249,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new IsSameCardPredicate(currReview.getCurrCard()));","lastModifiedDate":"2023-03-14"},{"lineNumber":250,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":251,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":252,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":253,"author":{"gitId":"unfazing"},"content":"    public void markWrong() {","lastModifiedDate":"2023-03-14"},{"lineNumber":254,"author":{"gitId":"unfazing"},"content":"        this.currReview.markCurrCardAsWrong();","lastModifiedDate":"2023-03-14"},{"lineNumber":255,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new IsSameCardPredicate(currReview.getCurrCard()));","lastModifiedDate":"2023-03-14"},{"lineNumber":256,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":257,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":258,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":259,"author":{"gitId":"unfazing"},"content":"    public void goToPrevCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":260,"author":{"gitId":"unfazing"},"content":"        this.currReview.goToPrevCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":261,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new IsSameCardPredicate(currReview.getCurrCard()));","lastModifiedDate":"2023-03-14"},{"lineNumber":262,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":263,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":264,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":265,"author":{"gitId":"unfazing"},"content":"    public void goToNextCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":266,"author":{"gitId":"unfazing"},"content":"        this.currReview.goToNextCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":267,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new IsSameCardPredicate(currReview.getCurrCard()));","lastModifiedDate":"2023-03-14"},{"lineNumber":268,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":269,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":270,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":271,"author":{"gitId":"rockman007372"},"content":"    public Optional\u003cReview\u003e getReview() {","lastModifiedDate":"2023-03-14"},{"lineNumber":272,"author":{"gitId":"rockman007372"},"content":"        return Optional.ofNullable(currReview);","lastModifiedDate":"2023-03-14"},{"lineNumber":273,"author":{"gitId":"unfazing"},"content":"    };","lastModifiedDate":"2023-03-13"},{"lineNumber":274,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":275,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":276,"author":{"gitId":"unfazing"},"content":"    public void endReview() {","lastModifiedDate":"2023-03-13"},{"lineNumber":277,"author":{"gitId":"unfazing"},"content":"        currReview.flipAllCards();","lastModifiedDate":"2023-03-14"},{"lineNumber":278,"author":{"gitId":"rockman007372"},"content":"        currReview \u003d null;","lastModifiedDate":"2023-03-14"},{"lineNumber":279,"author":{"gitId":"unfazing"},"content":"        if (selectedDeck !\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":280,"author":{"gitId":"unfazing"},"content":"            updateFilteredCardList(new CardInDeckPredicate(selectedDeck));","lastModifiedDate":"2023-03-14"},{"lineNumber":281,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":282,"author":{"gitId":"unfazing"},"content":"            updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-14"},{"lineNumber":283,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":284,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":285,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":286,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":287,"author":{"gitId":"unfazing"},"content":"    public String getReviewDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":288,"author":{"gitId":"rockman007372"},"content":"        return Optional.ofNullable(currReview)","lastModifiedDate":"2023-03-14"},{"lineNumber":289,"author":{"gitId":"rockman007372"},"content":"                .map(Review::getDeckName)","lastModifiedDate":"2023-03-14"},{"lineNumber":290,"author":{"gitId":"rockman007372"},"content":"                .orElse(\"None\");","lastModifiedDate":"2023-03-14"},{"lineNumber":291,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":292,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":293,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":294,"author":{"gitId":"rockman007372"},"content":"    public void flipCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":295,"author":{"gitId":"rockman007372"},"content":"        Optional.ofNullable(currReview).ifPresent(Review::flipCard);","lastModifiedDate":"2023-03-14"},{"lineNumber":296,"author":{"gitId":"unfazing"},"content":"        updateFilteredCardList(new IsSameCardPredicate(currReview.getCurrCard()));","lastModifiedDate":"2023-03-14"},{"lineNumber":297,"author":{"gitId":"rockman007372"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":298,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rockman007372":36,"ruiyigan":11,"unfazing":111,"-":114,"HJ-PRK":26}},{"path":"src/main/java/seedu/address/model/ReadOnlyMasterDeck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"public interface ReadOnlyMasterDeck {","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    ObservableList\u003cCard\u003e getCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"    ObservableList\u003cDeck\u003e getDeckList();","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"unfazing":2,"-":14,"HJ-PRK":3}},{"path":"src/main/java/seedu/address/model/card/Answer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":" * Represents a Card\u0027s answer in the deck.","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class Answer {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Answers can take any values, and it should not be blank\";","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"     * The first character of the answer must not be a whitespace,","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public final String answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"     * Constructs an {@code Answer}.","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"     * @param answer A valid answer.","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    public Answer(String answer) {","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        requireNonNull(answer);","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"    public static boolean isValidAnswer(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        return answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"                || (other instanceof Answer // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 answer.equals(((Answer) other).answer)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        return answer.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"unfazing":18,"-":39}},{"path":"src/main/java/seedu/address/model/card/Card.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" * Represents a Card in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"public class Card {","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    private final Question question;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    private final Answer answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    private Optional\u003cDeck\u003e deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    private boolean isFlipped \u003d true;","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"    public Card(Question question, Answer answer, Set\u003cTag\u003e tags, Optional\u003cDeck\u003e deck) {","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        requireAllNonNull(question, answer, tags);","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        this.question \u003d question;","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"    public Question getQuestion() {","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"        return question;","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"    public Answer getAnswer() {","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        return answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"    public Optional\u003cDeck\u003e getDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        return deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"    public void setDeck(Optional\u003cDeck\u003e newDeck) {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        this.deck \u003d newDeck;","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"     * Returns true if both persons have the same question.","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"    public boolean isSameCard(Card otherCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"        if (otherCard \u003d\u003d this) {","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"        return otherCard !\u003d null","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 otherCard.getQuestion().equals(getQuestion());","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"     * Returns true if the card is flipped.","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"    public boolean isFlipped() {","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"        return isFlipped;","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"     * Sets card as flipped.","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"    public void setAsFlipped() {","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        this.isFlipped \u003d true;","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"     * Sets card as unflipped.","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"    public void setAsUnflipped() {","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"        this.isFlipped \u003d false;","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"unfazing"},"content":"        if (!(other instanceof Card)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"unfazing"},"content":"        Card otherCard \u003d (Card) other;","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"        return otherCard.getQuestion().equals(getQuestion())","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 otherCard.getAnswer().equals(getAnswer())","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 otherCard.getTags().equals(getTags());","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"HJ-PRK"},"content":"        return Objects.hash(question, answer, tags);","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"        builder.append(getQuestion())","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"                .append(\"; Answer: \")","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"unfazing"},"content":"                .append(getAnswer());","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ruiyigan":13,"unfazing":46,"-":78,"HJ-PRK":2}},{"path":"src/main/java/seedu/address/model/card/CardInDeckPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Tests that a {@code Card}\u0027s {@code Question} is in the given deck.","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class CardInDeckPredicate implements Predicate\u003cCard\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"    private final Deck deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"     * Constructs a CardInDeckPredicate","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"     * @param deck The Deck in question.","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public CardInDeckPredicate(Deck deck) {","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    public boolean test(Card card) {","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"        return deck.isSameDeck(card.getDeck().get());","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"                || (other instanceof CardInDeckPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 deck.equals(((CardInDeckPredicate) other).deck)); // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"ruiyigan":1,"unfazing":32}},{"path":"src/main/java/seedu/address/model/card/IsSameCardPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":" * Tests that a {@code Card} is the same as the given {@code Card}.","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"public class IsSameCardPredicate implements Predicate\u003cCard\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"    private final Card card;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"    public IsSameCardPredicate(Card card) {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"        this.card \u003d card;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"    public boolean test(Card card) {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"        return card.equals(this.card);","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"                || (other instanceof IsSameCardPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 card.equals(((IsSameCardPredicate) other).card)); // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"unfazing":26}},{"path":"src/main/java/seedu/address/model/card/Question.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":" * Represents a Card\u0027s question in the address book.","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"public class Question {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"            \"Question should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    public final String question;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"     * Constructs a {@code Question}.","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"     * @param question A valid name.","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"    public Question(String question) {","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        requireNonNull(question);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        this.question \u003d question;","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    public static boolean isValidQuestion(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        return question;","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"                || (other instanceof Question // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 question.equals(((Question) other).question)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"        return question.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"unfazing":17,"-":42}},{"path":"src/main/java/seedu/address/model/card/QuestionContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" * Tests that a {@code Card}\u0027s {@code Question} matches any of the keywords given.","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"public class QuestionContainsKeywordsPredicate implements Predicate\u003cCard\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    public boolean test(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().question, keyword));","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"unfazing":8,"-":23}},{"path":"src/main/java/seedu/address/model/card/UniqueCardList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":" * A card is considered unique by comparing using {@code Card#isSamePerson(Card)}. As such, adding and updating of","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":" * persons uses Card#isSamePerson(Card) for equality so as to ensure that the card being added or updated is","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":" * unique in terms of identity in the UniqueCardList. However, the removal of a card uses Card#equals(Object) so","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":" * as to ensure that the card with exactly the same fields will be removed.","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":" * @see Card#isSameCard(Card)","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"public class UniqueCardList implements Iterable\u003cCard\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"     * Returns true if the list contains an equivalent card as the given argument.","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"    public boolean contains(Card toCheck) {","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        return internalList.stream().anyMatch(toCheck::isSameCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"     * Adds a card to the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"     * The card must not already exist in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    public void add(Card toAdd) {","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"            throw new DuplicatePersonException(); // TODO: change to DuplicateCardException","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"     * Replaces the card {@code target} in the list with {@code editedCard}.","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"     * The card identity of {@code editedCard} must not be the same as another existing card in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"    public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(target, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"        if (!target.isSameCard(editedCard) \u0026\u0026 contains(editedCard)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"        internalList.set(index, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"     * Removes the equivalent card from the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"     * The card must exist in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"    public void remove(Card toRemove) {","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"            throw new PersonNotFoundException(); // TODO change to CardNotFoundException","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"    public void setCards(UniqueCardList replacement) {","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"     * Replaces the contents of this list with {@code cards}.","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"     * {@code cards} must not contain duplicate cards.","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"    public void setCards(List\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"        requireAllNonNull(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        if (!cardsAreUnique(cards)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"        internalList.setAll(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"unfazing"},"content":"    public Iterator\u003cCard\u003e iterator() {","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"                || (other instanceof UniqueCardList // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"                        \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"     * Returns true if {@code cards} contains only unique cards.","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"    private boolean cardsAreUnique(List\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"unfazing"},"content":"        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"unfazing"},"content":"            for (int j \u003d i + 1; j \u003c cards.size(); j++) {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"unfazing"},"content":"                if (cards.get(i).isSameCard(cards.get(j))) {","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"unfazing":44,"-":93}},{"path":"src/main/java/seedu/address/model/card/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card.exceptions;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"unfazing":1,"-":10}},{"path":"src/main/java/seedu/address/model/card/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card.exceptions;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":" * Signals that the operation is unable to find the specified card.","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"unfazing":2,"-":4}},{"path":"src/main/java/seedu/address/model/deck/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.model.deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"rockman007372"},"content":" * A group of cards","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"rockman007372"},"content":"public class Deck {","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"    public final String deckName;","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"     * Constructing a deck.","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"HJ-PRK"},"content":"    public Deck(String deckName) {","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"        requireAllNonNull(deckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"        this.deckName \u003d deckName;","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"HJ-PRK"},"content":"     * Returns the name of the deck","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"     * @return deckName","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    public String getDeckName() {","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"        return this.deckName;","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if there is a deck of same name.","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"     * This defines a weaker notion of equality between two decks.","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"    public boolean isSameDeck(Deck otherDeck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"        if (otherDeck \u003d\u003d this) {","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"            return true;","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"        return otherDeck !\u003d null","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 otherDeck.getDeckName().equals(getDeckName());","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"            return true;","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"        if (!(other instanceof Deck)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"            return false;","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"        Deck otherCard \u003d (Deck) other;","lastModifiedDate":"2023-03-11"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        return otherCard.getDeckName().equals(getDeckName());","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"        return Objects.hash(deckName);","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"    /*","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"HJ-PRK"},"content":"    public String toString() {","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-11"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"        builder.append(getQuestion())","lastModifiedDate":"2023-03-11"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"                .append(\"; Answer: \")","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"                .append(getAddress());","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"rockman007372":8,"ruiyigan":1,"HJ-PRK":75}},{"path":"src/main/java/seedu/address/model/deck/UniqueDeckList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rockman007372"},"content":"package seedu.address.model.deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"HJ-PRK"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"HJ-PRK"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"HJ-PRK"},"content":"import java.util.List;","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"HJ-PRK"},"content":"//import seedu.address.model.card.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"//import seedu.address.model.card.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"//TODO Deck exceptions","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"rockman007372"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"rockman007372"},"content":" * A list of decks that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"rockman007372"},"content":" * A deck is considered unique by comparing using {@code Deck#isSameDeck(Deck)}. As such, adding and updating of","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"rockman007372"},"content":" * decks uses Deck#isSameDeck(Deck) for equality so as to ensure that the deck being added or updated is","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"rockman007372"},"content":" * unique in terms of identity in the UniqueCardList. However, the removal of a deck uses Card#equals(Object) so","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"rockman007372"},"content":" * as to ensure that the deck with exactly the same fields will be removed.","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"rockman007372"},"content":" *","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"rockman007372"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"rockman007372"},"content":" *","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"rockman007372"},"content":" * @see Deck#isSameDeck(Deck)","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"rockman007372"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"public class UniqueDeckList implements Iterable\u003cDeck\u003e {","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if the list contains an equivalent deck as the given argument.","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"    public boolean contains(Deck toCheck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"        return internalList.stream().anyMatch(toCheck::isSameDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"HJ-PRK"},"content":"     * Adds a deck to the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"     * The card must not already exist in the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    public void add(Deck toAdd) {","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"HJ-PRK"},"content":"            //throw new DuplicatePersonException();","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the deck {@code target} in the list with {@code editedDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"HJ-PRK"},"content":"     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"    public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"        requireAllNonNull(target, editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"            //throw new PersonNotFoundException();","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"HJ-PRK"},"content":"        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"HJ-PRK"},"content":"            //throw new DuplicatePersonException();","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"HJ-PRK"},"content":"        internalList.set(index, editedDeck);","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"     * Removes the equivalent card from the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"     * The card must exist in the list.","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"    public void remove(Deck toRemove) {","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"HJ-PRK"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"HJ-PRK"},"content":"            //throw new PersonNotFoundException();","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"    public void setDecks(UniqueDeckList replacement) {","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"HJ-PRK"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"HJ-PRK"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":89,"author":{"gitId":"HJ-PRK"},"content":"     * Replaces the contents of this list with {@code decks}.","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"     * {@code cards} must not contain duplicate decks.","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":92,"author":{"gitId":"HJ-PRK"},"content":"    public void setDecks(List\u003cDeck\u003e decks) {","lastModifiedDate":"2023-03-11"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"        requireAllNonNull(decks);","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"HJ-PRK"},"content":"        if (!decksAreUnique(decks)) {","lastModifiedDate":"2023-03-11"},{"lineNumber":95,"author":{"gitId":"HJ-PRK"},"content":"            //throw new DuplicatePersonException();","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":97,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"        internalList.setAll(decks);","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"HJ-PRK"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"HJ-PRK"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":107,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":108,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":109,"author":{"gitId":"HJ-PRK"},"content":"    public Iterator\u003cDeck\u003e iterator() {","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"HJ-PRK"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":113,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":114,"author":{"gitId":"HJ-PRK"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-11"},{"lineNumber":115,"author":{"gitId":"HJ-PRK"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-11"},{"lineNumber":116,"author":{"gitId":"HJ-PRK"},"content":"                || (other instanceof UniqueDeckList // instanceof handles nulls","lastModifiedDate":"2023-03-11"},{"lineNumber":117,"author":{"gitId":"HJ-PRK"},"content":"                \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":119,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":120,"author":{"gitId":"HJ-PRK"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":121,"author":{"gitId":"HJ-PRK"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-11"},{"lineNumber":122,"author":{"gitId":"HJ-PRK"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-03-11"},{"lineNumber":123,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":124,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":125,"author":{"gitId":"HJ-PRK"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":126,"author":{"gitId":"HJ-PRK"},"content":"     * Returns true if {@code cards} contains only unique decks.","lastModifiedDate":"2023-03-11"},{"lineNumber":127,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":128,"author":{"gitId":"HJ-PRK"},"content":"    private boolean decksAreUnique(List\u003cDeck\u003e decks) {","lastModifiedDate":"2023-03-11"},{"lineNumber":129,"author":{"gitId":"HJ-PRK"},"content":"        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {","lastModifiedDate":"2023-03-11"},{"lineNumber":130,"author":{"gitId":"HJ-PRK"},"content":"            for (int j \u003d i + 1; j \u003c decks.size(); j++) {","lastModifiedDate":"2023-03-11"},{"lineNumber":131,"author":{"gitId":"HJ-PRK"},"content":"                if (decks.get(i).isSameDeck(decks.get(j))) {","lastModifiedDate":"2023-03-11"},{"lineNumber":132,"author":{"gitId":"HJ-PRK"},"content":"                    return false;","lastModifiedDate":"2023-03-11"},{"lineNumber":133,"author":{"gitId":"HJ-PRK"},"content":"                }","lastModifiedDate":"2023-03-11"},{"lineNumber":134,"author":{"gitId":"HJ-PRK"},"content":"            }","lastModifiedDate":"2023-03-11"},{"lineNumber":135,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":136,"author":{"gitId":"HJ-PRK"},"content":"        return true;","lastModifiedDate":"2023-03-11"},{"lineNumber":137,"author":{"gitId":"HJ-PRK"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":138,"author":{"gitId":"rockman007372"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"rockman007372":14,"HJ-PRK":124}},{"path":"src/main/java/seedu/address/model/review/Review.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.review;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":" * Represents a Review session that is currently underway.","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":" * Guarantees: details are present and not null, field values are validated.","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class Review {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"    private final Deck deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"    private List\u003cCard\u003e cardList;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    private List\u003cBoolean\u003e scoreList;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    private int currCardNum \u003d 1; // 1-Indexed","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    private Card currCard;","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    public Review(Deck deck, List\u003cCard\u003e cardList) {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        requireNonNull(deck);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        this.cardList \u003d cardList;","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        unflipAllCards();","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        //TODO write a shuffle based on user statistics","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        // initialise first card","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"        currCard \u003d this.cardList.get(currCardNum - 1);","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"        // initialise scoreList","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"        scoreList \u003d new ArrayList\u003c\u003e(Arrays.asList(new Boolean[this.cardList.size()]));","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"    public Card getCurrCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        return currCard;","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"    public Deck getDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"        return deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"    public String getDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"        return deck.getDeckName();","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"    public void flipCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        currCard.setAsFlipped();","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"    public void unflipCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"        currCard.setAsUnflipped();","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"    public boolean isFlipped() {","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"        return currCard.isFlipped();","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"     * Returns the sum of the total score on the current scoreList.","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"     * @return current total score of review.","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"unfazing"},"content":"    public Integer getTotalScore() {","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        return scoreList.stream().map(bool -\u003e bool ? 1 : 0).mapToInt(a -\u003e a).sum();","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"     * Move to the next card to be under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"    public void goToNextCard() {","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        currCard.setAsUnflipped(); // always unflip current card before moving to next","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        currCardNum++;","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"unfazing"},"content":"        if (currCardNum \u003e cardList.size()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"            currCardNum--; //TODO throw exception","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"            currCard \u003d cardList.get(currCardNum - 1);","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"unfazing"},"content":"            currCard.setAsUnflipped();","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"     * Move back to previous card to be under review.","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"    public void goToPrevCard() {","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"        currCard.setAsUnflipped();","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"        currCardNum--;","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        if (currCardNum \u003c\u003d 0) {","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"            currCardNum++; //TODO throw exception","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"unfazing"},"content":"            currCard \u003d cardList.get(currCardNum - 1);","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"     * Marks the current card as correct in the scoreList","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"     * by setting the respective index in scoreList as true.","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"    public void markCurrCardAsCorrect() {","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        scoreList.set(currCardNum - 1, true);","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"unfazing"},"content":"        goToNextCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"unfazing"},"content":"     * Marks the current card as wrong in the scoreList","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"unfazing"},"content":"     * by setting the respective index in scoreList as false.","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"unfazing"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"    public void markCurrCardAsWrong() {","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"        scoreList.set(currCardNum - 1, false);","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"unfazing"},"content":"        goToNextCard();","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"unfazing"},"content":"    public void unflipAllCards() {","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"        cardList.stream().forEach(Card::setAsUnflipped);","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"    public void flipAllCards() {","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"        cardList.stream().forEach(Card::setAsFlipped);","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"unfazing":126}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":" * Contains utility methods for populating {@code Deck} with sample data.","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    public static Card[] getSampleCards() {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        return new Card[] {","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"            new Card(new Question(\"Alex Yeoh\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"                    new Answer(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"                getTagSet(\"friends\"), Optional.of(new Deck(\"Default Deck\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"HJ-PRK"},"content":"            new Card(new Question(\"Bernice Yu\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"                new Answer(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"                getTagSet(\"colleagues\", \"friends\"), Optional.of(new Deck(\"Default Deck\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"            new Card(new Question(\"Charlotte Oliveiro\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"                new Answer(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"                getTagSet(\"neighbours\"), Optional.of(new Deck(\"Default Deck\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"            new Card(new Question(\"David Li\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"                new Answer(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"                getTagSet(\"family\"), Optional.of(new Deck(\"Default Deck\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"HJ-PRK"},"content":"            new Card(new Question(\"Irfan Ibrahim\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"                new Answer(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"                getTagSet(\"classmates\"), Optional.of(new Deck(\"Default Deck\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"HJ-PRK"},"content":"            new Card(new Question(\"Roy Balakrishnan\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"                new Answer(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"                getTagSet(\"colleagues\"), Optional.of(new Deck(\"Default Deck\")))","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    public static ReadOnlyMasterDeck getSampleMasterDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        MasterDeck sampleMasterDeck \u003d new MasterDeck();","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        for (Card sampleCard : getSampleCards()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"            sampleMasterDeck.addCard(sampleCard);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"        sampleMasterDeck.initDecks();","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"        return sampleMasterDeck;","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"ruiyigan":8,"unfazing":18,"-":27,"HJ-PRK":8}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":" * Represents a storage for {@link MasterDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"     * Returns Deck data as a {@link ReadOnlyMasterDeck}.","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    Optional\u003cReadOnlyMasterDeck\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"    Optional\u003cReadOnlyMasterDeck\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"     * Saves the given {@link ReadOnlyMasterDeck} to the storage.","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    void saveAddressBook(ReadOnlyMasterDeck addressBook) throws IOException;","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"     * @see #saveAddressBook(ReadOnlyMasterDeck)","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"    void saveAddressBook(ReadOnlyMasterDeck addressBook, Path filePath) throws IOException;","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":36,"HJ-PRK":10}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":" * Jackson-friendly version of {@link Card}.","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"class JsonAdaptedCard {","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    private final String question;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    private final String answer;","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    private final String deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"     * Constructs a {@code JsonAdaptedCard} with the given card details.","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"    public JsonAdaptedCard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String address,","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"deck\") String deck) {","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        this.question \u003d question;","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        this.answer \u003d address;","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"     * Converts a given {@code Card} into this class for Jackson use.","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public JsonAdaptedCard(Card source) {","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        question \u003d source.getQuestion().question;","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"        answer \u003d source.getAnswer().answer;","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        deck \u003d source.getDeck().get().deckName;","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"     * Converts this Jackson-friendly adapted card object into the model\u0027s {@code Card} object.","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted card.","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"    public Card toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        if (question \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName())","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"            );","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        if (!Question.isValidQuestion(question)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        final Question modelQuestion \u003d new Question(question);","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        if (answer \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        if (!Answer.isValidAnswer(answer)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"unfazing"},"content":"            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"        final Answer modelAnswer \u003d new Answer(answer);","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"ruiyigan"},"content":"        final Optional\u003cDeck\u003e modelDeck \u003d Optional.of(new Deck(deck));","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"        return new Card(modelQuestion, modelAnswer, modelTags, modelDeck);","lastModifiedDate":"2023-03-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ruiyigan":23,"unfazing":16,"-":53}},{"path":"src/main/java/seedu/address/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":" * A class to access Deck data stored as a json file on the hard disk.","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"HJ-PRK"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"    public void saveAddressBook(ReadOnlyMasterDeck addressBook) throws IOException {","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyMasterDeck)}.","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"HJ-PRK"},"content":"    public void saveAddressBook(ReadOnlyMasterDeck addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"unfazing":1,"-":72,"HJ-PRK":6}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":" * An Immutable Deck that is serializable to JSON format.","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate card(s).\";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    private final List\u003cJsonAdaptedCard\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedCard\u003e persons) {","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"     * Converts a given {@code ReadOnlyDeck} into this class for Jackson use.","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    public JsonSerializableAddressBook(ReadOnlyMasterDeck source) {","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        persons.addAll(source.getCardList().stream().map(JsonAdaptedCard::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"     * Converts this address book into the model\u0027s {@code Deck} object.","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"HJ-PRK"},"content":"    public MasterDeck toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck addressBook \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        for (JsonAdaptedCard jsonAdaptedCard : persons) {","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"            Card card \u003d jsonAdaptedCard.toModelType();","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"            if (addressBook.hasCard(card)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"            addressBook.addCard(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"rockman007372"},"content":"            boolean isUnique \u003d !card.getDeck().map(addressBook::hasDeck).get();","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"rockman007372"},"content":"            if (isUnique) {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"rockman007372"},"content":"                card.getDeck().ifPresent(addressBook::addDeck);","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"rockman007372"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"rockman007372":5,"ruiyigan":5,"unfazing":7,"-":43,"HJ-PRK":5}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"    Optional\u003cReadOnlyMasterDeck\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"HJ-PRK"},"content":"    void saveAddressBook(ReadOnlyMasterDeck addressBook) throws IOException;","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":29,"HJ-PRK":3}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" * Manages storage of Deck data in local storage.","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2023-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"HJ-PRK"},"content":"    public Optional\u003cReadOnlyMasterDeck\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"    public void saveAddressBook(ReadOnlyMasterDeck addressBook) throws IOException {","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"    public void saveAddressBook(ReadOnlyMasterDeck addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"unfazing":2,"-":71,"HJ-PRK":5}},{"path":"src/main/java/seedu/address/ui/DeckCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":" * An UI component that displays information of a {@code Deck}.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"public class DeckCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"DeckListCard.fxml\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Deck level 4\u003c/a\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"    public final Deck deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"    private Label name;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"    private Label id;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"     * Creates a {@code DeckCode} with the given {@code deck} and index to display.","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    public DeckCard(Deck deck, int displayedIndex) {","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"        super(FXML);","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"        name.setText(deck.getDeckName());","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"        if (!(other instanceof DeckCard)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":"            return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"junianob"},"content":"        // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"        DeckCard deck \u003d (DeckCard) other;","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"junianob"},"content":"        return id.getText().equals(deck.id.getText())","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"junianob"},"content":"                \u0026\u0026 this.deck.equals(deck.deck);","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"junianob":61}},{"path":"src/main/java/seedu/address/ui/DeckListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"public class DeckListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    private static final String FXML \u003d \"DeckListPanel.fxml\";","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"    private ListView\u003cDeck\u003e deckListView;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"    public DeckListPanel(ObservableList\u003cDeck\u003e deckList) {","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"        super(FXML);","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"        deckListView.setItems(deckList);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"        deckListView.setCellFactory(listView -\u003e new DeckListViewCell());","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"        deckListView.setStyle(\"-fx-background-color: #FFFFFF\");","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code PersonCard}.","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"    class DeckListViewCell extends ListCell\u003cDeck\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"        protected void updateItem(Deck deck, boolean empty) {","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"            super.updateItem(deck, empty);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"            if (empty || deck \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"                setText(null);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"                setStyle(\"-fx-background: #FFFFFF\");","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"            } else {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"junianob":51}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"    //PLACEHOLDER FOR DECKLIST","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":"    private DeckListPanel deckListPanel;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"    @FXML","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"    private StackPane deckListPanelPlaceholder;","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"junianob"},"content":"        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList());","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"junianob"},"content":"        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":178,"author":{"gitId":"junianob"},"content":"    public DeckListPanel getDeckListPanel() {","lastModifiedDate":"2023-03-13"},{"lineNumber":179,"author":{"gitId":"junianob"},"content":"        return deckListPanel;","lastModifiedDate":"2023-03-13"},{"lineNumber":180,"author":{"gitId":"junianob"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":181,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"junianob":12,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":" * An UI component that displays information of a {@code Card}.","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Deck level 4\u003c/a\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"    public final Card card;","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"     * Creates a {@code PersonCode} with the given {@code Card} and index to display.","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"    public PersonCard(Card card, int displayedIndex) {","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        this.card \u003d card;","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        name.setText(card.getQuestion().question);","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"        if (card.isFlipped()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"            address.setText(card.getAnswer().answer);","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"        } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"            address.setText(\"\");","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        card.getTags().stream()","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"                \u0026\u0026 this.card.equals(card.card);","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"unfazing":15,"-":60}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"    private ListView\u003cCard\u003e personListView;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    public PersonListPanel(ObservableList\u003cCard\u003e cardList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        personListView.setItems(cardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"        personListView.setStyle(\"-fx-background-color: #AAAAAA\");","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code PersonCard}.","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"    class PersonListViewCell extends ListCell\u003cCard\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        protected void updateItem(Card card, boolean empty) {","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"            super.updateItem(card, empty);","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"            if (empty || card \u003d\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"                setGraphic(new PersonCard(card, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"junianob":3,"unfazing":10,"-":38}},{"path":"src/main/resources/view/DeckListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"\u003cHBox id\u003d\"deckPane\" fx:id\u003d\"deckPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"junianob":31}},{"path":"src/main/resources/view/DeckListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" styleClass\u003d\"panel\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"    \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"junianob":8}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"    -fx-background: #AAAAAA;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junianob":1,"-":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"        \u003cURL value\u003d\"@Theme.css\" /\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"        \u003cSplitPane fx:id\u003d\"cardList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"          \u003citems\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":"            \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" styleClass\u003d\"panel\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" styleClass\u003d\"panel\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"          \u003c/items\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"        \u003cSplitPane fx:id\u003d\"commandBox\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"          \u003citems\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":"            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"317.0\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":"          \u003c/items\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"junianob"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"junianob":16,"-":44}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junianob":2,"-":32}},{"path":"src/main/resources/view/PersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" styleClass\u003d\"panel\"  xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junianob":1,"-":7}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"junianob":1,"-":8}},{"path":"src/main/resources/view/Theme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junianob"},"content":".background {","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"junianob"},"content":"    background-color: #ffffff; /* Used in the default.html file */","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"junianob"},"content":".label {","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"junianob"},"content":".label-bright {","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"junianob"},"content":".label-header {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"junianob"},"content":".text-field {","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"junianob"},"content":".tab-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"junianob"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"junianob"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"junianob"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"junianob"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"junianob"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"junianob"},"content":".table-view {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"junianob"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"junianob"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"junianob"},"content":"    -fx-padding: 5;","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"junianob"},"content":".table-view .column-header-background {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"junianob"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"junianob"},"content":"    -fx-size: 35;","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"junianob"},"content":"    -fx-border-color:","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"junianob"},"content":"        transparent","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"junianob"},"content":"        transparent","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"junianob"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"junianob"},"content":"        transparent;","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"junianob"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"junianob"},"content":".table-view .column-header .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"junianob"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"junianob"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"junianob"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"junianob"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"junianob"},"content":"    -fx-border-color: transparent transparent transparent #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"junianob"},"content":".split-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"junianob"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"junianob"},"content":".list-view{","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"junianob"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"junianob"},"content":"    -fx-padding: 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"junianob"},"content":".list-cell {","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"junianob"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"junianob"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"junianob"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"junianob"},"content":".list-cell:filled:even {","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"junianob"},"content":".list-cell:filled:odd {","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"junianob"},"content":".list-cell:filled:selected {","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"junianob"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"junianob"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"junianob"},"content":".list-cell .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"junianob"},"content":".cell_big_label {","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"junianob"},"content":".cell_small_label {","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"junianob"},"content":".stack-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"junianob"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"junianob"},"content":".pane-with-border {","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"junianob"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"junianob"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"junianob"},"content":".status-bar {","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":145,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":146,"author":{"gitId":"junianob"},"content":".result-display {","lastModifiedDate":"2023-03-14"},{"lineNumber":147,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-14"},{"lineNumber":148,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":149,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":150,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":151,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":152,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":153,"author":{"gitId":"junianob"},"content":".result-display .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":154,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2023-03-14"},{"lineNumber":155,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":156,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"junianob"},"content":".status-bar .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":158,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":159,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":160,"author":{"gitId":"junianob"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2023-03-14"},{"lineNumber":161,"author":{"gitId":"junianob"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":163,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":164,"author":{"gitId":"junianob"},"content":".status-bar-with-border {","lastModifiedDate":"2023-03-14"},{"lineNumber":165,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-14"},{"lineNumber":166,"author":{"gitId":"junianob"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2023-03-14"},{"lineNumber":167,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":169,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":170,"author":{"gitId":"junianob"},"content":".status-bar-with-border .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":171,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":172,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":173,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":174,"author":{"gitId":"junianob"},"content":".grid-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":175,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-14"},{"lineNumber":176,"author":{"gitId":"junianob"},"content":"    -fx-border-color: derive(#ffffff, 30%);","lastModifiedDate":"2023-03-14"},{"lineNumber":177,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2023-03-14"},{"lineNumber":178,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":179,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":180,"author":{"gitId":"junianob"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-14"},{"lineNumber":182,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":183,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":184,"author":{"gitId":"junianob"},"content":".context-menu {","lastModifiedDate":"2023-03-14"},{"lineNumber":185,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2023-03-14"},{"lineNumber":186,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":188,"author":{"gitId":"junianob"},"content":".context-menu .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":189,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":190,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":191,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":192,"author":{"gitId":"junianob"},"content":".menu-bar {","lastModifiedDate":"2023-03-14"},{"lineNumber":193,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2023-03-14"},{"lineNumber":194,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":195,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":196,"author":{"gitId":"junianob"},"content":".menu-bar .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":197,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":198,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":199,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":200,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2023-03-14"},{"lineNumber":201,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":202,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":203,"author":{"gitId":"junianob"},"content":".menu .left-container {","lastModifiedDate":"2023-03-14"},{"lineNumber":204,"author":{"gitId":"junianob"},"content":"    -fx-background-color: black;","lastModifiedDate":"2023-03-14"},{"lineNumber":205,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":206,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":207,"author":{"gitId":"junianob"},"content":"/*","lastModifiedDate":"2023-03-14"},{"lineNumber":208,"author":{"gitId":"junianob"},"content":" * Metro style Push Button","lastModifiedDate":"2023-03-14"},{"lineNumber":209,"author":{"gitId":"junianob"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2023-03-14"},{"lineNumber":210,"author":{"gitId":"junianob"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2023-03-14"},{"lineNumber":211,"author":{"gitId":"junianob"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":212,"author":{"gitId":"junianob"},"content":".button {","lastModifiedDate":"2023-03-14"},{"lineNumber":213,"author":{"gitId":"junianob"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2023-03-14"},{"lineNumber":214,"author":{"gitId":"junianob"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2023-03-14"},{"lineNumber":215,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2023-03-14"},{"lineNumber":216,"author":{"gitId":"junianob"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":217,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":218,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2023-03-14"},{"lineNumber":219,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":220,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2023-03-14"},{"lineNumber":221,"author":{"gitId":"junianob"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2023-03-14"},{"lineNumber":222,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":223,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":224,"author":{"gitId":"junianob"},"content":".button:hover {","lastModifiedDate":"2023-03-14"},{"lineNumber":225,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2023-03-14"},{"lineNumber":226,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":227,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":228,"author":{"gitId":"junianob"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2023-03-14"},{"lineNumber":229,"author":{"gitId":"junianob"},"content":"  -fx-background-color: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":230,"author":{"gitId":"junianob"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":231,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":232,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":233,"author":{"gitId":"junianob"},"content":".button:focused {","lastModifiedDate":"2023-03-14"},{"lineNumber":234,"author":{"gitId":"junianob"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2023-03-14"},{"lineNumber":235,"author":{"gitId":"junianob"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":236,"author":{"gitId":"junianob"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2023-03-14"},{"lineNumber":237,"author":{"gitId":"junianob"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":238,"author":{"gitId":"junianob"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":239,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":240,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":241,"author":{"gitId":"junianob"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2023-03-14"},{"lineNumber":242,"author":{"gitId":"junianob"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2023-03-14"},{"lineNumber":243,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":244,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":245,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":246,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":247,"author":{"gitId":"junianob"},"content":".button:default {","lastModifiedDate":"2023-03-14"},{"lineNumber":248,"author":{"gitId":"junianob"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2023-03-14"},{"lineNumber":249,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2023-03-14"},{"lineNumber":250,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":251,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":252,"author":{"gitId":"junianob"},"content":".button:default:hover {","lastModifiedDate":"2023-03-14"},{"lineNumber":253,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2023-03-14"},{"lineNumber":254,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":255,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":256,"author":{"gitId":"junianob"},"content":".dialog-pane {","lastModifiedDate":"2023-03-14"},{"lineNumber":257,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":258,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":259,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":260,"author":{"gitId":"junianob"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2023-03-14"},{"lineNumber":261,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-14"},{"lineNumber":262,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":263,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":264,"author":{"gitId":"junianob"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2023-03-14"},{"lineNumber":265,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2023-03-14"},{"lineNumber":266,"author":{"gitId":"junianob"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-14"},{"lineNumber":267,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":268,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":269,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":270,"author":{"gitId":"junianob"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2023-03-14"},{"lineNumber":271,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2023-03-14"},{"lineNumber":272,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":273,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":274,"author":{"gitId":"junianob"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2023-03-14"},{"lineNumber":275,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2023-03-14"},{"lineNumber":276,"author":{"gitId":"junianob"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2023-03-14"},{"lineNumber":277,"author":{"gitId":"junianob"},"content":"    -fx-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":278,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":279,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":280,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":281,"author":{"gitId":"junianob"},"content":".scroll-bar {","lastModifiedDate":"2023-03-14"},{"lineNumber":282,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-03-14"},{"lineNumber":283,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":284,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":285,"author":{"gitId":"junianob"},"content":".scroll-bar .thumb {","lastModifiedDate":"2023-03-14"},{"lineNumber":286,"author":{"gitId":"junianob"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2023-03-14"},{"lineNumber":287,"author":{"gitId":"junianob"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2023-03-14"},{"lineNumber":288,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":289,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":290,"author":{"gitId":"junianob"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2023-03-14"},{"lineNumber":291,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-14"},{"lineNumber":292,"author":{"gitId":"junianob"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":293,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":294,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":295,"author":{"gitId":"junianob"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2023-03-14"},{"lineNumber":296,"author":{"gitId":"junianob"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2023-03-14"},{"lineNumber":297,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":298,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":299,"author":{"gitId":"junianob"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2023-03-14"},{"lineNumber":300,"author":{"gitId":"junianob"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2023-03-14"},{"lineNumber":301,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":302,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":303,"author":{"gitId":"junianob"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2023-03-14"},{"lineNumber":304,"author":{"gitId":"junianob"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2023-03-14"},{"lineNumber":305,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":306,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":307,"author":{"gitId":"junianob"},"content":"#cardPane {","lastModifiedDate":"2023-03-14"},{"lineNumber":308,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #007aff;","lastModifiedDate":"2023-03-14"},{"lineNumber":309,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":310,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":311,"author":{"gitId":"junianob"},"content":"#panel{","lastModifiedDate":"2023-03-14"},{"lineNumber":312,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #007aff;","lastModifiedDate":"2023-03-14"},{"lineNumber":313,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":314,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":315,"author":{"gitId":"junianob"},"content":"#commandTypeLabel {","lastModifiedDate":"2023-03-14"},{"lineNumber":316,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2023-03-14"},{"lineNumber":317,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2023-03-14"},{"lineNumber":318,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":319,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":320,"author":{"gitId":"junianob"},"content":"#commandTextField {","lastModifiedDate":"2023-03-14"},{"lineNumber":321,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2023-03-14"},{"lineNumber":322,"author":{"gitId":"junianob"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2023-03-14"},{"lineNumber":323,"author":{"gitId":"junianob"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-14"},{"lineNumber":324,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-14"},{"lineNumber":325,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":326,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":327,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":328,"author":{"gitId":"junianob"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2023-03-14"},{"lineNumber":329,"author":{"gitId":"junianob"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2023-03-14"},{"lineNumber":330,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":331,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":332,"author":{"gitId":"junianob"},"content":"#resultDisplay .content {","lastModifiedDate":"2023-03-14"},{"lineNumber":333,"author":{"gitId":"junianob"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2023-03-14"},{"lineNumber":334,"author":{"gitId":"junianob"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":335,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":336,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":337,"author":{"gitId":"junianob"},"content":"#tags {","lastModifiedDate":"2023-03-14"},{"lineNumber":338,"author":{"gitId":"junianob"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2023-03-14"},{"lineNumber":339,"author":{"gitId":"junianob"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2023-03-14"},{"lineNumber":340,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":341,"author":{"gitId":"junianob"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":342,"author":{"gitId":"junianob"},"content":"#tags .label {","lastModifiedDate":"2023-03-14"},{"lineNumber":343,"author":{"gitId":"junianob"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-14"},{"lineNumber":344,"author":{"gitId":"junianob"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2023-03-14"},{"lineNumber":345,"author":{"gitId":"junianob"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2023-03-14"},{"lineNumber":346,"author":{"gitId":"junianob"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2023-03-14"},{"lineNumber":347,"author":{"gitId":"junianob"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2023-03-14"},{"lineNumber":348,"author":{"gitId":"junianob"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2023-03-14"},{"lineNumber":349,"author":{"gitId":"junianob"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"junianob":349}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"    //    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"    //    public void execute_commandExecutionError_throwsCommandException() { // test to delete deck","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"    //        String deleteDeckCommand \u003d \"deleteDeck 10\";","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    //        assertCommandException(deleteDeckCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"    //    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() { // deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"        // JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"        //         new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"        // JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        //        new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        // StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        // logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"        // String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        // Card expectedCard \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        // ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        // expectedModel.addCard(expectedCard);","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        // String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        // assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"HJ-PRK"},"content":"        public void saveAddressBook(ReadOnlyMasterDeck addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"ruiyigan":18,"unfazing":1,"-":131,"HJ-PRK":2}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        model.selectDeck(Index.fromOneBased(1));","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        Card validCard \u003d new PersonBuilder().build();","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"        expectedModel.addCard(validCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"        assertCommandSuccess(new AddCommand(validCard), model,","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validCard), expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        Card cardInList \u003d model.getMasterDeck().getCardList().get(0);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(new AddCommand(cardInList), model, AddCommand.MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"ruiyigan":1,"unfazing":9,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.review.Review;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"        Card validCard \u003d new PersonBuilder().build();","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"        CommandResult commandResult \u003d new AddCommand(validCard).execute(modelStub);","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCard), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        assertEquals(Arrays.asList(validCard), modelStub.personsAdded);","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"        Card validCard \u003d new PersonBuilder().build();","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"        AddCommand addCommand \u003d new AddCommand(validCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"unfazing"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CARD, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"        Card alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"        Card bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"unfazing"},"content":"        public Path getMasterDeckFilePath() {","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"        public void setMasterDeckFilePath(Path deckFilePath) {","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"        public void addCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"        public void setMasterDeck(ReadOnlyMasterDeck newData) {","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"        public ReadOnlyMasterDeck getMasterDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"unfazing"},"content":"        public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"unfazing"},"content":"        public void deleteCard(Card target) {","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"        public void setCard(Card target, Card editedCard) {","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"unfazing"},"content":"        public ObservableList\u003cCard\u003e getFilteredCardList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"rockman007372"},"content":"        public ObservableList\u003cDeck\u003e getFilteredDeckList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"rockman007372"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"rockman007372"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"unfazing"},"content":"            return; // AddCommand does call updateFilteredCardList method","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"HJ-PRK"},"content":"        @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":159,"author":{"gitId":"HJ-PRK"},"content":"        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {","lastModifiedDate":"2023-03-11"},{"lineNumber":160,"author":{"gitId":"HJ-PRK"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-11"},{"lineNumber":161,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":162,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":163,"author":{"gitId":"unfazing"},"content":"        /* NEWLY ADDED COMMANDS TO SUPPORT DECK LIST */","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"unfazing"},"content":"        @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"ruiyigan"},"content":"        public Optional\u003cDeck\u003e getSelectedDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"ruiyigan"},"content":"            return Optional.of(new Deck(\"Default\"));","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"unfazing"},"content":"        @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":170,"author":{"gitId":"HJ-PRK"},"content":"        public void addDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":171,"author":{"gitId":"unfazing"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":173,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":174,"author":{"gitId":"HJ-PRK"},"content":"        @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":175,"author":{"gitId":"HJ-PRK"},"content":"        public boolean hasDeck(Deck deck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-10"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":180,"author":{"gitId":"HJ-PRK"},"content":"        public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":184,"author":{"gitId":"HJ-PRK"},"content":"        /*","lastModifiedDate":"2023-03-11"},{"lineNumber":185,"author":{"gitId":"HJ-PRK"},"content":"        @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":186,"author":{"gitId":"HJ-PRK"},"content":"        public void setDeck(Deck target, Deck editedDeck) {","lastModifiedDate":"2023-03-11"},{"lineNumber":187,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":188,"author":{"gitId":"HJ-PRK"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":189,"author":{"gitId":"HJ-PRK"},"content":"         */","lastModifiedDate":"2023-03-11"},{"lineNumber":190,"author":{"gitId":"HJ-PRK"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":192,"author":{"gitId":"HJ-PRK"},"content":"        public void removeDeck(Deck key) {","lastModifiedDate":"2023-03-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":197,"author":{"gitId":"unfazing"},"content":"        public void selectDeck(Index deckIndex) {","lastModifiedDate":"2023-03-10"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-10"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":202,"author":{"gitId":"unfazing"},"content":"        public void unselectDeck() {","lastModifiedDate":"2023-03-10"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":207,"author":{"gitId":"ruiyigan"},"content":"        public String getSelectedDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":212,"author":{"gitId":"unfazing"},"content":"        public int getDeckSize(int deckIndex) {","lastModifiedDate":"2023-03-14"},{"lineNumber":213,"author":{"gitId":"unfazing"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":214,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":215,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":216,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":217,"author":{"gitId":"rockman007372"},"content":"        public Optional\u003cReview\u003e getReview() {","lastModifiedDate":"2023-03-14"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":222,"author":{"gitId":"unfazing"},"content":"        public void reviewDeck(Index deckIndex) {","lastModifiedDate":"2023-03-13"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":227,"author":{"gitId":"unfazing"},"content":"        public void endReview() {","lastModifiedDate":"2023-03-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":232,"author":{"gitId":"unfazing"},"content":"        public String getReviewDeckName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":235,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":236,"author":{"gitId":"rockman007372"},"content":"        @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":237,"author":{"gitId":"rockman007372"},"content":"        public void flipCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":238,"author":{"gitId":"rockman007372"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":239,"author":{"gitId":"rockman007372"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":240,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":241,"author":{"gitId":"unfazing"},"content":"        @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":242,"author":{"gitId":"unfazing"},"content":"        public void markWrong() {","lastModifiedDate":"2023-03-14"},{"lineNumber":243,"author":{"gitId":"unfazing"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":244,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":245,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":246,"author":{"gitId":"unfazing"},"content":"        @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":247,"author":{"gitId":"unfazing"},"content":"        public void markCorrect() {","lastModifiedDate":"2023-03-14"},{"lineNumber":248,"author":{"gitId":"unfazing"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":249,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":250,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":251,"author":{"gitId":"unfazing"},"content":"        @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":252,"author":{"gitId":"unfazing"},"content":"        public void goToPrevCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":253,"author":{"gitId":"unfazing"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":254,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":255,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":256,"author":{"gitId":"unfazing"},"content":"        @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":257,"author":{"gitId":"unfazing"},"content":"        public void goToNextCard() {","lastModifiedDate":"2023-03-14"},{"lineNumber":258,"author":{"gitId":"unfazing"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":259,"author":{"gitId":"unfazing"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":260,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"unfazing"},"content":"     * A Model stub that contains a single card.","lastModifiedDate":"2023-03-10"},{"lineNumber":265,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":267,"author":{"gitId":"unfazing"},"content":"        private final Card card;","lastModifiedDate":"2023-03-10"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":269,"author":{"gitId":"unfazing"},"content":"        ModelStubWithPerson(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":270,"author":{"gitId":"unfazing"},"content":"            requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":271,"author":{"gitId":"unfazing"},"content":"            this.card \u003d card;","lastModifiedDate":"2023-03-10"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":275,"author":{"gitId":"unfazing"},"content":"        public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":276,"author":{"gitId":"unfazing"},"content":"            requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":277,"author":{"gitId":"unfazing"},"content":"            return this.card.isSameCard(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":282,"author":{"gitId":"unfazing"},"content":"     * A Model stub that always accept the card being added.","lastModifiedDate":"2023-03-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":285,"author":{"gitId":"unfazing"},"content":"        final ArrayList\u003cCard\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-10"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":287,"author":{"gitId":"unfazing"},"content":"        public boolean hasCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":288,"author":{"gitId":"unfazing"},"content":"            requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":289,"author":{"gitId":"unfazing"},"content":"            return personsAdded.stream().anyMatch(card::isSameCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":293,"author":{"gitId":"unfazing"},"content":"        public void addCard(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":294,"author":{"gitId":"unfazing"},"content":"            requireNonNull(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":295,"author":{"gitId":"unfazing"},"content":"            personsAdded.add(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":299,"author":{"gitId":"unfazing"},"content":"        public ReadOnlyMasterDeck getMasterDeck() {","lastModifiedDate":"2023-03-13"},{"lineNumber":300,"author":{"gitId":"HJ-PRK"},"content":"            return new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"rockman007372":10,"ruiyigan":5,"unfazing":82,"-":186,"HJ-PRK":21}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        expectedModel.setMasterDeck(new MasterDeck());","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"unfazing":1,"-":30,"HJ-PRK":1}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_QUESTION + VALID_NAME_AMY;","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_QUESTION + VALID_NAME_BOB;","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ANSWER + VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ANSWER + VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_QUESTION + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ANSWER; // empty string not allowed for addresses","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"    public static final EditCommand.EditCardDescriptor DESC_AMY;","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public static final EditCommand.EditCardDescriptor DESC_BOB;","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"HJ-PRK"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"HJ-PRK"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"     * - the address book, filtered card list and selected card in {@code actualModel} remain unchanged","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        MasterDeck expectedAddressBook \u003d new MasterDeck(actualModel.getMasterDeck());","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedAddressBook, actualModel.getMasterDeck());","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"     * Updates {@code model}\u0027s filtered list to show only the card at the given {@code targetIndex} in the","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCardList().size());","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":107,"author":{"gitId":"unfazing"},"content":"        Card card \u003d model.getFilteredCardList().get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"unfazing"},"content":"        final String[] splitName \u003d card.getQuestion().question.split(\"\\\\s+\");","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"        model.updateFilteredCardList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":111,"author":{"gitId":"unfazing"},"content":"        assertEquals(1, model.getFilteredCardList().size());","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"ruiyigan":10,"unfazing":13,"-":88,"HJ-PRK":3}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"        expectedModel.deleteCard(cardToDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"        expectedModel.deleteCard(cardToDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMasterDeck().getCardList().size());","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"unfazing"},"content":"        model.updateFilteredCardList(p -\u003e false);","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"unfazing"},"content":"        assertTrue(model.getFilteredCardList().isEmpty());","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"ruiyigan":4,"unfazing":12,"-":93}},{"path":"src/test/java/seedu/address/logic/commands/EditCardDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"public class EditCardDescriptorTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor descriptorWithSameValues \u003d new EditCommand.EditCardDescriptor(DESC_AMY);","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY)","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"                .withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"ruiyigan":3,"unfazing":1,"-":44}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"        Card editedCard \u003d new PersonBuilder().build();","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedCard).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        expectedModel.setCard(model.getFilteredCardList().get(0), editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredCardList().size());","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        Card lastCard \u003d model.getFilteredCardList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":55,"author":{"gitId":"unfazing"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"        Card editedCard \u003d personInList.withName(VALID_NAME_BOB)","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"                .withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"        expectedModel.setCard(lastCard, editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditCardDescriptor());","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"        Card editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"        Card cardInFilteredList \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        Card editedCard \u003d new PersonBuilder(cardInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"        Model expectedModel \u003d new ModelManager(new MasterDeck(model.getMasterDeck()), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"        expectedModel.setCard(model.getFilteredCardList().get(0), editedCard);","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"        Card firstCard \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstCard).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"unfazing"},"content":"        // edit card in filtered list into a duplicate in address book","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"        Card cardInList \u003d model.getMasterDeck().getCardList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"unfazing"},"content":"                new EditPersonDescriptorBuilder(cardInList).build());","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"unfazing"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMasterDeck().getCardList().size());","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"ruiyigan"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor copyDescriptor \u003d new EditCardDescriptor(DESC_AMY);","lastModifiedDate":"2023-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"ruiyigan":15,"unfazing":21,"-":133,"HJ-PRK":3}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"unfazing"},"content":"        expectedModel.updateFilteredCardList(predicate);","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"unfazing"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        expectedModel.updateFilteredCardList(predicate);","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"unfazing"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}.","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"    private QuestionContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"ruiyigan":3,"unfazing":15,"-":65}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"        expectedModel \u003d new ModelManager(model.getMasterDeck(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"unfazing":1,"-":38}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        //        Card expectedCard \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        //        // whitespace only preamble","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCard));","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        //        // multiple names - last name accepted","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCard));","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        //        // multiple addresses - last address accepted","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseSuccess(parser, NAME_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCard));","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        //        // multiple tags - all accepted","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        //        Card expectedCardMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        //                .build();","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseSuccess(parser, NAME_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedCardMultipleTags));","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        //        Card expectedCard \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseSuccess(parser, NAME_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        //                new AddCommand(expectedCard));","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"HJ-PRK"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseFailure(parser, INVALID_NAME_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"        //        // invalid address","lastModifiedDate":"2023-03-11"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseFailure(parser, NAME_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2023-03-11"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Answer.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        //        // invalid tag","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseFailure(parser, NAME_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        //                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        //        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        //                Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        //","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        //        // non-empty preamble","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"        //        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"        //                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"        //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"ruiyigan":41,"-":44,"HJ-PRK":3}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Question.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Card} being edited,","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"HJ-PRK"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_ADDRESS_AMY, Question.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":89,"author":{"gitId":"HJ-PRK"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"                 + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"                .withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"HJ-PRK"},"content":"    /*","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"        String userInput \u003d String.valueOf(targetIndex.getOneBased());","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":118,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"HJ-PRK"},"content":"        String userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"HJ-PRK"},"content":"                + TAG_DESC_FRIEND + ADDRESS_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"HJ-PRK"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"HJ-PRK"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"HJ-PRK"},"content":"    /*","lastModifiedDate":"2023-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2023-03-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2023-03-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-11"},{"lineNumber":155,"author":{"gitId":"HJ-PRK"},"content":"        String userInput \u003d String.valueOf(targetIndex.getOneBased());","lastModifiedDate":"2023-03-11"},{"lineNumber":156,"author":{"gitId":"ruiyigan"},"content":"        EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2023-03-11"},{"lineNumber":161,"author":{"gitId":"HJ-PRK"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-11"},{"lineNumber":162,"author":{"gitId":"HJ-PRK"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-03-11"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":167,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"ruiyigan"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"ruiyigan":7,"unfazing":5,"-":151,"HJ-PRK":16}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"                new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"unfazing":2,"-":32}},{"path":"src/test/java/seedu/address/logic/parser/MasterDeckParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"public class MasterDeckParserTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    private final MasterDeckParser parser \u003d new MasterDeckParser();","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    public void parseCommand_add() throws Exception { // edit in the future as deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        // Card card \u003d new PersonBuilder().build();","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        // AddCommand command \u003d (AddCommand) parser.parseCommandWhenDeckNotSelected(PersonUtil.getAddCommand(card));","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        // assertEquals(new AddCommand(card), command);","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(ClearCommand.COMMAND_WORD","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    public void parseCommand_delete() throws Exception { // edit in the future as deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        // DeleteCommand command \u003d (DeleteCommand) parser.parseCommandWhenDeckNotSelected(","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        //        DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        // assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public void parseCommand_edit() throws Exception { // edit in the future as deck needs to be selected","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        // Card card \u003d new PersonBuilder().build();","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        // EditCardDescriptor descriptor \u003d new EditPersonDescriptorBuilder(card).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        // EditCommand command \u003d (EditCommand) parser.parseCommandWhenDeckNotSelected(EditCommand.COMMAND_WORD","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"        //        + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"        //        + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        // assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(ExitCommand.COMMAND_WORD","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommandWhenDeckNotSelected(","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        assertEquals(new FindCommand(new QuestionContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(HelpCommand.COMMAND_WORD","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        assertTrue(parser.parseCommandWhenDeckNotSelected(ListCommand.COMMAND_WORD","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"                + \" 3\") instanceof ListCommand);","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"ruiyigan"},"content":"            -\u003e parser.parseCommandWhenDeckNotSelected(\"\"));","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"                -\u003e parser.parseCommandWhenDeckNotSelected(\"unknownCommand\"));","lastModifiedDate":"2023-03-11"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"ruiyigan":33,"unfazing":2,"-":63}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_NAME));","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"        Question expectedQuestion \u003d new Question(VALID_NAME);","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_NAME));","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        Question expectedQuestion \u003d new Question(VALID_NAME);","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(expectedQuestion, ParserUtil.parseQuestion(nameWithWhitespace));","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ADDRESS));","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        Answer expectedAnswer \u003d new Answer(VALID_ADDRESS);","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ADDRESS));","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"unfazing"},"content":"        Answer expectedAnswer \u003d new Answer(VALID_ADDRESS);","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"ruiyigan"},"content":"        assertEquals(expectedAnswer, ParserUtil.parseAnswer(addressWithWhitespace));","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"ruiyigan":8,"unfazing":6,"-":130}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    private final MasterDeck addressBook \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        assertEquals(Collections.emptyList(), addressBook.getCardList());","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck newData \u003d getTypicalAddressBook();","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"        // Two cards with the same identity fields","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"        Card editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e newCards \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeckStub newData \u003d new MasterDeckStub(newCards);","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasCard(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"        assertFalse(addressBook.hasCard(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        addressBook.addCard(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"        assertTrue(addressBook.hasCard(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"unfazing"},"content":"        addressBook.addCard(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        Card editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"unfazing"},"content":"        assertTrue(addressBook.hasCard(editedAlice));","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getCardList().remove(0));","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"     * A stub ReadOnlyDeck whose cards list can violate interface constraints.","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"HJ-PRK"},"content":"    private static class MasterDeckStub implements ReadOnlyMasterDeck {","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"        private final ObservableList\u003cCard\u003e cards \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"HJ-PRK"},"content":"        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-11"},{"lineNumber":93,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeckStub(Collection\u003cCard\u003e cards) {","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"unfazing"},"content":"            this.cards.setAll(cards);","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"        public ObservableList\u003cCard\u003e getCardList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"            return cards;","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"HJ-PRK"},"content":"        public ObservableList\u003cDeck\u003e getDeckList() {","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"HJ-PRK"},"content":"            return decks;","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"unfazing":19,"-":80,"HJ-PRK":9}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.QuestionContainsKeywordsPredicate;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        assertEquals(new MasterDeck(), new MasterDeck(modelManager.getMasterDeck()));","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setMasterDeckFilePath(null));","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"        modelManager.setMasterDeckFilePath(path);","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"unfazing"},"content":"        assertEquals(path, modelManager.getMasterDeckFilePath());","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCard(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"        assertFalse(modelManager.hasCard(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"        modelManager.addCard(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        assertTrue(modelManager.hasCard(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCardList().remove(0));","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck differentAddressBook \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"unfazing"},"content":"        String[] keywords \u003d ALICE.getQuestion().question.split(\"\\\\s+\");","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"unfazing"},"content":"        modelManager.updateFilteredCardList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"HJ-PRK"},"content":"        //assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2023-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"        modelManager.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"unfazing":14,"-":115,"HJ-PRK":3}},{"path":"src/test/java/seedu/address/model/card/AnswerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"public class AnswerTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Answer(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAddress));","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        assertFalse(Answer.isValidAnswer(\"\")); // empty string","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        assertFalse(Answer.isValidAnswer(\" \")); // spaces only","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        assertTrue(Answer.isValidAnswer(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        assertTrue(Answer.isValidAnswer(\"-\")); // one character","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        assertTrue(Answer.isValidAnswer(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"unfazing":10,"-":26}},{"path":"src/test/java/seedu/address/model/card/CardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"public class CardTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"        Card card \u003d new PersonBuilder().build();","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e card.getTags().remove(0));","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        assertTrue(ALICE.isSameCard(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        assertFalse(ALICE.isSameCard(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"        Card editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"        assertTrue(ALICE.isSameCard(editedAlice));","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        assertFalse(ALICE.isSameCard(editedAlice));","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        Card editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        assertFalse(BOB.isSameCard(editedBob));","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"        assertFalse(BOB.isSameCard(editedBob));","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        Card aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"unfazing"},"content":"        Card editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"unfazing":14,"-":66,"HJ-PRK":1}},{"path":"src/test/java/seedu/address/model/card/QuestionContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"public class QuestionContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"        // different card -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"unfazing"},"content":"                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"unfazing"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"unfazing"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"unfazing"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"unfazing"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"        // Keywords match address, but does not match name","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"HJ-PRK"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"HJ-PRK"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"unfazing":16,"-":59,"HJ-PRK":3}},{"path":"src/test/java/seedu/address/model/card/QuestionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"unfazing"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"unfazing"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"public class QuestionTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"unfazing"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Question(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"unfazing"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidName));","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    public void isValidName() {","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"        // null name","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        // invalid name","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        assertFalse(Question.isValidQuestion(\"\")); // empty string","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"        assertFalse(Question.isValidQuestion(\" \")); // spaces only","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"unfazing"},"content":"        assertFalse(Question.isValidQuestion(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"unfazing"},"content":"        assertFalse(Question.isValidQuestion(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        // valid name","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"unfazing"},"content":"        assertTrue(Question.isValidQuestion(\"peter jack\")); // alphabets only","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"unfazing"},"content":"        assertTrue(Question.isValidQuestion(\"12345\")); // numbers only","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        assertTrue(Question.isValidQuestion(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"unfazing"},"content":"        assertTrue(Question.isValidQuestion(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"        assertTrue(Question.isValidQuestion(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"unfazing"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"unfazing":40}},{"path":"src/test/java/seedu/address/model/card/UniqueDeckListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"unfazing"},"content":"package seedu.address.model.card;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"HJ-PRK"},"content":"public class UniqueDeckListTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.contains(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        assertFalse(uniqueCardList.contains(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        assertTrue(uniqueCardList.contains(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"unfazing"},"content":"        Card editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"unfazing"},"content":"        assertTrue(uniqueCardList.contains(editedAlice));","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.add(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCardList.add(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(null, ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(ALICE, null));","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"unfazing"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniqueCardList.setCard(ALICE, ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.setCard(ALICE, ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"unfazing"},"content":"        expectedUniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"unfazing"},"content":"        Card editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.setCard(ALICE, editedAlice);","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"unfazing"},"content":"        expectedUniqueCardList.add(editedAlice);","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.setCard(ALICE, BOB);","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"unfazing"},"content":"        expectedUniqueCardList.add(BOB);","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(BOB);","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"unfazing"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCardList.setCard(ALICE, BOB));","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.remove(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"unfazing"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniqueCardList.remove(ALICE));","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.remove(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((UniqueCardList) null));","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"unfazing"},"content":"        expectedUniqueCardList.add(BOB);","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.setCards(expectedUniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"unfazing"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((List\u003cCard\u003e) null));","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":152,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e cardList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"unfazing"},"content":"        uniqueCardList.setCards(cardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"unfazing"},"content":"        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"unfazing"},"content":"        expectedUniqueCardList.add(BOB);","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"unfazing"},"content":"        assertEquals(expectedUniqueCardList, uniqueCardList);","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"unfazing"},"content":"        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"unfazing"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniqueCardList.setCards(listWithDuplicateCards));","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"unfazing"},"content":"            -\u003e uniqueCardList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"unfazing":58,"-":111,"HJ-PRK":1}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedCardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.storage.JsonAdaptedCard.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":"public class JsonAdaptedCardTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    private static final String VALID_NAME \u003d BENSON.getQuestion().toString();","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAnswer().toString();","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    private static final String VALID_DECK \u003d BENSON.getDeck().toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard person \u003d new JsonAdaptedCard(BENSON);","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard person \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"                new JsonAdaptedCard(INVALID_NAME, VALID_ADDRESS, VALID_TAGS, VALID_DECK);","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard person \u003d new JsonAdaptedCard(null, VALID_ADDRESS, VALID_TAGS, VALID_DECK);","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard person \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"                new JsonAdaptedCard(VALID_NAME, INVALID_ADDRESS, VALID_TAGS, VALID_DECK);","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard person \u003d new JsonAdaptedCard(VALID_NAME, null, VALID_TAGS, VALID_DECK);","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"        JsonAdaptedCard person \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"                new JsonAdaptedCard(VALID_NAME, VALID_ADDRESS, invalidTags, VALID_DECK);","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ruiyigan":11,"unfazing":9,"-":54}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"HJ-PRK"},"content":"    private java.util.Optional\u003cReadOnlyMasterDeck\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"HJ-PRK"},"content":"    /*","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":68,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck original \u003d getTypicalAddressBook();","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"HJ-PRK"},"content":"        ReadOnlyMasterDeck readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(readBack));","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"unfazing"},"content":"        original.addCard(HOON);","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"unfazing"},"content":"        original.removeCard(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(readBack));","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"unfazing"},"content":"        original.addCard(IDA);","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(readBack));","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"HJ-PRK"},"content":"    private void saveAddressBook(ReadOnlyMasterDeck addressBook, String filePath) {","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"HJ-PRK"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new MasterDeck(), null));","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"unfazing":3,"-":97,"HJ-PRK":12}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"HJ-PRK"},"content":"    /*","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":44,"HJ-PRK":5}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.ReadOnlyMasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck original \u003d getTypicalAddressBook();","lastModifiedDate":"2023-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"HJ-PRK"},"content":"        ReadOnlyMasterDeck retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"HJ-PRK"},"content":"        assertEquals(original, new MasterDeck(retrieved));","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":63,"HJ-PRK":5}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":" *     {@code Deck ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"HJ-PRK"},"content":"    private MasterDeck addressBook;","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"HJ-PRK"},"content":"        addressBook \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"HJ-PRK"},"content":"    public AddressBookBuilder(MasterDeck addressBook) {","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"unfazing"},"content":"     * Adds a new {@code Card} to the {@code Deck} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"unfazing"},"content":"    public AddressBookBuilder withPerson(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"        addressBook.addCard(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"HJ-PRK"},"content":"    public MasterDeck build() {","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"unfazing":5,"-":24,"HJ-PRK":5}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":" * A utility class to help with building EditCardDescriptor objects.","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    private EditCommand.EditCardDescriptor descriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"        descriptor \u003d new EditCommand.EditCardDescriptor();","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    public EditPersonDescriptorBuilder(EditCommand.EditCardDescriptor descriptor) {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"        this.descriptor \u003d new EditCommand.EditCardDescriptor(descriptor);","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"     * Returns an {@code EditCardDescriptor} with fields containing {@code card}\u0027s details","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"    public EditPersonDescriptorBuilder(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"        descriptor \u003d new EditCardDescriptor();","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setQuestion(card.getQuestion());","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setAnswer(card.getAnswer());","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"        descriptor.setTags(card.getTags());","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Question} of the {@code EditCardDescriptor} that we are building.","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setQuestion(new Question(name));","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Answer} of the {@code EditCardDescriptor} that we are building.","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        descriptor.setAnswer(new Answer(address));","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCardDescriptor}","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"    public EditCommand.EditCardDescriptor build() {","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"ruiyigan":17,"unfazing":5,"-":46}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Question;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.model.deck.Deck;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" * A utility class to help with building Card objects.","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    public static final String DEFAULT_DECK \u003d \"Default\";","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    private Question question;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"    private Answer answer;","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    private Optional\u003cDeck\u003e deck;","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        question \u003d new Question(DEFAULT_NAME);","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        answer \u003d new Answer(DEFAULT_ADDRESS);","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"        deck \u003d Optional.of(new Deck(DEFAULT_DECK));","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"     * Initializes the PersonBuilder with the data of {@code cardToCopy}.","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":41,"author":{"gitId":"unfazing"},"content":"    public PersonBuilder(Card cardToCopy) {","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"        question \u003d cardToCopy.getQuestion();","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"        answer \u003d cardToCopy.getAnswer();","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"unfazing"},"content":"        tags \u003d new HashSet\u003c\u003e(cardToCopy.getTags());","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        deck \u003d cardToCopy.getDeck();","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"unfazing"},"content":"     * Sets the {@code Question} of the {@code Card} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"        this.question \u003d new Question(name);","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"unfazing"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Card} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"     * Sets the {@code Answer} of the {@code Card} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"unfazing"},"content":"        this.answer \u003d new Answer(address);","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"     * Sets the {@code Deck} of the {@code Card} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"    public PersonBuilder withDeck(String deckName) {","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        this.deck \u003d Optional.of(new Deck(DEFAULT_DECK));","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":80,"author":{"gitId":"unfazing"},"content":"    public Card build() {","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"        return new Card(question, answer, tags, deck);","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"ruiyigan":11,"unfazing":19,"-":54}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":" * A utility class for Card.","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"unfazing"},"content":"     * Returns an add command string for adding the {@code card}.","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    public static String getAddCommand(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"unfazing"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"unfazing"},"content":"     * Returns the part of command string for the given {@code card}\u0027s details.","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"unfazing"},"content":"    public static String getPersonDetails(Card card) {","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        sb.append(PREFIX_QUESTION + card.getQuestion().question + \" \");","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"unfazing"},"content":"        sb.append(PREFIX_ANSWER + card.getAnswer().answer + \" \");","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"unfazing"},"content":"        card.getTags().stream().forEach(","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"     * Returns the part of command string for the given {@code EditCardDescriptor}\u0027s details.","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"    public static String getEditPersonDescriptorDetails(EditCardDescriptor descriptor) {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        descriptor.getQuestion().ifPresent(name -\u003e sb.append(PREFIX_QUESTION).append(name.question).append(\" \"));","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"        descriptor.getAnswer().ifPresent(address -\u003e sb.append(PREFIX_ANSWER).append(address.answer).append(\" \"));","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"ruiyigan":8,"unfazing":9,"-":39}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"unfazing"},"content":"     * Returns the middle index of the card in the {@code model}\u0027s card list.","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"unfazing"},"content":"        return Index.fromOneBased(model.getFilteredCardList().size() / 2);","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"unfazing"},"content":"     * Returns the last index of the card in the {@code model}\u0027s card list.","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"unfazing"},"content":"        return Index.fromOneBased(model.getFilteredCardList().size());","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"unfazing"},"content":"     * Returns the card in the {@code model}\u0027s card list at {@code index}.","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"unfazing"},"content":"    public static Card getPerson(Model model, Index index) {","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"unfazing"},"content":"        return model.getFilteredCardList().get(index.getZeroBased());","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"unfazing":8,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":14,"author":{"gitId":"HJ-PRK"},"content":"import seedu.address.model.MasterDeck;","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"unfazing"},"content":"import seedu.address.model.card.Card;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":18,"author":{"gitId":"unfazing"},"content":" * A utility class containing a list of {@code Card} objects to be used in tests.","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"unfazing"},"content":"    public static final Card ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"HJ-PRK"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\")","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"            .withTags(\"friends\").withDeck(\"Default\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"unfazing"},"content":"    public static final Card BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"            .withTags(\"owesMoney\", \"friends\").withDeck(\"Default\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"HJ-PRK"},"content":"    public static final Card CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withAddress(\"wall street\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"HJ-PRK"},"content":"    public static final Card DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"            .withAddress(\"10th street\").withTags(\"friends\").withDeck(\"Default\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public static final Card ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withAddress(\"michegan ave\")","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"Default\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    public static final Card FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withAddress(\"little tokyo\")","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"Default\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"    public static final Card GEORGE \u003d new PersonBuilder().withName(\"George Best\").withAddress(\"4th street\")","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"            .withDeck(\"Default\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":39,"author":{"gitId":"HJ-PRK"},"content":"    public static final Card HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withAddress(\"little india\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"HJ-PRK"},"content":"    public static final Card IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":42,"author":{"gitId":"unfazing"},"content":"    // Manually added - Card\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"HJ-PRK"},"content":"    public static final Card AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"HJ-PRK"},"content":"            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"HJ-PRK"},"content":"    public static final Card BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"HJ-PRK"},"content":"            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"unfazing"},"content":"     * Returns an {@code Deck} with all the typical persons.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"HJ-PRK"},"content":"    public static MasterDeck getTypicalAddressBook() {","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"HJ-PRK"},"content":"        MasterDeck ab \u003d new MasterDeck();","lastModifiedDate":"2023-03-11"},{"lineNumber":58,"author":{"gitId":"unfazing"},"content":"        for (Card card : getTypicalPersons()) {","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"unfazing"},"content":"            ab.addCard(card);","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":61,"author":{"gitId":"unfazing"},"content":"        ab.initDecks();","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":65,"author":{"gitId":"unfazing"},"content":"    public static List\u003cCard\u003e getTypicalPersons() {","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"ruiyigan":9,"unfazing":10,"-":37,"HJ-PRK":12}}]
