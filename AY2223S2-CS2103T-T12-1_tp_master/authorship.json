[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"[![Java CI](https://github.com/AY2223S2-CS2103T-T12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S2-CS2103T-T12-1/tp/actions)","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"* This is the project repository for T12 team 1 of CS2103T for AY2022/2023","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"Semester 2. The name of this project is Patientist, a combination of the","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"words patient and list.","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"* This project seeks to streamline the management systems of hospitals, with","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"useful features such as but not limited to:","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"  * Tracking patient records","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"  * Tracking staff assignments","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"  * Individual patient status tracking","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"  * etc.","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"* This application is developed with command line interface optimisation. Reason:","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"  * Hospital staff are likely to have to use this system heavily in their jobs","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    and will thus become familiar with the system quickly","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"  * Thus, this application has a high skill cap where a skilled user comfortable","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    with commmand line interfaces can get the job done faster than with GUI applications","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"euph00":15,"pzhengze":1,"-":4}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"tasks.withType(JavaExec) {","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"mainClassName \u003d \u0027seedu.patientist.Main\u0027","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"euph00":5,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"### Lin Chieh","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"\u003cimg src\u003d\"images/euph00.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"[[github](https://github.com/euph00)]","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"* Role: Team member","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"* Responsibilities: ??","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"### Zheng Ze","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"\u003cimg src\u003d\"images/pzhengze.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"[[github](http://github.com/pzhengze)]","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"[[portfolio](team/pzhengze.md)]","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"* Role: Team member","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"* Responsibilities: ??","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"### Lucas","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"\u003cimg src\u003d\"images/lukkesreysandeur.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"[[github](http://github.com/lukkesreysandeur)]","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"[[portfolio](team/lukkesreysandeur.md)]","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"* Role: Team member","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"* Responsibilities: ??","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"### Glenn Ong JunJie","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"\u003cimg src\u003d\"images/glennongjunjie.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"[[github](https://github.com/GlennOngJunJie)]","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"[[portfolio](team/glennongjunjie.md)]","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"* Role: Team Member","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"GlennOngJunJie"},"content":"* Responsibilities: ??","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"### Shin Jin","lastModifiedDate":"2023-03-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"\u003cimg src\u003d\"Desktop/NUS/Y2S2/CS2103T/tp/docs/images/jinnieshin.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"[[github](http://github.com/jinnieshin)]","lastModifiedDate":"2023-03-05"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"[[portfolio](team/jinnieshin.md)]","lastModifiedDate":"2023-03-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"* Role: Team member","lastModifiedDate":"2023-03-05"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"* Responsibilities: ??","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"lukkesreysandeur":6,"euph00":5,"GlennOngJunJie":6,"-":30,"pzhengze":6,"jinnieshin":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"## **Preamble**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"This is the developer guide for Patientist, a hospital management system that focuses on CLI-based user interface.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"This guide will provide developers looking to extend the codebase with a diagram-oriented overview of the system\u0027s","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"implementation, detailing high level architecture all the way down to fine-grained component implementation. Class","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"diagrams are colour coded as","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"* Green: UI","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"* Blue: Logic","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"* Red: Model","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"* Yellow: Storage","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"and object diagrams are in black and white.","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/java/seedu/patientist/Main.java) and [`MainApp`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/java/seedu/patientist/MainApp.java). It is responsible for,","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/java/seedu/patientist/ui/Ui.java)","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"jinnieshin"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `DetailsPopup`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2023-03-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/java/seedu/patientist/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"**API** : [`Logic.java`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/java/seedu/patientist/logic/Logic.java)","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"1. When `Logic` is called upon to execute a command, it uses the `PatientistParser` class to parse the user command.","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"2. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddPatientCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"3. The command can communicate with the `Model` when it is executed (e.g. to add a `Patient`).","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"pzhengze"},"content":"* When called upon to parse a user command, the `PatientistParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddPatientCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddPatientCommand`) which the `PatientistParser` returns back as a `Command` object.","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"pzhengze"},"content":"* All `XYZCommandParser` classes (e.g., `AddPatientCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"pzhengze"},"content":"**API** : [`Model.java`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/java/seedu/patientist/model/Model.java)","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"* stores the patientist data, i,e all `Ward` objects (contained in a singleton `WardList` object),","lastModifiedDate":"2023-03-26"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"all `Person` objects (contained within `UniquePersonList` objects within their respective wards)","lastModifiedDate":"2023-03-26"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"* differentiates between `Patient` and `Staff` objects within each `Ward`, each are kept in their","lastModifiedDate":"2023-03-26"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"separate `UniquePersonList`.","lastModifiedDate":"2023-03-26"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g. results of search, lsward, lsstf, lspat etc)","lastModifiedDate":"2023-03-26"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"as separate filtered list which is available to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e`","lastModifiedDate":"2023-03-26"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when","lastModifiedDate":"2023-03-26"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"the data in the list change.","lastModifiedDate":"2023-03-26"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside","lastModifiedDate":"2023-03-26"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2023-03-26"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities","lastModifiedDate":"2023-03-26"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2023-03-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"pzhengze"},"content":"**API** : [`Storage.java`](https://github.com/AY2223S2-CS2103T-T12-1/tp/tree/master/src/main/java/seedu/patientist/storage/Storage.java)","lastModifiedDate":"2023-03-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"pzhengze"},"content":"* can save both patientist data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2023-03-27"},{"lineNumber":159,"author":{"gitId":"pzhengze"},"content":"* reads patientist data into a patientist object which will contain a list of ward objects which individually contain a list of patient and staff objects.","lastModifiedDate":"2023-03-27"},{"lineNumber":160,"author":{"gitId":"pzhengze"},"content":"* inherits from both `PatientistStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2023-03-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"pzhengze"},"content":"Classes used by multiple components are in the `seedu.patientist.commons` package.","lastModifiedDate":"2023-03-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"### Wards feature","lastModifiedDate":"2023-03-22"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"#### Implementation","lastModifiedDate":"2023-03-22"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"The mechanism will extend the functionality provided by AddressBook\u0027s base code to provide for functionality","lastModifiedDate":"2023-03-22"},{"lineNumber":176,"author":{"gitId":"euph00"},"content":"that allows `Staff` and `Patient`s to be grouped logically according to the `Ward` they are assigned to. This allows","lastModifiedDate":"2023-03-22"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"us to implement the following functionalities:","lastModifiedDate":"2023-03-22"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"* `contains(Patient)`","lastModifiedDate":"2023-03-26"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"* `addPatient(Patient)`","lastModifiedDate":"2023-03-26"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"* `deletePatient(Patient)`","lastModifiedDate":"2023-03-26"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"* `setPatient(Patient)`","lastModifiedDate":"2023-03-26"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"and similar functionality for `Staff` as well. This makes for easy implementation of searching for a particular","lastModifiedDate":"2023-03-22"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"person within a ward and other operations involving transferring between wards, through providing a clean","lastModifiedDate":"2023-03-22"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"abstraction that performs checking of duplicates, checking for presence/absence of a person, etc. These","lastModifiedDate":"2023-03-22"},{"lineNumber":186,"author":{"gitId":"euph00"},"content":"changes reflect in the modification of the API supplied by `Model`, which requires specification of which ward","lastModifiedDate":"2023-03-22"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"a `Staff` or `Patient` is to be added to, and also implements operations to add, remove and edit wards, and transfer","lastModifiedDate":"2023-03-22"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"`Person` between wards.","lastModifiedDate":"2023-03-22"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"Of course, in order to implement this functionality, we need to have the ability to add and delete `Ward` objects","lastModifiedDate":"2023-03-26"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"as well. As such, all wards are stored in a `WardList` that enforces uniqueness of the `Ward` objects contained. This list","lastModifiedDate":"2023-03-26"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"provides support for lookup, add, delete and modification of elements.","lastModifiedDate":"2023-03-26"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"Other alternatives considered for this functionality were simply assigning the ward and role of a `Person` through the","lastModifiedDate":"2023-03-22"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"`Tag` field that already exists in the base application. However, this makes for very poor object oriented design as","lastModifiedDate":"2023-03-22"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"there would not exist any trace of wards in the model, which is intuitively a container object for `Staff` and `Patient`.","lastModifiedDate":"2023-03-22"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"Furthermore, operations such as searching and deleting will become extremely counterintuitive as to delete a specific","lastModifiedDate":"2023-03-22"},{"lineNumber":198,"author":{"gitId":"euph00"},"content":"ward along with all patients and staff inside, we would have to search through all `Patient` and `Staff` objects, look through","lastModifiedDate":"2023-03-22"},{"lineNumber":199,"author":{"gitId":"euph00"},"content":"their tags and delete them one by one. Wards will thus become a fully abstract concept not modelled anywhere in the code,","lastModifiedDate":"2023-03-22"},{"lineNumber":200,"author":{"gitId":"euph00"},"content":"which is not ideal as it is a core part of what our application seeks to manage.","lastModifiedDate":"2023-03-22"},{"lineNumber":201,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":202,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":203,"author":{"gitId":"euph00"},"content":"Given below is a sample usage scenario and how the mechanism behaves at each step. For the sake of focus in the","lastModifiedDate":"2023-03-26"},{"lineNumber":204,"author":{"gitId":"euph00"},"content":"illustration, we will only look at a subset of the Model package involved in maintaining this feature. Higher level","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"euph00"},"content":"management logic such as `ModelManager` are not explicitly included, but obviously exist in the system nonetheless.","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"euph00"},"content":"Step 1. The user first needs to add a `Ward` to the empty `Patientist`. The user input is parsed by `Logic`, eventually","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"euph00"},"content":"making a call to `addWard()` specified by `Model`. Let\u0027s say the user first adds a `Ward` called `Block A Ward 1`.","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":210,"author":{"gitId":"euph00"},"content":"![AddWardState1](images/WardFeatureStep1-After_adding_first_Ward.png)","lastModifiedDate":"2023-03-26"},{"lineNumber":211,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":212,"author":{"gitId":"euph00"},"content":"Step 2. The user decides to add another `Ward` similar to in step 1, but this new ward is called `Block B Ward 1`.","lastModifiedDate":"2023-03-26"},{"lineNumber":213,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":214,"author":{"gitId":"euph00"},"content":"![AddWardState2](images/WardFeatureStep2-After_adding_second_Ward.png)","lastModifiedDate":"2023-03-26"},{"lineNumber":215,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":216,"author":{"gitId":"euph00"},"content":"Step 3. The user adds a `Staff`, let\u0027s say `Amy` and a `Patient`, let\u0027s say `Bob` to `Block A Ward 1`. Note that UniquePersonList","lastModifiedDate":"2023-03-26"},{"lineNumber":217,"author":{"gitId":"euph00"},"content":"is a container for multiple `Person`. `Staff` and `Patient` inherit from `Person`, and are thus instances of `Person`.","lastModifiedDate":"2023-03-26"},{"lineNumber":218,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":219,"author":{"gitId":"euph00"},"content":"![AddWardState3](images/WardFeatureStep3-After_adding_Patient_and_Staff.png)","lastModifiedDate":"2023-03-26"},{"lineNumber":220,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":221,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":222,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":223,"author":{"gitId":"euph00"},"content":"Further notes about the wards feature:","lastModifiedDate":"2023-03-26"},{"lineNumber":224,"author":{"gitId":"euph00"},"content":"* The identity of `Person` objects added to the ward system must be unique. This uniqueness is enforced by `Person::isSamePerson`","lastModifiedDate":"2023-03-26"},{"lineNumber":225,"author":{"gitId":"euph00"},"content":"rather than `Person::equals`. The same person cannot exist in the same ward or in 2 or more different wards.","lastModifiedDate":"2023-03-26"},{"lineNumber":226,"author":{"gitId":"euph00"},"content":"* As in the above point, it is illegal to modify an existing `Person` such that his or her identity is equal to another","lastModifiedDate":"2023-03-26"},{"lineNumber":227,"author":{"gitId":"euph00"},"content":"`Person` object\u0027s identity. Doing this programmatically through `Model::setPatient` or `Model::setStaff` will throw a `DuplicatePersonException`, and doing this by","lastModifiedDate":"2023-03-26"},{"lineNumber":228,"author":{"gitId":"euph00"},"content":"modifying json data files will result in undefined behaviour.","lastModifiedDate":"2023-03-26"},{"lineNumber":229,"author":{"gitId":"euph00"},"content":"* `Ward` objects contained in `WardList` have their uniqueness enforced by name. In other words, there cannot exist 2 or","lastModifiedDate":"2023-03-26"},{"lineNumber":230,"author":{"gitId":"euph00"},"content":"more wards with the same name.","lastModifiedDate":"2023-03-26"},{"lineNumber":231,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":232,"author":{"gitId":"pzhengze"},"content":"For these data to be stored for subsequent sessions, the `Storage` module had to be modified to store a list of wards containing","lastModifiedDate":"2023-03-27"},{"lineNumber":233,"author":{"gitId":"pzhengze"},"content":"`Patient` and `Staff` instead of a list of `Person`.","lastModifiedDate":"2023-03-27"},{"lineNumber":234,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":235,"author":{"gitId":"pzhengze"},"content":"Given below is an overview of how the `Storage` module behaves after launching the Patientist app.","lastModifiedDate":"2023-03-27"},{"lineNumber":236,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":237,"author":{"gitId":"pzhengze"},"content":"Step 1. The `Storage` module reads the data `JSON` file and deserialises it to form a `JsonSerializablePatientist` Object","lastModifiedDate":"2023-03-27"},{"lineNumber":238,"author":{"gitId":"pzhengze"},"content":"which contains a list of `JsonAdaptedWard` which is made for each `Ward` that is stored. Each `JsonAdaptedWard` contains","lastModifiedDate":"2023-03-27"},{"lineNumber":239,"author":{"gitId":"pzhengze"},"content":"a list of `JsonAdaptedPatient` and `JsonAdaptedStaff` which represents the numerous `Patient` and `Staff` that are in","lastModifiedDate":"2023-03-27"},{"lineNumber":240,"author":{"gitId":"pzhengze"},"content":"the `Ward`","lastModifiedDate":"2023-03-27"},{"lineNumber":241,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":242,"author":{"gitId":"pzhengze"},"content":"Step 2. The `Storage` module then calls creates the `Ward`, `Staff` and `Patient` using the blueprint provided by","lastModifiedDate":"2023-03-27"},{"lineNumber":243,"author":{"gitId":"pzhengze"},"content":"`JsonAdaptedWard`, `JsonAdaptedStaff` and `JsonAdaptedPatient` respectively. Once done, the newly created `Ward` objects","lastModifiedDate":"2023-03-27"},{"lineNumber":244,"author":{"gitId":"pzhengze"},"content":"are then stored in a new `Patientist` object, ready to be used.","lastModifiedDate":"2023-03-27"},{"lineNumber":245,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":246,"author":{"gitId":"pzhengze"},"content":"The opposite occurs after a command, allowing us to save the data into a `JSON` file.","lastModifiedDate":"2023-03-27"},{"lineNumber":247,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":248,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":249,"author":{"gitId":"euph00"},"content":"### \\[Proposed\\] Undo/redo feature: this section is to be deleted before submission. It is kept here for reference only.","lastModifiedDate":"2023-03-26"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":339,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":340,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":341,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":342,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"euph00"},"content":"* has a need to manage a significant amount of data","lastModifiedDate":"2023-02-27"},{"lineNumber":353,"author":{"gitId":"euph00"},"content":"  * this can be in the form of patients and staff, and tracking personnel assignment in wards","lastModifiedDate":"2023-02-27"},{"lineNumber":354,"author":{"gitId":"euph00"},"content":"* uses desktop/PC apps as a standard at the workplace","lastModifiedDate":"2023-02-27"},{"lineNumber":355,"author":{"gitId":"euph00"},"content":"* can type fast and are comfortable with CLI","lastModifiedDate":"2023-02-27"},{"lineNumber":356,"author":{"gitId":"euph00"},"content":"  * not necessarily a prerequisite to use the app","lastModifiedDate":"2023-02-27"},{"lineNumber":357,"author":{"gitId":"euph00"},"content":"  * users that are required to use the app on a daily basis will become familiar with commands and CLI quickly","lastModifiedDate":"2023-02-27"},{"lineNumber":358,"author":{"gitId":"euph00"},"content":"* has limited space for the PC","lastModifiedDate":"2023-02-27"},{"lineNumber":359,"author":{"gitId":"euph00"},"content":"  * mobile workstations used in hospitals have limited space and can be decluttered by removing need for a mouse","lastModifiedDate":"2023-02-27"},{"lineNumber":360,"author":{"gitId":"euph00"},"content":"* has a need to have access to both fine-grained detail and the big picture in the facility","lastModifiedDate":"2023-02-27"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":362,"author":{"gitId":"euph00"},"content":"**Value proposition**: Manage patient and staff data more efficiently than GUI app, given constraints","lastModifiedDate":"2023-02-27"},{"lineNumber":363,"author":{"gitId":"euph00"},"content":"on workstation space. This app has a higher skill cap than GUI apps, but is more rewarding as users","lastModifiedDate":"2023-02-27"},{"lineNumber":364,"author":{"gitId":"euph00"},"content":"familiar with the system can work faster and eliminate the need for an unwieldly mouse that they have","lastModifiedDate":"2023-02-27"},{"lineNumber":365,"author":{"gitId":"euph00"},"content":"no space for.","lastModifiedDate":"2023-02-27"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"| Priority | As a …​                                   | I want to …​                                                                            | So that I can…​                                                                                            |","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"euph00"},"content":"|----------|-------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-02-27"},{"lineNumber":374,"author":{"gitId":"euph00"},"content":"| `* * *`  | new user                                  | see usage instructions                                                                  | refer to instructions when I forget how to use the app                                                     |","lastModifiedDate":"2023-02-27"},{"lineNumber":375,"author":{"gitId":"euph00"},"content":"| `* * *`  | ward admin processing patients            | add and delete a patient                                                                | inpro and outpro the patients as they are hospitalised and discharged                                      |","lastModifiedDate":"2023-02-27"},{"lineNumber":376,"author":{"gitId":"euph00"},"content":"| `* * *`  | ward doctor attending to patient          | add and delete new instructions and prescriptions for a patient                         | have a convenient record to access when treating patients                                                  |","lastModifiedDate":"2023-02-27"},{"lineNumber":377,"author":{"gitId":"euph00"},"content":"| `* * *`  | ward admin recording manpower assignments | add and delete new doctor/nurse from the ward                                           | have a convenient record of which staff handles each ward                                                  |","lastModifiedDate":"2023-02-27"},{"lineNumber":378,"author":{"gitId":"euph00"},"content":"| `*`      | ward doctor getting ready for shift       | add and delete events from my personal duty schedule                                    | track my schedule from the centralised system and easily access records of patients as I check my schedule |","lastModifiedDate":"2023-02-27"},{"lineNumber":379,"author":{"gitId":"euph00"},"content":"| `*`      | lab assistant                             | add test results to a patient\u0027s information                                             | easily update the medical staff with the information they need for treatment                               |","lastModifiedDate":"2023-02-27"},{"lineNumber":380,"author":{"gitId":"euph00"},"content":"| `* * *`  | ward nurse/doctor                         | view and edit todo list for each patient                                                | have a reliable reference for tasks I need to facilitate for each patient                                  |","lastModifiedDate":"2023-02-27"},{"lineNumber":381,"author":{"gitId":"euph00"},"content":"| `* *`    | ward nurse/doctor administering medicine  | see a list of medical allergies of the patient on the patient\u0027s main page               | be reminded of which medicines cannot be prescribed at a glance                                            |","lastModifiedDate":"2023-02-27"},{"lineNumber":382,"author":{"gitId":"euph00"},"content":"| `* * *`  | user unfamiliar with the hospital         | list all patients the system                                                            | find a particular patient without knowing their full name or ID                                            |","lastModifiedDate":"2023-02-27"},{"lineNumber":383,"author":{"gitId":"euph00"},"content":"| `* * *`  | user                                      | list all patients in a particular ward                                                  | easily tell how many people are in the ward and the identities of patients in a ward                       |","lastModifiedDate":"2023-02-27"},{"lineNumber":384,"author":{"gitId":"euph00"},"content":"| `* *`    | user looking for a patient                | search for patient by name                                                              | look up a patient without knowing his/her ID number                                                        |","lastModifiedDate":"2023-02-27"},{"lineNumber":385,"author":{"gitId":"euph00"},"content":"| `* *`    | user looking for a patient                | search for patient by ID                                                                | look up a patient without knowing his/her name                                                             |","lastModifiedDate":"2023-02-27"},{"lineNumber":386,"author":{"gitId":"euph00"},"content":"| `* * *`  | pharmacist issuing medication             | view prescription of patients                                                           | dispense medication while knowing the most updated list of medicine                                        |","lastModifiedDate":"2023-02-27"},{"lineNumber":387,"author":{"gitId":"euph00"},"content":"| `* *`    | ward nurse/doctor moving a patient        | view important notes about a patient, such as being a fall risk                         | be reminded about each patient\u0027s unique needs                                                              |","lastModifiedDate":"2023-02-27"},{"lineNumber":388,"author":{"gitId":"euph00"},"content":"| `* *`    | ward doctor in an emergency               | view the patient\u0027s status code on the patient\u0027s main page                               | know at a glance during an emergency if the patient has a Do Not Resuscitate order                         |","lastModifiedDate":"2023-02-27"},{"lineNumber":389,"author":{"gitId":"euph00"},"content":"| `* *`    | user liasing with family members          | update the patient\u0027s status code                                                        | update the treatment/resuscitation requirements as the patient or family instructs                         |","lastModifiedDate":"2023-02-27"},{"lineNumber":390,"author":{"gitId":"euph00"},"content":"| `* *`    | user                                      | view a patient\u0027s Next of Kin contacts                                                   | update the family members of the patient should issues arise                                               |","lastModifiedDate":"2023-02-27"},{"lineNumber":391,"author":{"gitId":"euph00"},"content":"| `* *`    | ward admin registering NOK\u0027s contact      | edit a patient\u0027s Next of Kin contacts                                                   | change the contact number to call in an emergency should there be a need                                   |","lastModifiedDate":"2023-02-27"},{"lineNumber":392,"author":{"gitId":"euph00"},"content":"| `* * *`  | user                                      | list all staff members                                                                  | have a high level view of manpower allocation                                                              |","lastModifiedDate":"2023-02-27"},{"lineNumber":393,"author":{"gitId":"euph00"},"content":"| `* * *`  | user unfamiliar with the hospital         | list all ward names                                                                     | have a high level view of the facility\u0027s wards                                                             |","lastModifiedDate":"2023-02-27"},{"lineNumber":394,"author":{"gitId":"euph00"},"content":"| `* *`    | doctor treating a patient                 | update list of medical allergies of a patient                                           | have the most recent information in the system and be assured it is correct                                |","lastModifiedDate":"2023-02-27"},{"lineNumber":395,"author":{"gitId":"euph00"},"content":"| `* * *`  | ward admin                                | move patients between wards                                                             | keep the system up to date as patients get transferred around                                              |","lastModifiedDate":"2023-02-27"},{"lineNumber":396,"author":{"gitId":"euph00"},"content":"| `* * *`  | doctor treating a patient                 | view and edit the full status page of a patient                                         | keep record of a comprehensive description of the patient for reference when making complicated decisions  |","lastModifiedDate":"2023-02-27"},{"lineNumber":397,"author":{"gitId":"euph00"},"content":"| `* *`    | doctor treating a patient                 | view and edit the care priority status of each patient displayed on patient\u0027s main page | tell at a glance which patient needs more attention at a glance in emergencies                             |","lastModifiedDate":"2023-02-27"},{"lineNumber":398,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"jinnieshin"},"content":"(For all use cases below, the **System** is the `Patientist` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-03-01"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"jinnieshin"},"content":"**Use case: See usage instructions**","lastModifiedDate":"2023-03-01"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":407,"author":{"gitId":"jinnieshin"},"content":"**Actor: New user**","lastModifiedDate":"2023-03-01"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"jinnieshin"},"content":"1.  User requests for instructions","lastModifiedDate":"2023-03-01"},{"lineNumber":412,"author":{"gitId":"jinnieshin"},"content":"2.  Patientist lists down instructions of how to use Patientist","lastModifiedDate":"2023-03-01"},{"lineNumber":413,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":414,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-01"},{"lineNumber":415,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-01"},{"lineNumber":416,"author":{"gitId":"jinnieshin"},"content":"**Use case: Add a patient**","lastModifiedDate":"2023-03-01"},{"lineNumber":417,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":418,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward admin**","lastModifiedDate":"2023-03-01"},{"lineNumber":419,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":420,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-01"},{"lineNumber":421,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":422,"author":{"gitId":"jinnieshin"},"content":"1.  Ward admin chooses to add a patient.","lastModifiedDate":"2023-03-01"},{"lineNumber":423,"author":{"gitId":"jinnieshin"},"content":"2.  Patientist requests for details of the patient to be added.","lastModifiedDate":"2023-03-01"},{"lineNumber":424,"author":{"gitId":"jinnieshin"},"content":"3.  Ward admin enters the requested details.","lastModifiedDate":"2023-03-01"},{"lineNumber":425,"author":{"gitId":"jinnieshin"},"content":"4.  Patientist requests for confirmation.","lastModifiedDate":"2023-03-01"},{"lineNumber":426,"author":{"gitId":"jinnieshin"},"content":"5.  Ward admin confirms.","lastModifiedDate":"2023-03-01"},{"lineNumber":427,"author":{"gitId":"jinnieshin"},"content":"6.  Patientist adds the patient and displays the details of the patient.","lastModifiedDate":"2023-03-01"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"jinnieshin"},"content":"* 2a. Any of the requested details are missing.","lastModifiedDate":"2023-03-01"},{"lineNumber":434,"author":{"gitId":"jinnieshin"},"content":"    * 2a1. Patientist requests for the missing details.","lastModifiedDate":"2023-03-01"},{"lineNumber":435,"author":{"gitId":"jinnieshin"},"content":"    * 2a2. Ward admin enters the requested details.","lastModifiedDate":"2023-03-01"},{"lineNumber":436,"author":{"gitId":"jinnieshin"},"content":"    Steps 2a1-2a2 are repeated until all details are collected.","lastModifiedDate":"2023-03-01"},{"lineNumber":437,"author":{"gitId":"jinnieshin"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2023-03-01"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"jinnieshin"},"content":"* 3a. Any of the requested details are in wrong format.","lastModifiedDate":"2023-03-01"},{"lineNumber":442,"author":{"gitId":"jinnieshin"},"content":"    * 3a1. Patientist shows an error message indicating the details with wrong format.","lastModifiedDate":"2023-03-01"},{"lineNumber":443,"author":{"gitId":"jinnieshin"},"content":"    * 3a2. Patientist requests for the corrected details.","lastModifiedDate":"2023-03-01"},{"lineNumber":444,"author":{"gitId":"jinnieshin"},"content":"    * 3a3. Ward admin enters the requested details.","lastModifiedDate":"2023-03-01"},{"lineNumber":445,"author":{"gitId":"jinnieshin"},"content":"    Steps 3a1-3a3 are repeated until all details have correct format.","lastModifiedDate":"2023-03-01"},{"lineNumber":446,"author":{"gitId":"jinnieshin"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2023-03-01"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"jinnieshin"},"content":"      Use case ends","lastModifiedDate":"2023-03-01"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"jinnieshin"},"content":"* *a. At any time, Ward admin chooses to cancel the addition of patient.","lastModifiedDate":"2023-03-01"},{"lineNumber":451,"author":{"gitId":"jinnieshin"},"content":"    * a1. Patientist requests to confirm the cancellation.","lastModifiedDate":"2023-03-01"},{"lineNumber":452,"author":{"gitId":"jinnieshin"},"content":"    * a2. Ward admin confirms the cancellation.","lastModifiedDate":"2023-03-01"},{"lineNumber":453,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":454,"author":{"gitId":"jinnieshin"},"content":"      Use case ends.","lastModifiedDate":"2023-03-01"},{"lineNumber":455,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-01"},{"lineNumber":456,"author":{"gitId":"jinnieshin"},"content":"**Use case: Delete a patient**","lastModifiedDate":"2023-03-01"},{"lineNumber":457,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":458,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward admin**","lastModifiedDate":"2023-03-01"},{"lineNumber":459,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":460,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-01"},{"lineNumber":461,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":462,"author":{"gitId":"jinnieshin"},"content":"1.  Ward admin chooses to delete a patient.","lastModifiedDate":"2023-03-01"},{"lineNumber":463,"author":{"gitId":"jinnieshin"},"content":"2.  Patientist requests for the name of the patient to be deleted.","lastModifiedDate":"2023-03-01"},{"lineNumber":464,"author":{"gitId":"jinnieshin"},"content":"3.  Ward admin enters the name of the patient to be deleted.","lastModifiedDate":"2023-03-01"},{"lineNumber":465,"author":{"gitId":"jinnieshin"},"content":"4.  Patientist shows the list of patients with the entered name.","lastModifiedDate":"2023-03-01"},{"lineNumber":466,"author":{"gitId":"jinnieshin"},"content":"5.  Ward admin enters the index number of the patient to be deleted.","lastModifiedDate":"2023-03-01"},{"lineNumber":467,"author":{"gitId":"jinnieshin"},"content":"6.  Patientist requests for confirmation.","lastModifiedDate":"2023-03-01"},{"lineNumber":468,"author":{"gitId":"jinnieshin"},"content":"7.  Ward admin confirms.","lastModifiedDate":"2023-03-01"},{"lineNumber":469,"author":{"gitId":"jinnieshin"},"content":"8.  Patientist deletes the patient and shows a message indicating deletion.","lastModifiedDate":"2023-03-01"},{"lineNumber":470,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":471,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-01"},{"lineNumber":472,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":473,"author":{"gitId":"jinnieshin"},"content":"**Extensions**","lastModifiedDate":"2023-03-01"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"jinnieshin"},"content":"* *a. At any time, Ward admin chooses to cancel the deletion of patient.","lastModifiedDate":"2023-03-01"},{"lineNumber":476,"author":{"gitId":"jinnieshin"},"content":"    * a1. Patientist requests to confirm the cancellation.","lastModifiedDate":"2023-03-01"},{"lineNumber":477,"author":{"gitId":"jinnieshin"},"content":"    * a2. Ward admin confirms the cancellation.","lastModifiedDate":"2023-03-01"},{"lineNumber":478,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":479,"author":{"gitId":"jinnieshin"},"content":"      Use case ends.","lastModifiedDate":"2023-03-01"},{"lineNumber":480,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-01"},{"lineNumber":481,"author":{"gitId":"jinnieshin"},"content":"**Use case: Add a new instruction or prescription to a patient**","lastModifiedDate":"2023-03-01"},{"lineNumber":482,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":483,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward doctor**","lastModifiedDate":"2023-03-01"},{"lineNumber":484,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":485,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-01"},{"lineNumber":486,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":487,"author":{"gitId":"jinnieshin"},"content":"1. Ward doctor \u003cu\u003esearches for a patient\u003c/u\u003e.","lastModifiedDate":"2023-03-01"},{"lineNumber":488,"author":{"gitId":"jinnieshin"},"content":"2. Ward doctor chooses to add instruction or prescription to the selected patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":489,"author":{"gitId":"jinnieshin"},"content":"3. Patientist requests for the content of the instruction or prescription.","lastModifiedDate":"2023-03-06"},{"lineNumber":490,"author":{"gitId":"jinnieshin"},"content":"4. Ward doctor enters an instruction or prescription.","lastModifiedDate":"2023-03-06"},{"lineNumber":491,"author":{"gitId":"jinnieshin"},"content":"5. Patientist adds the instruction or prescription to the details of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":492,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":493,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-01"},{"lineNumber":494,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-01"},{"lineNumber":495,"author":{"gitId":"jinnieshin"},"content":"**Use case: Delete an instructions or a prescription of a patient**","lastModifiedDate":"2023-03-01"},{"lineNumber":496,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":497,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward doctor**","lastModifiedDate":"2023-03-01"},{"lineNumber":498,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":499,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-01"},{"lineNumber":500,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":501,"author":{"gitId":"jinnieshin"},"content":"1. Ward doctor \u003cu\u003esearches for a patient\u003c/u\u003e.","lastModifiedDate":"2023-03-01"},{"lineNumber":502,"author":{"gitId":"jinnieshin"},"content":"2. Ward doctor chooses an instruction or a prescription to be deleted.","lastModifiedDate":"2023-03-06"},{"lineNumber":503,"author":{"gitId":"jinnieshin"},"content":"3. Patientist requests to confirm the deletion.","lastModifiedDate":"2023-03-06"},{"lineNumber":504,"author":{"gitId":"jinnieshin"},"content":"4. Ward doctor confirms the deletion.","lastModifiedDate":"2023-03-06"},{"lineNumber":505,"author":{"gitId":"jinnieshin"},"content":"5. Patientist deletes the instruction or prescription from the details of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":506,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":507,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":508,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":509,"author":{"gitId":"jinnieshin"},"content":"**Use case: Add a new doctor/nurse to the ward**","lastModifiedDate":"2023-03-06"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":511,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward admin**","lastModifiedDate":"2023-03-06"},{"lineNumber":512,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":513,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":514,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":515,"author":{"gitId":"jinnieshin"},"content":"1. Ward admin \u003cu\u003esearches for a patient\u003c/u\u003e.","lastModifiedDate":"2023-03-06"},{"lineNumber":516,"author":{"gitId":"jinnieshin"},"content":"2. Ward admin chooses to assign a new doctor/nurse to the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":517,"author":{"gitId":"jinnieshin"},"content":"3. Patientist requests for the name of doctor/nurse to be added.","lastModifiedDate":"2023-03-06"},{"lineNumber":518,"author":{"gitId":"jinnieshin"},"content":"4. Ward admin enters the name of the doctor/nurse.","lastModifiedDate":"2023-03-06"},{"lineNumber":519,"author":{"gitId":"jinnieshin"},"content":"5. Patientist adds the doctor/nurse to the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":520,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":521,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":522,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":523,"author":{"gitId":"jinnieshin"},"content":"**Extensions**","lastModifiedDate":"2023-03-06"},{"lineNumber":524,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":525,"author":{"gitId":"jinnieshin"},"content":"* 5a. The doctor/nurse with the entered name does not exist.","lastModifiedDate":"2023-03-06"},{"lineNumber":526,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":527,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":528,"author":{"gitId":"jinnieshin"},"content":"**Use case: Delete a doctor/nurse from the ward**","lastModifiedDate":"2023-03-06"},{"lineNumber":529,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":530,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward admin**","lastModifiedDate":"2023-03-06"},{"lineNumber":531,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":532,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":533,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":534,"author":{"gitId":"jinnieshin"},"content":"1. Ward admin \u003cu\u003esearches for a patient\u003c/u\u003e.","lastModifiedDate":"2023-03-06"},{"lineNumber":535,"author":{"gitId":"jinnieshin"},"content":"2. Ward admin chooses to delete a doctor/nurse from the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":536,"author":{"gitId":"jinnieshin"},"content":"3. Patientist asks for the name of doctor/nurse to be deleted.","lastModifiedDate":"2023-03-06"},{"lineNumber":537,"author":{"gitId":"jinnieshin"},"content":"4. Ward admin enters the name of the doctor/nurse.","lastModifiedDate":"2023-03-06"},{"lineNumber":538,"author":{"gitId":"jinnieshin"},"content":"5. Patientist requests to confirm the deletion.","lastModifiedDate":"2023-03-06"},{"lineNumber":539,"author":{"gitId":"jinnieshin"},"content":"6. Ward admin confirms the deletion.","lastModifiedDate":"2023-03-06"},{"lineNumber":540,"author":{"gitId":"jinnieshin"},"content":"7. Patientist deletes the doctor/nurse from the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":541,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":542,"author":{"gitId":"jinnieshin"},"content":"**Extensions**","lastModifiedDate":"2023-03-06"},{"lineNumber":543,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":544,"author":{"gitId":"jinnieshin"},"content":"* *a. At any time, Ward admin chooses to cancel the deletion of patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":545,"author":{"gitId":"jinnieshin"},"content":"    * a1. Patientist requests to confirm the cancellation.","lastModifiedDate":"2023-03-06"},{"lineNumber":546,"author":{"gitId":"jinnieshin"},"content":"    * a2. Ward admin confirms the cancellation.","lastModifiedDate":"2023-03-06"},{"lineNumber":547,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":548,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":549,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":550,"author":{"gitId":"jinnieshin"},"content":"**Use case: View todo list for a patient**","lastModifiedDate":"2023-03-06"},{"lineNumber":551,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":552,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward doctor/nurse**","lastModifiedDate":"2023-03-06"},{"lineNumber":553,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":554,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":555,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":556,"author":{"gitId":"jinnieshin"},"content":"1. Ward doctor/nurse \u003cu\u003esearches for a patient\u003c/u\u003e.","lastModifiedDate":"2023-03-06"},{"lineNumber":557,"author":{"gitId":"jinnieshin"},"content":"2. Ward doctor/nurse chooses to view the todo list of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":558,"author":{"gitId":"jinnieshin"},"content":"3. Patientist shows the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":559,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":560,"author":{"gitId":"jinnieshin"},"content":"Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":561,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":562,"author":{"gitId":"jinnieshin"},"content":"**Use case: Edit todo list for a patient**","lastModifiedDate":"2023-03-06"},{"lineNumber":563,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":564,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward doctor/nurse**","lastModifiedDate":"2023-03-06"},{"lineNumber":565,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":566,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":567,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":568,"author":{"gitId":"jinnieshin"},"content":"1. Ward doctor/nurse chooses to \u003cu\u003eview todo list for a patient\u003c/u\u003e.","lastModifiedDate":"2023-03-06"},{"lineNumber":569,"author":{"gitId":"jinnieshin"},"content":"2. Ward doctor/nurse chooses a task to edit from todo list of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":570,"author":{"gitId":"jinnieshin"},"content":"3. Patientist asks for how to edit the task.","lastModifiedDate":"2023-03-06"},{"lineNumber":571,"author":{"gitId":"jinnieshin"},"content":"4. Ward doctor/nurse enters the new content of the task.","lastModifiedDate":"2023-03-06"},{"lineNumber":572,"author":{"gitId":"jinnieshin"},"content":"5. Patientist saves the changed content of the task to the todo list of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":573,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":574,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":575,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":576,"author":{"gitId":"jinnieshin"},"content":"**Use case: List all patient in the system**","lastModifiedDate":"2023-03-06"},{"lineNumber":577,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":578,"author":{"gitId":"jinnieshin"},"content":"**Actor: User unfamiliar with the hospital**","lastModifiedDate":"2023-03-06"},{"lineNumber":579,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":580,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":581,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":582,"author":{"gitId":"jinnieshin"},"content":"1. User chooses to list all patients in the system","lastModifiedDate":"2023-03-06"},{"lineNumber":583,"author":{"gitId":"jinnieshin"},"content":"2. Patientist shows the list of all patients in the system.","lastModifiedDate":"2023-03-06"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":585,"author":{"gitId":"jinnieshin"},"content":"    Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":586,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":587,"author":{"gitId":"jinnieshin"},"content":"**Use case: List all patient in a particular ward**","lastModifiedDate":"2023-03-06"},{"lineNumber":588,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":589,"author":{"gitId":"jinnieshin"},"content":"**Actor: User**","lastModifiedDate":"2023-03-06"},{"lineNumber":590,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":591,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":592,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":593,"author":{"gitId":"jinnieshin"},"content":"1. User chooses to list all patients in a particular ward.","lastModifiedDate":"2023-03-06"},{"lineNumber":594,"author":{"gitId":"jinnieshin"},"content":"2. Patientist shows the list of all patients in the ward.","lastModifiedDate":"2023-03-06"},{"lineNumber":595,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":596,"author":{"gitId":"jinnieshin"},"content":"   Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":597,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":598,"author":{"gitId":"jinnieshin"},"content":"**Use case: Search for a patient by name**","lastModifiedDate":"2023-03-06"},{"lineNumber":599,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":600,"author":{"gitId":"jinnieshin"},"content":"**Actor: User**","lastModifiedDate":"2023-03-06"},{"lineNumber":601,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":602,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":603,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":604,"author":{"gitId":"jinnieshin"},"content":"1. User chooses to search for a patient by name.","lastModifiedDate":"2023-03-06"},{"lineNumber":605,"author":{"gitId":"jinnieshin"},"content":"2. Patientist requests for the name of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":606,"author":{"gitId":"jinnieshin"},"content":"3. User enters the name of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":607,"author":{"gitId":"jinnieshin"},"content":"4. Patientist shows the details of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":608,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":609,"author":{"gitId":"jinnieshin"},"content":"   Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":610,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":611,"author":{"gitId":"jinnieshin"},"content":"**Use case: Search for a patient by ID**","lastModifiedDate":"2023-03-06"},{"lineNumber":612,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":613,"author":{"gitId":"jinnieshin"},"content":"**Actor: User**","lastModifiedDate":"2023-03-06"},{"lineNumber":614,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":615,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":616,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":617,"author":{"gitId":"jinnieshin"},"content":"1. User chooses to search for a patient by ID.","lastModifiedDate":"2023-03-06"},{"lineNumber":618,"author":{"gitId":"jinnieshin"},"content":"2. Patientist requests for the ID of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":619,"author":{"gitId":"jinnieshin"},"content":"3. User enters the ID of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":620,"author":{"gitId":"jinnieshin"},"content":"4. Patientist shows the details of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":621,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":622,"author":{"gitId":"jinnieshin"},"content":"   Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":623,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":624,"author":{"gitId":"jinnieshin"},"content":"**Use case: List all staff members in the system**","lastModifiedDate":"2023-03-06"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":626,"author":{"gitId":"jinnieshin"},"content":"**Actor: User**","lastModifiedDate":"2023-03-06"},{"lineNumber":627,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":628,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":629,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":630,"author":{"gitId":"jinnieshin"},"content":"1. User chooses to list all staff members in the system.","lastModifiedDate":"2023-03-06"},{"lineNumber":631,"author":{"gitId":"jinnieshin"},"content":"2. Patientist shows the list of all staff members in the system.","lastModifiedDate":"2023-03-06"},{"lineNumber":632,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":633,"author":{"gitId":"jinnieshin"},"content":"   Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":634,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":635,"author":{"gitId":"jinnieshin"},"content":"**Use case: List all ward names in the system**","lastModifiedDate":"2023-03-06"},{"lineNumber":636,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":637,"author":{"gitId":"jinnieshin"},"content":"**Actor: User**","lastModifiedDate":"2023-03-06"},{"lineNumber":638,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":639,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":640,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":641,"author":{"gitId":"jinnieshin"},"content":"1. User chooses to list all ward names in the system.","lastModifiedDate":"2023-03-06"},{"lineNumber":642,"author":{"gitId":"jinnieshin"},"content":"2. Patientist shows the list of all ward names in the system.","lastModifiedDate":"2023-03-06"},{"lineNumber":643,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":644,"author":{"gitId":"jinnieshin"},"content":"   Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":645,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-06"},{"lineNumber":646,"author":{"gitId":"jinnieshin"},"content":"**Use case: Move patients between wards**","lastModifiedDate":"2023-03-06"},{"lineNumber":647,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":648,"author":{"gitId":"jinnieshin"},"content":"**Actor: Ward admin**","lastModifiedDate":"2023-03-06"},{"lineNumber":649,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":650,"author":{"gitId":"jinnieshin"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":651,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":652,"author":{"gitId":"jinnieshin"},"content":"1. Ward admin chooses to move a patient to another ward.","lastModifiedDate":"2023-03-06"},{"lineNumber":653,"author":{"gitId":"jinnieshin"},"content":"2. Patientist requests for the name of the patient and ward to be moved.","lastModifiedDate":"2023-03-06"},{"lineNumber":654,"author":{"gitId":"jinnieshin"},"content":"3. Ward admin enters the name of the patient and ward to be moved.","lastModifiedDate":"2023-03-06"},{"lineNumber":655,"author":{"gitId":"jinnieshin"},"content":"4. Patientist moves the patient to the new ward.","lastModifiedDate":"2023-03-06"},{"lineNumber":656,"author":{"gitId":"jinnieshin"},"content":"5. Patientist shows the updated state of the patient.","lastModifiedDate":"2023-03-06"},{"lineNumber":657,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":658,"author":{"gitId":"jinnieshin"},"content":"   Use case ends.","lastModifiedDate":"2023-03-01"},{"lineNumber":659,"author":{"gitId":"jinnieshin"},"content":"___","lastModifiedDate":"2023-03-01"},{"lineNumber":660,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":664,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"pzhengze"},"content":"4.  A first time user should be able to easily find help to learn how to use the app.","lastModifiedDate":"2023-03-01"},{"lineNumber":668,"author":{"gitId":"pzhengze"},"content":"5.  Should not take longer than a second to retrieve patient information.","lastModifiedDate":"2023-03-01"},{"lineNumber":669,"author":{"gitId":"pzhengze"},"content":"6.  Should be lightweight and be able to run on any computer with decently recent hardware.","lastModifiedDate":"2023-03-01"},{"lineNumber":670,"author":{"gitId":"pzhengze"},"content":"7.  Should be reliable and able to perform without failure in the majority of use cases during a month.","lastModifiedDate":"2023-03-01"},{"lineNumber":671,"author":{"gitId":"pzhengze"},"content":"8.  Should be available to be accessed by medical staff 24/7/365.","lastModifiedDate":"2023-03-01"},{"lineNumber":672,"author":{"gitId":"pzhengze"},"content":"9.  Should be easily troubleshot in the event of a failure.","lastModifiedDate":"2023-03-01"},{"lineNumber":673,"author":{"gitId":"pzhengze"},"content":"10. Comply with all data protection laws of Singapore (PDPA).","lastModifiedDate":"2023-03-01"},{"lineNumber":674,"author":{"gitId":"pzhengze"},"content":"11. Should follow Singapore localisation.","lastModifiedDate":"2023-03-01"},{"lineNumber":675,"author":{"gitId":"pzhengze"},"content":"12. Should be easily scaled with different number of users.","lastModifiedDate":"2023-03-01"},{"lineNumber":676,"author":{"gitId":"pzhengze"},"content":"13. Patient data should be secure from unauthorised users.","lastModifiedDate":"2023-03-01"},{"lineNumber":677,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":678,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":679,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":680,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":681,"author":{"gitId":"jinnieshin"},"content":"* **System**: The whole hospital system that uses Patientist.","lastModifiedDate":"2023-03-06"},{"lineNumber":682,"author":{"gitId":"jinnieshin"},"content":"* **User**: All people who have access to Patientist such as ward admin, ward doctor, and ward nurse.","lastModifiedDate":"2023-03-06"},{"lineNumber":683,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":684,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":685,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":686,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":687,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":688,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":689,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":690,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":691,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":692,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":693,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":694,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":695,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":696,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":697,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":698,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":699,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":700,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":701,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":702,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":703,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":708,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":710,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":714,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":715,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":716,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":717,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":718,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":719,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":720,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":721,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":722,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":723,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":724,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":725,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":726,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":727,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":728,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":729,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":730,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":731,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":732,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":733,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":734,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":735,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"lukkesreysandeur":1,"euph00":123,"-":331,"pzhengze":42,"jinnieshin":238}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"   1. Run the `seedu.patientist.Main` and try a few commands.","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"euph00":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"   e.g. `seedu.patientist.commons.StringUtilTest`","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"   e.g. `seedu.patientist.storage.StorageManagerTest`","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"   e.g. `seedu.patientist.logic.LogicManagerTest`","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"euph00":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"# Patientist User Guide","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"Patientist is a desktop app used for managing patients and staff within a medical facility. This application is optimised","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"for use via a Command Line Interface (CLI), while still having a Graphical User Interface (GUI) for users to fall back","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"on. If you are a strong typist and are familiar with the system, Patientist can get your tasks done faster and more","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"reliably than traditional GUI based apps.","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"![MainScreen](images/Ui.png)","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"## Using this guide","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"* If you are setting up for the first time, please have a look at our [Quick Start](#quick-start) section.","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"* If you are unsure how to use Patientist, the [Features](#features) section might be a good place to start.","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"* For ease of navigation, clicking the hyperlinks at the bottom of each section to go back to the table of contents.","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"___","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"## Table of Contents","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"1. Ensure you have Java 11 installed on your computer. If you are unsure you can download it from [here](https://www.oracle.com/sg/java/technologies/javase/jdk11-archive-downloads.html).","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"2. Download the latest release of Patientist from [here](https://github.com/AY2223S2-CS2103T-T12-1/tp/releases/latest).","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"3. Copy the file to the folder you\u0027d like to use as the _home folder_ for your Patientist app.","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"4. Double-click the .jar file to open the app. There will be some sample data to play around with.","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"5. Type in commands and press ENTER to execute the command. `help` would be a good first command to use to get a sensing of how to use this app.","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"6. Refer to the [Features](#features) or [Command Summary](#command-summary) sections to see summary of commands.","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"# Features","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"## Notes about formatting","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"* Words in UPPER_CASE are user supplied parameters, e.g. `addpat n/NAME`: `NAME` is a parameter, and the command can be used as add `n/John Doe`","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"* Items in square brackets are optional parameters, e.g. `addpat n/NAME [t/TAG]` can be used as `addpat n/John Doe t/urgent` or simply as `addpat n/John Doe`","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"* Items with … after them can be specified 0 or more times, e.g. `[t/TAG]...` means it is valid to not include a tag, or you can include 1 or more `t/TAG` expressions","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"* Extraneous parameters for commands that take in exactly 0 parameters will be ignored","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"## Viewing help: help","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"Shows a popup explaining how to access the user guide, which is the help page.","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"**Format: `help`**","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"## Clearing the patientist: clear","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"Clears the current session of patientist and restores it to empty state.","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"**Format: `clear`**","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"___","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"## Adding a patient: addpat","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"Adds a new patient to the system, and places them in the `WARD_NAME` assigned.","lastModifiedDate":"2023-02-25"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"Tags attached to a user are meant to be short notes that do not fit into any other category of patient details that can be added.","lastModifiedDate":"2023-02-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"**Warning: `WARD_NAME` is case-sensitive.** `block B ward 2` will refer to a different ward from `Block b Ward 2`.","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"**Format: `addpat n/PATIENT_NAME id/ID_NUMBER p/PHONE_NO e/EMAIL a/ADDRESS w/WARD_NAME pr/PRIORITY [t/TAG]...`**","lastModifiedDate":"2023-03-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"`PRIORITY` can take values of either `LOW`, `MEDIUM` or `HIGH`","lastModifiedDate":"2023-03-31"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"`ID_NUMBER` should be unique to each patient. This is not case-sensitive. A123456789B is identical to a123456789b.","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"**This input will be capitalised automatically.**\\","lastModifiedDate":"2023-02-25"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"`PATIENT_NAME` need not be unique.","lastModifiedDate":"2023-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"**`addpat n/John Doe id/A12345B w/Block B Ward 2 p/98765432 e/johnd@example.com a/Clementi Ave 2, #02-25 pr/LOW`**","lastModifiedDate":"2023-03-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"## Adding a staff member: addstf","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"lukkesreysandeur"},"content":"Assigns specified `STAFF_NAME` to the specified `WARD_NAME`.","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"lukkesreysandeur"},"content":"The STAFF_NAME will be displayed in the list of personnel in charge of the ward.","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"lukkesreysandeur"},"content":"**Warning: `WARD_NAME` is case-sensitive.** `block B ward 2` will refer to a different ward from `Block b Ward 2`","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"**Format: `addstf n/STAFF_NAME id/ID_NUMBER p/PHONE_NO e/EMAIL a/ADDRESS w/WARD_NAME`**","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"jinnieshin"},"content":"**`addstf n/Dr Mallory Wong id/A987654321H p/97365482 e/mwong@example.com a/390 Geylang Rd w/block B ward 2`**\\","lastModifiedDate":"2023-03-30"},{"lineNumber":97,"author":{"gitId":"jinnieshin"},"content":"**`addstf n/Nurse Joy id/A345678Z p/81623753 e/nurse.joy@example.com a/900 Still Rd w/block B ward 2`**","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"## Adding a ward to the system: addward","lastModifiedDate":"2023-03-30"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"Creates an empty ward with the specified `WARD_NAME`.","lastModifiedDate":"2023-02-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"lukkesreysandeur"},"content":"**Warning: `WARD_NAME` is case-sensitive.** `block B ward 2` will refer to a different ward from `Block b Ward 2`","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"**Format: `addward n/WARD_NAME`**","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"lukkesreysandeur"},"content":"`WARD_NAME` must be unique and cannot be the same as any existing name. This field is case-sensitive.","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"lukkesreysandeur"},"content":"**`addward n/block B ward 2`** will create a new empty ward called block B ward 2\\","lastModifiedDate":"2023-03-30"},{"lineNumber":112,"author":{"gitId":"lukkesreysandeur"},"content":"**`addward n/block C ward 1`** will create a new empty ward called block C ward 1","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-31"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"## Listing all persons: list","lastModifiedDate":"2023-03-31"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"Lists all the peoples’ names and corresponding ID, displaying any tags attached to them and showing the ward they are in.","lastModifiedDate":"2023-03-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"**Format: `list`**","lastModifiedDate":"2023-03-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"## Listing all patients: lspat","lastModifiedDate":"2023-03-30"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"Lists all the patients’ names and corresponding patient ID, displaying any tags attached to them and showing the ward they are in.","lastModifiedDate":"2023-02-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":128,"author":{"gitId":"pzhengze"},"content":"**Format: `lspat`**","lastModifiedDate":"2023-03-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"lukkesreysandeur"},"content":"**`lspat`** will list all patients in each ward on the GUI. Every ward will be displayed in order, with all patients in each ward.","lastModifiedDate":"2023-03-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":136,"author":{"gitId":"pzhengze"},"content":"## Listing staff members: lsstf","lastModifiedDate":"2023-03-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"Lists staff members’ names and the name of the ward they are assigned to.","lastModifiedDate":"2023-02-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"pzhengze"},"content":"**Format: `lsstf`**","lastModifiedDate":"2023-03-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":143,"author":{"gitId":"lukkesreysandeur"},"content":"**`lsstf`** will list all staff assigned to each ward on the GUI. The lists will be grouped according to ward, and each staff","lastModifiedDate":"2023-03-30"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"can appear more than once if they are assigned to more than 1 ward.\\","lastModifiedDate":"2023-02-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"lukkesreysandeur"},"content":"---","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"pzhengze"},"content":"## Finding a person: find","lastModifiedDate":"2023-03-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"Finds all persons with names containing any of the specified keywords and displays them on the GUI.","lastModifiedDate":"2023-03-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"**Warning: `NAME` is case-insensitive.** Using an argument `Alice` will match names `aLice`, `alice`, `ALICE` etc.","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"**Format: `find NAME`**","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"**Examples: `find Alice Tan`** will display all persons with `Alice` or `Tan` in their name.","lastModifiedDate":"2023-03-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":159,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-29"},{"lineNumber":162,"author":{"gitId":"pzhengze"},"content":"## Finding a patient by ID number: findpat","lastModifiedDate":"2023-03-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":164,"author":{"gitId":"pzhengze"},"content":"Finds all patients with names containing any of the specified keywords or id matching the specified keyword and displays","lastModifiedDate":"2023-03-30"},{"lineNumber":165,"author":{"gitId":"pzhengze"},"content":"them on the GUI.","lastModifiedDate":"2023-03-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":167,"author":{"gitId":"lukkesreysandeur"},"content":"**Format: `findpat [n/NAME] [id/ID_NUMBER]`**","lastModifiedDate":"2023-03-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":169,"author":{"gitId":"pzhengze"},"content":"**Note:** Either NAME or ID_NUMBER must be present.","lastModifiedDate":"2023-03-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":172,"author":{"gitId":"lukkesreysandeur"},"content":"**`findpat n/Alex Bob Charles`** Finds all patients with names containing Alex, Bob or Charles.\\","lastModifiedDate":"2023-03-30"},{"lineNumber":173,"author":{"gitId":"lukkesreysandeur"},"content":"**`findpat id/A12345B`** Finds all patients with IDs matching A12345B.","lastModifiedDate":"2023-03-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-31"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"## Finding a staff by ID number: findstf","lastModifiedDate":"2023-03-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"Finds all staff with names containing any of the specified keywords or id matching the specified keyword and displays","lastModifiedDate":"2023-03-31"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"them on the GUI.","lastModifiedDate":"2023-03-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"**Format: `findstf [n/NAME] [id/ID_NUMBER]`**","lastModifiedDate":"2023-03-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"**Note:** Either NAME or ID_NUMBER must be present.","lastModifiedDate":"2023-03-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-31"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"**`findstf n/Alex Bob Charles`** Finds all staff with names containing Alex, Bob or Charles.\\","lastModifiedDate":"2023-03-31"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"**`findstf id/A12345B`** Finds all staff with IDs matching A12345B.","lastModifiedDate":"2023-03-31"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-31"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":194,"author":{"gitId":"pzhengze"},"content":"## Adding patient status: addpatstatus","lastModifiedDate":"2023-03-30"},{"lineNumber":195,"author":{"gitId":"lukkesreysandeur"},"content":"Adds an entry to the list of patient statuses. This list can be viewed by the [view](#viewing-the-details-of-a-specific-person--view)","lastModifiedDate":"2023-03-30"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"command.","lastModifiedDate":"2023-03-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"pzhengze"},"content":"**Note:** If the person indicated by the INDEX must be a `Patient`.","lastModifiedDate":"2023-03-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":200,"author":{"gitId":"pzhengze"},"content":"**Format: `addpatstatus INDEX s/STATUS [s/STATUS]...`**","lastModifiedDate":"2023-03-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":202,"author":{"gitId":"pzhengze"},"content":"**Examples: `addpatstatus 1 s/Feeling alright s/Eating well`**","lastModifiedDate":"2023-03-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":206,"author":{"gitId":"lukkesreysandeur"},"content":"---","lastModifiedDate":"2023-03-28"},{"lineNumber":207,"author":{"gitId":"pzhengze"},"content":"## Deleting patient status: delpatstatus","lastModifiedDate":"2023-03-30"},{"lineNumber":208,"author":{"gitId":"lukkesreysandeur"},"content":"Deletes the specified entry in the list of patient statuses. This list can be viewed by the [view](#viewing-the-details-of-a-specific-person--view)","lastModifiedDate":"2023-03-30"},{"lineNumber":209,"author":{"gitId":"euph00"},"content":"command.","lastModifiedDate":"2023-03-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":211,"author":{"gitId":"pzhengze"},"content":"**Note:** If the person indicated by the PATIENT_INDEX must be a `Patient`.","lastModifiedDate":"2023-03-30"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":213,"author":{"gitId":"pzhengze"},"content":"**Format: `delpatstatus PATIENT_INDEX STATUS_INDEX`**","lastModifiedDate":"2023-03-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":215,"author":{"gitId":"euph00"},"content":"**Examples: `delpatstatus 1 1`** will delete the first status of the patient at the top of the patient list.","lastModifiedDate":"2023-03-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":217,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-30"},{"lineNumber":218,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":219,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-30"},{"lineNumber":220,"author":{"gitId":"jinnieshin"},"content":"## Adding patient todo: addpattodo","lastModifiedDate":"2023-03-30"},{"lineNumber":221,"author":{"gitId":"euph00"},"content":"Adds an entry to the list of patient todos. This list can be viewed by the [view](#viewing-the-details-of-a-specific-person--view)","lastModifiedDate":"2023-03-30"},{"lineNumber":222,"author":{"gitId":"euph00"},"content":"command.","lastModifiedDate":"2023-03-30"},{"lineNumber":223,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":224,"author":{"gitId":"euph00"},"content":"**Note:** If the person indicated by the INDEX must be a `Patient`.","lastModifiedDate":"2023-03-30"},{"lineNumber":225,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":226,"author":{"gitId":"euph00"},"content":"**Format: `addpattodo INDEX td/TODO [td/TODO]...`**","lastModifiedDate":"2023-03-30"},{"lineNumber":227,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":228,"author":{"gitId":"euph00"},"content":"**Examples: `addpattodo 1 td/Take medicine td/physio at 2`**","lastModifiedDate":"2023-03-30"},{"lineNumber":229,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":230,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-30"},{"lineNumber":231,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":232,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-30"},{"lineNumber":233,"author":{"gitId":"jinnieshin"},"content":"## Deleting patient todo: delpattodo","lastModifiedDate":"2023-03-30"},{"lineNumber":234,"author":{"gitId":"euph00"},"content":"Deletes the specified entry in the list of patient todos. This list can be viewed by the [view](#viewing-the-details-of-a-specific-person--view)","lastModifiedDate":"2023-03-30"},{"lineNumber":235,"author":{"gitId":"euph00"},"content":"command.","lastModifiedDate":"2023-03-30"},{"lineNumber":236,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":237,"author":{"gitId":"euph00"},"content":"**Note:** If the person indicated by the PATIENT_INDEX must be a `Patient`.","lastModifiedDate":"2023-03-30"},{"lineNumber":238,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":239,"author":{"gitId":"euph00"},"content":"**Format: `delpattodo PATIENT_INDEX TODO_INDEX`**","lastModifiedDate":"2023-03-30"},{"lineNumber":240,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":241,"author":{"gitId":"euph00"},"content":"**Examples: `delpattodo 1 1`** will delete the first todo of the patient at the top of the patient list.","lastModifiedDate":"2023-03-30"},{"lineNumber":242,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":243,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-29"},{"lineNumber":244,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":245,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-29"},{"lineNumber":246,"author":{"gitId":"pzhengze"},"content":"## Viewing the details of a specific person: view","lastModifiedDate":"2023-03-30"},{"lineNumber":247,"author":{"gitId":"pzhengze"},"content":"Lists the full detail of a specific person, including their name, patient ID and tags in the main window.","lastModifiedDate":"2023-03-30"},{"lineNumber":248,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":249,"author":{"gitId":"euph00"},"content":"**Format: `view INDEX`**","lastModifiedDate":"2023-03-29"},{"lineNumber":250,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":251,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":252,"author":{"gitId":"lukkesreysandeur"},"content":"**`view 1`** will display all the information associated with the 1st person shown on the GUI.","lastModifiedDate":"2023-03-30"},{"lineNumber":253,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":254,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":255,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":256,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"pzhengze"},"content":"## Listing the names of all wards: lsward","lastModifiedDate":"2023-03-30"},{"lineNumber":259,"author":{"gitId":"euph00"},"content":"Lists all existing wards on the GUI. Only ward names will be displayed.","lastModifiedDate":"2023-03-29"},{"lineNumber":260,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":261,"author":{"gitId":"euph00"},"content":"**Format: `lsward`**","lastModifiedDate":"2023-03-29"},{"lineNumber":262,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":263,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-29"},{"lineNumber":264,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":265,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-29"},{"lineNumber":266,"author":{"gitId":"pzhengze"},"content":"## Listing all patients in a particular ward: lswardpat","lastModifiedDate":"2023-03-30"},{"lineNumber":267,"author":{"gitId":"pzhengze"},"content":"Lists all the patients found in the given `WARD_NAME`.","lastModifiedDate":"2023-03-30"},{"lineNumber":268,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":269,"author":{"gitId":"pzhengze"},"content":"**Format: `lswardpat WARD_NAME`**","lastModifiedDate":"2023-03-30"},{"lineNumber":270,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":271,"author":{"gitId":"lukkesreysandeur"},"content":"**Examples: `lswardpat Block A Ward 1`** will list all patients in Block A Ward 1.","lastModifiedDate":"2023-03-30"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":273,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-31"},{"lineNumber":274,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":275,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-29"},{"lineNumber":276,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":277,"author":{"gitId":"euph00"},"content":"## Listing all staff in a particular ward: lswardstf","lastModifiedDate":"2023-03-31"},{"lineNumber":278,"author":{"gitId":"euph00"},"content":"Lists all the staff found in the given `WARD_NAME`.","lastModifiedDate":"2023-03-31"},{"lineNumber":279,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":280,"author":{"gitId":"euph00"},"content":"**Format: `lswardstf WARD_NAME`**","lastModifiedDate":"2023-03-31"},{"lineNumber":281,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":282,"author":{"gitId":"euph00"},"content":"**Examples: `lswardstf Block A Ward 1`** will list all staff in Block A Ward 1.","lastModifiedDate":"2023-03-31"},{"lineNumber":283,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":284,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-31"},{"lineNumber":285,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":286,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-31"},{"lineNumber":287,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":288,"author":{"gitId":"jinnieshin"},"content":"## Update particulars of a person: edit","lastModifiedDate":"2023-03-30"},{"lineNumber":289,"author":{"gitId":"pzhengze"},"content":"This overwrites the specified person’s particulars with new particulars. This command works on both patients and staff.","lastModifiedDate":"2023-03-30"},{"lineNumber":290,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":291,"author":{"gitId":"pzhengze"},"content":"**Format: `edit INDEX [n/PATIENT_NAME] [t/TAG] [p/PHONE_NUMBER] [a/ADDRESS] [e/EMAIL]`**","lastModifiedDate":"2023-03-30"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":294,"author":{"gitId":"lukkesreysandeur"},"content":"**`edit 1 p/81234567`**\\","lastModifiedDate":"2023-03-30"},{"lineNumber":295,"author":{"gitId":"lukkesreysandeur"},"content":"**`edit 2 n/Bob Tan p/91234567`**","lastModifiedDate":"2023-03-30"},{"lineNumber":296,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":297,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-29"},{"lineNumber":298,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":299,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-29"},{"lineNumber":300,"author":{"gitId":"pzhengze"},"content":"## Deleting a person from the system based on list on GUI: delete","lastModifiedDate":"2023-03-30"},{"lineNumber":301,"author":{"gitId":"euph00"},"content":"This deletes the person specified by `INDEX`. This index is the number beside the person on the list of persons on screen.","lastModifiedDate":"2023-03-29"},{"lineNumber":302,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":303,"author":{"gitId":"euph00"},"content":"**Format: `delete INDEX`**","lastModifiedDate":"2023-03-29"},{"lineNumber":304,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":305,"author":{"gitId":"euph00"},"content":"**Examples: `delete 3`**","lastModifiedDate":"2023-03-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"lukkesreysandeur"},"content":"---","lastModifiedDate":"2023-03-28"},{"lineNumber":310,"author":{"gitId":"pzhengze"},"content":"## Deleting a patient from the system: delpat","lastModifiedDate":"2023-03-30"},{"lineNumber":311,"author":{"gitId":"lukkesreysandeur"},"content":"This removes the patient from the system as specified by `ID_NUMBER`.","lastModifiedDate":"2023-03-28"},{"lineNumber":312,"author":{"gitId":"lukkesreysandeur"},"content":"The patient must currently exist for this command to be successfully executed.","lastModifiedDate":"2023-03-28"},{"lineNumber":313,"author":{"gitId":"lukkesreysandeur"},"content":"This will remove the patient from his or her assigned ward as well.","lastModifiedDate":"2023-03-28"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"euph00"},"content":"**Format: `delpat id/ID_NUMBER`**","lastModifiedDate":"2023-03-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":318,"author":{"gitId":"lukkesreysandeur"},"content":"**`delpat id/A0123456789B`** will delete all records of patient with ID number A0123456789B from the system.","lastModifiedDate":"2023-03-30"},{"lineNumber":319,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":320,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":323,"author":{"gitId":"jinnieshin"},"content":"## Deleting a staff member from the system: delstf","lastModifiedDate":"2023-03-30"},{"lineNumber":324,"author":{"gitId":"pzhengze"},"content":"This removes the staff from the system as specified by `ID_NUMBER`.","lastModifiedDate":"2023-03-30"},{"lineNumber":325,"author":{"gitId":"pzhengze"},"content":"The staff must currently exist for this command to be successfully executed.","lastModifiedDate":"2023-03-30"},{"lineNumber":326,"author":{"gitId":"pzhengze"},"content":"This will remove the staff from his or her assigned ward as well.","lastModifiedDate":"2023-03-30"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"pzhengze"},"content":"**Format: `delstf id/ID_NUMBER`**","lastModifiedDate":"2023-03-30"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":331,"author":{"gitId":"lukkesreysandeur"},"content":"**`delstf id/A12345B`** will delete all records of staff with ID number A12345B from the system.","lastModifiedDate":"2023-03-30"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":334,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":335,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":336,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":337,"author":{"gitId":"pzhengze"},"content":"## Deleting a ward from the system: delward","lastModifiedDate":"2023-03-30"},{"lineNumber":338,"author":{"gitId":"lukkesreysandeur"},"content":"This deletes the `WARD_NAME` specified from the system. The ward being deleted must be empty for this command to be successfully executed.","lastModifiedDate":"2023-03-28"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"lukkesreysandeur"},"content":"**Warning: `WARD_NAME` is case-sensitive.** `block B ward 2` will refer to a different ward from `Block b Ward 2`","lastModifiedDate":"2023-03-28"},{"lineNumber":341,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":342,"author":{"gitId":"euph00"},"content":"**Format: `delward n/WARD_NAME`**","lastModifiedDate":"2023-03-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-29"},{"lineNumber":345,"author":{"gitId":"lukkesreysandeur"},"content":"**`delward n/block B ward 2`** will remove block B ward 2 from the system. The ward must have been empty before deletion.","lastModifiedDate":"2023-03-30"},{"lineNumber":346,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":347,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":350,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":351,"author":{"gitId":"euph00"},"content":"## Transferring a patient between wards: trfward","lastModifiedDate":"2023-03-31"},{"lineNumber":352,"author":{"gitId":"euph00"},"content":"This moves the patient at `INDEX` position on the list to the specified `WARD_NAME`. `WARD_NAME` must already exist.","lastModifiedDate":"2023-03-31"},{"lineNumber":353,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":354,"author":{"gitId":"euph00"},"content":"**Warning: `WARD_NAME` is case-sensitive.** `block B ward 2` will refer to a different ward from `Block b Ward 2`","lastModifiedDate":"2023-03-31"},{"lineNumber":355,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":356,"author":{"gitId":"euph00"},"content":"**Format: `trfward INDEX w/WARD_NAME`**","lastModifiedDate":"2023-03-31"},{"lineNumber":357,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":358,"author":{"gitId":"euph00"},"content":"**Examples:**","lastModifiedDate":"2023-03-31"},{"lineNumber":359,"author":{"gitId":"euph00"},"content":"**`trfward 2 w/Block C Ward 1`** will transfer the second person on the main list to Block C Ward 1, if the ward exists.","lastModifiedDate":"2023-03-31"},{"lineNumber":360,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":361,"author":{"gitId":"euph00"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-31"},{"lineNumber":362,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":363,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-03-31"},{"lineNumber":364,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":365,"author":{"gitId":"euph00"},"content":"## Exiting the program: exit","lastModifiedDate":"2023-02-25"},{"lineNumber":366,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"euph00"},"content":"**Format: `exit`**","lastModifiedDate":"2023-03-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":370,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"lukkesreysandeur"},"content":"# FAQ","lastModifiedDate":"2023-03-30"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"lukkesreysandeur"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Patientist home folder.","lastModifiedDate":"2023-03-28"},{"lineNumber":377,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":378,"author":{"gitId":"jinnieshin"},"content":"**Q**: How do I ensure that I have Java 11 on my computer?\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":379,"author":{"gitId":"jinnieshin"},"content":"**A**: Check how to find the Java version in your computer [here](https://www.java.com/en/download/help/version_manual.html).","lastModifiedDate":"2023-03-30"},{"lineNumber":380,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":381,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"lukkesreysandeur"},"content":"# Command summary","lastModifiedDate":"2023-03-30"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"euph00"},"content":"| Action                                                                                                        | Format                                                                                               | Examples                                                                                                       |","lastModifiedDate":"2023-03-31"},{"lineNumber":387,"author":{"gitId":"euph00"},"content":"|---------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-31"},{"lineNumber":388,"author":{"gitId":"euph00"},"content":"| **[View help](#viewing-help--help)**                                                                          | `help`                                                                                               |                                                                                                                |","lastModifiedDate":"2023-03-31"},{"lineNumber":389,"author":{"gitId":"euph00"},"content":"| **[Clear patientist](#clearing-the-patientist--clear)**                                                       | `clear`                                                                                              |                                                                                                                |","lastModifiedDate":"2023-03-31"},{"lineNumber":390,"author":{"gitId":"euph00"},"content":"| **[Add patient](#adding-a-patient--addpat)**                                                                  | `addpat n/PATIENT_NAME id/ID_NUMBER p/PHONE_NO e/EMAIL a/ADDRESS w/WARD_NAME pr/PRIORITY [t/TAG]...` | `addpat n/John Doe id/A12345B w/Block B Ward 2 p/98765432 e/johnd@example.com a/Clementi Ave 2, #02-25 pr/LOW` |","lastModifiedDate":"2023-03-31"},{"lineNumber":391,"author":{"gitId":"euph00"},"content":"| **[Add staff](#adding-a-staff-member--addstf)**                                                               | `addstf n/STAFF_NAME id/ID_NUMBER p/PHONE_NO e/EMAIL a/ADDRESS w/WARD_NAME`                          | `addstf n/Dr Mallory Wong id/A987654321H p/97365482 e/mwong@example.com a/390 Geylang Rd w/block B ward 2`     |","lastModifiedDate":"2023-03-31"},{"lineNumber":392,"author":{"gitId":"euph00"},"content":"| **[Add ward](#adding-a-ward-to-the-system--addward)**                                                         | `addward n/WARD_NAME`                                                                                | `addward n/block B ward 2`                                                                                     |","lastModifiedDate":"2023-03-31"},{"lineNumber":393,"author":{"gitId":"euph00"},"content":"| **[List patients](#listing-all-patients--lspat)**                                                             | `lspat`                                                                                              |                                                                                                                |","lastModifiedDate":"2023-03-31"},{"lineNumber":394,"author":{"gitId":"euph00"},"content":"| **[List staff members](#listing-staff-members--lsstf)**                                                       | `lsstf`                                                                                              |                                                                                                                |","lastModifiedDate":"2023-03-31"},{"lineNumber":395,"author":{"gitId":"euph00"},"content":"| **[Find person](#finding-a-person--find)**                                                                    | `find NAME`                                                                                          | `find Alice Tan`                                                                                               |","lastModifiedDate":"2023-03-31"},{"lineNumber":396,"author":{"gitId":"euph00"},"content":"| **[Find patient by ID](#finding-a-patient-by-id-number--findpat)**                                            | `findpat [n/NAME] [id/ID_NUMBER]`                                                                    | `findpat n/Alex Bob Charles`, `findpat id/A12345B`                                                             |","lastModifiedDate":"2023-03-31"},{"lineNumber":397,"author":{"gitId":"euph00"},"content":"| **[Find staff by ID](#finding-a-staff-by-id-number--findstf)**                                                | `findstf [n/NAME] [id/ID_NUMBER]`                                                                    | `findstf n/Alex Bob Charles`, `findstf id/A12345B`                                                             |","lastModifiedDate":"2023-03-31"},{"lineNumber":398,"author":{"gitId":"euph00"},"content":"| **[Add patient status](#adding-patient-status--addpatstatus)**                                                | `addpatstatus INDEX s/STATUS [s/STATUS]... `                                                         | `addpatstatus 1 s/Feeling alright s/Eating well`                                                               |","lastModifiedDate":"2023-03-31"},{"lineNumber":399,"author":{"gitId":"euph00"},"content":"| **[Delete patient status](#deleting-patient-status--delpatstatus)**                                           | `delpatstatus PATIENT_INDEX STATUS_INDEX`                                                            | `delpatstatus PATIENT_INDEX STATUS_INDEX`                                                                      |","lastModifiedDate":"2023-03-31"},{"lineNumber":400,"author":{"gitId":"euph00"},"content":"| **[Add patient todo](#adding-patient-todo--addpattodo)**                                                      | `addpattodo INDEX td/TODO [td/TODO]...`                                                              | `addpattodo 1 td/Take medicine td/physio at 2`                                                                 |","lastModifiedDate":"2023-03-31"},{"lineNumber":401,"author":{"gitId":"euph00"},"content":"| **[Delete patient todo](#deleting-patient-todo--delpattodo)**                                                 | `delpattodo PATIENT_INDEX TODO_INDEX`                                                                | `delpattodo 1 1`                                                                                               |","lastModifiedDate":"2023-03-31"},{"lineNumber":402,"author":{"gitId":"euph00"},"content":"| **[View details of a person](#viewing-the-details-of-a-specific-person--view)**                               | `view INDEX`                                                                                         | `view 1`                                                                                                       |","lastModifiedDate":"2023-03-31"},{"lineNumber":403,"author":{"gitId":"euph00"},"content":"| **[List wards](#listing-the-names-of-all-wards--lsward)**                                                     | `lsward`                                                                                             |                                                                                                                |","lastModifiedDate":"2023-03-31"},{"lineNumber":404,"author":{"gitId":"euph00"},"content":"| **[List patients in a ward](#listing-all-patients-in-a-particular-ward--lswardpat)**                          | `lswardpat WARD_NAME`                                                                                | `lswardpat Block A Ward 1`                                                                                     |","lastModifiedDate":"2023-03-31"},{"lineNumber":405,"author":{"gitId":"euph00"},"content":"| **[List staff in a ward](#listing-all-staff-in-a-particular-ward--lswardstf)**                                | `lswardstf WARD_NAME`                                                                                | `lswardstf Block A Ward 1`                                                                                     |","lastModifiedDate":"2023-03-31"},{"lineNumber":406,"author":{"gitId":"euph00"},"content":"| **[Update person\u0027s particulars](#update-particulars-of-a-person--edit)**                                      | `edit INDEX [n/PATIENT_NAME] [t/TAG] [p/PHONE_NUMBER] [a/ADDRESS] [e/EMAIL]`                         | `edit 2 n/Bob Tan p/91234567`                                                                                  |","lastModifiedDate":"2023-03-31"},{"lineNumber":407,"author":{"gitId":"euph00"},"content":"| **[Delete person from system based on GUI](#deleting-a-person-from-the-system-based-on-list-on-gui--delete)** | `delete INDEX`                                                                                       | `delete 2`                                                                                                     |","lastModifiedDate":"2023-03-31"},{"lineNumber":408,"author":{"gitId":"euph00"},"content":"| **[Delete patient from system](#deleting-a-patient-from-the-system--delpat)**                                 | `delpat id/ID_NUMBER`                                                                                | `delpat id/A0123456789B`                                                                                       |","lastModifiedDate":"2023-03-31"},{"lineNumber":409,"author":{"gitId":"euph00"},"content":"| **[Delete staff member from system](#deleting-a-staff-member-from-the-system--delstf)**                       | `delstf id/ID_NUMBER`                                                                                | `delstf id/A12345B`                                                                                            |","lastModifiedDate":"2023-03-31"},{"lineNumber":410,"author":{"gitId":"euph00"},"content":"| **[Delete ward from system](#deleting-a-ward-from-the-system--delward)**                                      | `delward n/WARD_NAME`                                                                                | `delward n/block B ward 2`                                                                                     |","lastModifiedDate":"2023-03-31"},{"lineNumber":411,"author":{"gitId":"euph00"},"content":"| **[Transferring patient between wards](#transferring-a-patient-between-wards--trfward)**                      | `trfward INDEX w/WARD_NAME`                                                                          | `trfward 2 w/Block C Ward 1`                                                                                   |","lastModifiedDate":"2023-03-31"},{"lineNumber":412,"author":{"gitId":"euph00"},"content":"| **[Exit the program](#exiting-the-program--exit)**                                                            | `exit`                                                                                               |                                                                                                                |","lastModifiedDate":"2023-03-31"},{"lineNumber":413,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":414,"author":{"gitId":"lukkesreysandeur"},"content":"[Go back to [Table of Contents](#table-of-contents)]","lastModifiedDate":"2023-03-28"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"lukkesreysandeur":86,"euph00":181,"GlennOngJunJie":1,"-":104,"pzhengze":34,"jinnieshin":9}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"euph00"},"content":"    content: \"patientist\";","lastModifiedDate":"2023-02-25"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"euph00":1,"-":294}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"logic -[LOGIC_COLOR]\u003e model : removePerson(p)","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"logic -[LOGIC_COLOR]\u003e storage : savePatientist(patientist)","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"euph00":1,"-":36,"pzhengze":1}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"participant \":PatientistParser\" as PatientistParser LOGIC_COLOR","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"participant \":Patientist\" as Patientist MODEL_COLOR","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"LogicManager -\u003e PatientistParser : parseCommand(\"delete 1\")","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"activate PatientistParser","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"PatientistParser -\u003e DeleteCommandParser","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"DeleteCommandParser --\u003e PatientistParser","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"PatientistParser -\u003e DeleteCommandParser : parse(\"1\")","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"DeleteCommandParser --\u003e PatientistParser : d","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"DeleteCommandParser -[hidden]-\u003e PatientistParser","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"PatientistParser --\u003e LogicManager : d","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"deactivate PatientistParser","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"DeleteCommand -\u003e Model : getPatientist()","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"DeleteCommand -\u003e Patientist : removePerson(p)","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"activate Patientist","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"Patientist --\u003e DeleteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"deactivate Patientist","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":58,"pzhengze":19}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic {","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"Class PatientistParser","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nLogic\" as Logic","lastModifiedDate":"2022-01-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"package Model{","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"LogicManager .right.|\u003e Logic","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"LogicManager -right-\u003e\"1\" PatientistParser","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"PatientistParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e","lastModifiedDate":"2019-07-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager --\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Storage --[hidden] Model","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Command .[hidden]up.\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult : produces \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":43,"pzhengze":3}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyPatientist\" as ReadOnlyPatientist","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"Class Patientist","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"Class WardList","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"Class Ward","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"Class Patient","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"Class Staff","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"Class \"{abstract}\\nPerson\" as Person","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"Class Id","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"Class RoleTag","lastModifiedDate":"2023-03-26"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"Class PatientStatusDetails","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"Patientist .up.|\u003e ReadOnlyPatientist","lastModifiedDate":"2023-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"Model .left.\u003e ReadOnlyPatientist","lastModifiedDate":"2023-03-26"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"ModelManager -left-\u003e \"1\" Patientist","lastModifiedDate":"2023-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"Patientist *--\u003e \"1\" WardList","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"WardList -\u003e \"1..*\" Ward","lastModifiedDate":"2023-03-26"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"Ward *--\u003e \"1 Staff\" UniquePersonList","lastModifiedDate":"2023-03-26"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"Ward *--\u003e \"1 Patients\" UniquePersonList","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"UniquePersonList -right-\u003e \"~*\" Person","lastModifiedDate":"2023-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"Person *--\u003e \"~*\" Tag","lastModifiedDate":"2023-03-26"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"Person *--\u003e Id","lastModifiedDate":"2023-03-26"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"Tag -left-|\u003e RoleTag","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"Person *--\u003e \"1\" RoleTag","lastModifiedDate":"2023-03-26"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"Staff --|\u003e Person","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"Patient -left-|\u003e Person","lastModifiedDate":"2023-03-26"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"Patient *-right-\u003e \"1\" PatientStatusDetails","lastModifiedDate":"2023-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"ModelManager --\u003e\"~*\" Person","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"euph00":29,"-":40}},{"path":"docs/diagrams/ParserClasses.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"package \"Parser classes\"{","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nParser\" as Parser","lastModifiedDate":"2022-01-03"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"Class PatientistParser","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"HiddenOutside ..\u003e PatientistParser","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"PatientistParser .down.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"PatientistParser ..\u003e Command : returns \u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"XYZCommandParser .up.|\u003e Parser","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"-":34,"pzhengze":4}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"package Storage1{","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"package \"Patientist Storage\" #F4F6F6{","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nPatientistStorage\" as PatientistStorage","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"Class JsonPatientistStorage","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"Class JsonSerializablePatientist","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"Class JsonAdaptedWard","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"Class JsonAdaptedPatient","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"Class JsonAdaptedStaff","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"StorageManager -up-\u003e \"1\" PatientistStorage","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"Storage -right-|\u003e PatientistStorage","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"JsonPatientistStorage .up.|\u003e PatientistStorage","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"JsonPatientistStorage ..\u003e JsonSerializablePatientist","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"JsonSerializablePatientist --\u003e \"*\" JsonAdaptedWard","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"JsonAdaptedWard --\u003e \"*\" JsonAdaptedPatient","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"JsonAdaptedWard --\u003e \"*\" JsonAdaptedStaff","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"JsonAdaptedPatient --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"JsonAdaptedStaff --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":31,"pzhengze":17}},{"path":"docs/diagrams/Ui.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"@startuml","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"!include ../style.puml","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"package \"UI\" {","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"    interface Ui","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"    class UiManager","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"    class MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"    class StatusBarFooter","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"    class ResultDisplay","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"    class CommandBox","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"    class HelpWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"    class PersonListPanel","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    class PersonCard","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    class DetailsPopup","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    abstract class UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"package \"Logic\"","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"package \"Model\"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"UiManager \u003c|-- Ui","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"MainWindow \"1\" \u003c-- UiManager","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"UiPart \u003c|-- MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"StatusBarFooter \"1\" *-- MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"ResultDisplay \"1\" *-- MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"CommandBox \"1\" *-- MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"DetailsPopup \"1\" *-- MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"HelpWindow \"0..1\" *-- MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"PersonListPanel \"1\" *-- MainWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"PersonCard \"*\" *-- PersonListPanel","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"StatusBarFooter \u003c|-- UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"ResultDisplay \u003c|-- UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"CommandBox \u003c|-- UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"DetailsPopup \u003c|-- UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"HelpWindow \u003c|-- UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"PersonListPanel \u003c|-- UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"PersonCard \u003c|-- UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"Logic \u003c-- UiManager","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"Model \u003c.. PersonCard","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"@enduml","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"jinnieshin":38}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUi\" as Ui","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"Class DetailsPopup","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"MainWindow *-down-\u003e \"1\" DetailsPopup","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"MainWindow --|\u003e UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"DetailsPopup --|\u003e UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":58,"pzhengze":4}},{"path":"docs/diagrams/UndoRedoState1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"delete 5\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    class State1 as \"__ab0:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    class State2 as \"__ab1:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    class State3 as \"__ab2:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"class Pointer as \"Current State\"","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"euph00":1,"-":21}},{"path":"docs/diagrams/WardFeatureStep1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"@startuml","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"\u0027https://plantuml.com/object-diagram","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"!include style.puml","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"title After adding first Ward","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"package \"Ward System\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    class Patientist as \"__:Patientist__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    class WardList as \"__:WardList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    package \"Block A Ward 1\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        class BlockAWard1 as \"__blockAWard1:Ward__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        class StaffList as \"__staff:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        class PatientList as \"__patients:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    Patientist --\u003e WardList","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    WardList --\u003e BlockAWard1","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    BlockAWard1 --\u003e StaffList","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    BlockAWard1 --\u003e PatientList","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"@enduml","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"euph00":24}},{"path":"docs/diagrams/WardFeatureStep2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"@startuml","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"\u0027https://plantuml.com/object-diagram","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"!include style.puml","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"title After adding second Ward","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"package \"Ward System\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    class Patientist as \"__:Patientist__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    class WardList as \"__:WardList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    package \"Block A Ward 1\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        class BlockAWard1 as \"__blockAWard1:Ward__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        class StaffListA1 as \"__staff:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        class PatientListA1 as \"__patients:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    package \"Block B Ward 1\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        class BlockBWard1 as \"__blockAWard1:Ward__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        class StaffListB1 as \"__staff:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        class PatientListB1 as \"__patients:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    Patientist --\u003e WardList","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    WardList --\u003e BlockAWard1","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    BlockAWard1 --\u003e StaffListA1","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    BlockAWard1 --\u003e PatientListA1","lastModifiedDate":"2023-03-26"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    WardList --\u003e BlockBWard1","lastModifiedDate":"2023-03-26"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    BlockBWard1 --\u003e StaffListB1","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    BlockBWard1 --\u003e PatientListB1","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"@enduml","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"euph00":32}},{"path":"docs/diagrams/WardFeatureStep3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"@startuml","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"\u0027https://plantuml.com/object-diagram","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"!include style.puml","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"title After adding Patient and Staff","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"package \"Ward System\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    class Patientist as \"__:Patientist__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    class WardList as \"__:WardList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    package \"Block A Ward 1\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        class BlockAWard1 as \"__blockAWard1:Ward__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        class StaffListA1 as \"__staff:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        class PatientListA1 as \"__patients:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"        class StaffAmy as \"__amy:Staff__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        class PatientBob as \"__bob:Patient__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    package \"Block B Ward 1\" \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        class BlockBWard1 as \"__blockAWard1:Ward__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        class StaffListB1 as \"__staff:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        class PatientListB1 as \"__patients:UniquePersonList__\"","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    Patientist --\u003e WardList","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    WardList --\u003e BlockAWard1","lastModifiedDate":"2023-03-26"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    BlockAWard1 --\u003e StaffListA1","lastModifiedDate":"2023-03-26"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    BlockAWard1 --\u003e PatientListA1","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    PatientListA1 --\u003e PatientBob","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    StaffListA1 --\u003e StaffAmy","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    WardList --\u003e BlockBWard1","lastModifiedDate":"2023-03-26"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    BlockBWard1 --\u003e StaffListB1","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    BlockBWard1 --\u003e PatientListB1","lastModifiedDate":"2023-03-26"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-26"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"@enduml","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"euph00":37}},{"path":"docs/diagrams/WardFeatureStep4.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"@startuml","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"\u0027https://plantuml.com/object-diagram","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"object London","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"object Washington","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"object Berlin","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"object NewYork","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"map CapitalCity {","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":" UK *-\u003e London","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":" USA *--\u003e Washington","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":" Germany *---\u003e Berlin","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"NewYork --\u003e CapitalCity::USA","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"@enduml","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"euph00":16}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: AddressBook Level-3","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"[![Java CI](https://github.com/AY2223S2-CS2103T-T12-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2223S2-CS2103T-T12-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"[![codecov]()]()","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"euph00":2,"-":17}},{"path":"docs/team/euph00.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"layout: page","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"title: Lin Chieh\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"### Project: Patientist - hospital management system","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"Patientist is a patient management system that seeks to unify data management in medical facilities.","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"Admin and medical staff alike will find this application useful due to the myriad of features available,","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"yet being fast and lightweight to use due to its optimisation for Command Line Interface (CLI) interaction.","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"* **New Feature**:","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"* **New Feature**:","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"* **Project management**:","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    * User Guide:","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        * Drafted first iteration user guide for V1.2.","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"* **Community**:","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"* **Tools**:","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"euph00":32}},{"path":"docs/team/glennongjunjie.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"layout: page","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"title: Glenn\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"### Project: Patientist - hospital management system","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"Patientist is a patient management system that aims to streamline data management in medical facilities such as Hospitals.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"The app is fast and lightweight to use due to its optimisation for Command Line Interface (CLI) interaction, while","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"providing many features tailored to Medical Staffs.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"* **Project management**:","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"    * User Guide:","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"* **Community**:","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"* **Tools**:","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"GlennOngJunJie":30}},{"path":"docs/team/jinnieshin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"---","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"layout: page","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"title: Jin\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"---","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"### Project: Patientist - hospital management system","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"Patientist is a patient management system that aims to streamline data management in medical facilities such as Hospitals.","lastModifiedDate":"2023-03-05"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"The app is fast and lightweight to use due to its optimisation for Command Line Interface (CLI) interaction, while","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"providing many features tailored to Medical Staffs.","lastModifiedDate":"2023-03-05"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"* **Project management**:","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-05"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-05"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    * User Guide:","lastModifiedDate":"2023-03-05"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-05"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"* **Community**:","lastModifiedDate":"2023-03-05"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"* **Tools**:","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"jinnieshin":30}},{"path":"docs/team/lukkesreysandeur.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"layout: page","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"title: Lucas\u0027 Project Portfolio Page","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"### Project: Patientist - hospital management system","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"Patientist is a patient management system that aims to streamline data management in medical facilities such as Hospitals.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"The app is fast and lightweight to use due to its optimisation for Command Line Interface (CLI) interaction, while","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"providing many features tailored to Medical Staffs.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"* **Project management**:","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    * User Guide:","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"* **Community**:","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"* **Tools**:","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"lukkesreysandeur":30}},{"path":"docs/team/pzhengze.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"---","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"layout: page","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"title: Zheng Ze\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"---","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"### Project: Patientist - hospital management system","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"Patientist is a patient management system that aims to streamline data management in medical facilities such as Hospitals.","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"The app is fast and lightweight to use due to its optimisation for Command Line Interface (CLI) interaction, while","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"providing many features tailored to Medical Staffs.","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"* **Project management**:","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"  * User Guide:","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"  * Developer Guide:","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"* **Community**:","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"* **Tools**:","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"pzhengze":30}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"Create a `RemarkCommandParser` class in the `seedu.patientist.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2023-03-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"euph00"},"content":"Create a new `Remark` in `seedu.patientist.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2023-03-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"euph00"},"content":"Simply add the following to [`seedu.patientist.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2023-03-09"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"euph00":6,"-":395}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"The `address` field in `Person` is actually an instance of the `seedu.patientist.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"euph00":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.patientist.logic.Logic`.","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"A quick look at the `seedu.patientist.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"euph00":2,"-":299}},{"path":"src/main/java/seedu/patientist/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.FileUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"euph00":3,"-":61}},{"path":"src/main/java/seedu/patientist/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"euph00":1,"-":24}},{"path":"src/main/java/seedu/patientist/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Config;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Version;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.ConfigUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.StringUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.Logic;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.LogicManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.util.SampleDataUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.JsonPatientistStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.PatientistStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.Storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.StorageManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.UserPrefsStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"import seedu.patientist.ui.Ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"import seedu.patientist.ui.UiManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Patientist ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"        PatientistStorage patientistStorage \u003d new JsonPatientistStorage(userPrefs.getPatientistFilePath());","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"        storage \u003d new StorageManager(patientistStorage, userPrefsStorage);","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s patientist book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"     * The data from the sample patientist book will be used instead if {@code storage}\u0027s patientist book is not found,","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"     * or an empty patientist book will be used instead if errors occur when reading {@code storage}\u0027s patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"        Optional\u003cReadOnlyPatientist\u003e patientistOptional;","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        ReadOnlyPatientist initialData;","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"            patientistOptional \u003d storage.readPatientist();","lastModifiedDate":"2023-03-12"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"            if (!patientistOptional.isPresent()) {","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Patientist\");","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"            initialData \u003d patientistOptional.orElseGet(SampleDataUtil::getSamplePatientist);","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Patientist\");","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"            initialData \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Patientist\");","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"            initialData \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Patientist\");","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"        logger.info(\"Starting Patientist \" + MainApp.VERSION);","lastModifiedDate":"2023-03-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":42,"-":140,"pzhengze":1}},{"path":"src/main/java/seedu/patientist/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":62}},{"path":"src/main/java/seedu/patientist/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":78}},{"path":"src/main/java/seedu/patientist/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":111}},{"path":"src/main/java/seedu/patientist/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":1,"-":11}},{"path":"src/main/java/seedu/patientist/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":115}},{"path":"src/main/java/seedu/patientist/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core.index;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"euph00":1,"-":53}},{"path":"src/main/java/seedu/patientist/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.exceptions;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":10}},{"path":"src/main/java/seedu/patientist/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.exceptions;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":1,"-":20}},{"path":"src/main/java/seedu/patientist/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.MainApp;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"euph00":2,"-":40}},{"path":"src/main/java/seedu/patientist/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":1,"-":34}},{"path":"src/main/java/seedu/patientist/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Config;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"euph00":3,"-":20}},{"path":"src/main/java/seedu/patientist/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":82}},{"path":"src/main/java/seedu/patientist/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":3,"-":140}},{"path":"src/main/java/seedu/patientist/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":2,"-":66}},{"path":"src/main/java/seedu/patientist/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.CommandResult;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"     * Returns the Patientist.","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"     * @see seedu.patientist.model.Model#getPatientist()","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    ReadOnlyPatientist getPatientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     * Returns the user prefs\u0027 patientist book file path.","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    Path getPatientistPath();","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"euph00":12,"-":38}},{"path":"src/main/java/seedu/patientist/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.Command;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.CommandResult;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.PatientistParser;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.Storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    private final PatientistParser patientistParser;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        patientistParser \u003d new PatientistParser();","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        Command command \u003d patientistParser.parseCommand(commandText);","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        model.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"            storage.savePatientist(model.getPatientist());","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        return model.getPatientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"    public Path getPatientistPath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        return model.getPatientistFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"euph00":20,"-":61,"pzhengze":2}},{"path":"src/main/java/seedu/patientist/logic/commands/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" * Adds a person to the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"public class AddPatientCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"addpat\";","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the patientist book. \"","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                                               + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                                               + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"                                               + PREFIX_ID + \"ID \"","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"                                               + PREFIX_WARD + \"WARD \"","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                                               + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                                               + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                                               + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"                                               + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \"","lastModifiedDate":"2023-03-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                                               + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                                               + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                                               + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"                                               + PREFIX_ID + \"A12345B \"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"                                               + PREFIX_WARD + \"Block B Ward 2 \"","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                                               + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                                               + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                                               + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"                                               + PREFIX_PRIORITY + \"LOW\";","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the patientist book\";","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_WARD_NOT_FOUND \u003d \"Ward not found: %1$s\";","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    private final String wardToAdd;","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    private final Patient toAdd;","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    public AddPatientCommand(String ward, Patient patient) {","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(patient, ward);","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        wardToAdd \u003d ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        if (!model.hasWard(new Ward(wardToAdd))) {","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(String.format(MESSAGE_WARD_NOT_FOUND, wardToAdd));","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        model.addPatient(toAdd, model.getWard(wardToAdd));","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"                || (other instanceof AddPatientCommand // instanceof handles nulls","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"                    \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd)","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"                    \u0026\u0026 wardToAdd.equals(((AddPatientCommand) other).wardToAdd));","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lukkesreysandeur":5,"euph00":10,"-":43,"pzhengze":24,"jinnieshin":2}},{"path":"src/main/java/seedu/patientist/logic/commands/AddPatientStatusCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":" * Adds a status to the patient identified using it\u0027s displayed index from the patientist book.","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"public class AddPatientStatusCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"addpatstatus\";","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"                                               + \": Adds a status to the patient identified by the index number used in\"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"                                               + \" the displayed person list.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"                                               + \"Parameters: \"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"                                               + \"INDEX (must be a positive integer) \"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"                                               + PREFIX_STATUS + \"STATUS\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                                               + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"                                               + \"1 \"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"                                               + PREFIX_STATUS + \"Feeling fine\";","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_ADD_STATUS_SUCCESS \u003d \"Added status %1$s to %2$s.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_NOT_PATIENT \u003d \"Person selected is not a Patient.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"    private final List\u003cPatientStatusDetails\u003e statusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"     * Creates an AddPatientStatusCommand to add the specified {@code PatientStatusDeatils} into the target Patient.","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"    public AddPatientStatusCommand(Index targetIndex, List\u003cPatientStatusDetails\u003e statusDetails) {","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        this.statusDetails \u003d statusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        Person personToAdd \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        if (!(personToAdd instanceof Patient)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(MESSAGE_NOT_PATIENT);","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d null;","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"        for (String wardName : model.getWardNames()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"            if (model.getWard(wardName).containsPatient((Patient) personToAdd)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"                ward \u003d model.getWard(wardName);","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"                break;","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(\"Patient not found in Patientist\");","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        Patient patientToAdd \u003d (Patient) personToAdd;","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"        for (PatientStatusDetails statusDetail : statusDetails) {","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"            patientToAdd.addPatientStatusDetails(statusDetail);","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d (Patientist) model.getPatientist();","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"        patientist.removePerson(personToAdd);","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"        model.addPatient(patientToAdd, ward);","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_STATUS_SUCCESS, statusDetails, patientToAdd));","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof AddPatientStatusCommand // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 targetIndex.equals(((AddPatientStatusCommand) other).targetIndex)","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 statusDetails.equals(((AddPatientStatusCommand) other).statusDetails)); // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":96}},{"path":"src/main/java/seedu/patientist/logic/commands/AddPatientToDoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TODO;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" * Adds a todo to the patient identified using its displayed index from the patientist book.","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"public class AddPatientToDoCommand extends Command {","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    public static final String COMMAND_WORD \u003d \"addpattodo\";","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"            + \": Adds a todo to the patient identified by the index number used in\"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"            + \" the displayed person list.\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"            + \"INDEX (must be a positive integer) \"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"            + PREFIX_TODO + \"TODO\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            + \"1 \"","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"            + PREFIX_TODO + \"Take medicine\";","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_ADD_TODO_SUCCESS \u003d \"Added todo %1$s to %2$s.\";","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_NOT_PATIENT \u003d \"Person selected is not a Patient.\";","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"    private final List\u003cPatientToDo\u003e toDos;","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"     * Creates an AddPatientToDoCommand to add the specified {@code PatientToDo} into the target Patient.","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    public AddPatientToDoCommand(Index targetIndex, List\u003cPatientToDo\u003e toDos) {","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        this.toDos \u003d toDos;","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        Person personToAdd \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"        if (!(personToAdd instanceof Patient)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"            throw new CommandException(MESSAGE_NOT_PATIENT);","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"        Ward ward \u003d null;","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"        for (String wardName : model.getWardNames()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"            if (model.getWard(wardName).containsPatient((Patient) personToAdd)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"                ward \u003d model.getWard(wardName);","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"                break;","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"            throw new CommandException(\"Patient not found in Patientist\");","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        Patient patientToAdd \u003d (Patient) personToAdd;","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        for (PatientToDo toDo : toDos) {","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"            patientToAdd.addPatientToDo(toDo);","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"        Patientist patientist \u003d (Patientist) model.getPatientist();","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        patientist.removePerson(personToAdd);","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        model.addPatient(patientToAdd, ward);","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TODO_SUCCESS, toDos, patientToAdd));","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"                || (other instanceof AddPatientToDoCommand // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 targetIndex.equals(((AddPatientToDoCommand) other).targetIndex)","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 toDos.equals(((AddPatientToDoCommand) other).toDos)); // state check","lastModifiedDate":"2023-03-30"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"euph00":96}},{"path":"src/main/java/seedu/patientist/logic/commands/AddStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":" * Adds a hospital staff member to patientist.","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"public class AddStaffCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String COMMAND_WORD \u003d \"addstf\";","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a staff member to patientist. \"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + \"Parameters: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_ID + \"ID \"","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_WARD + \"WARD \"","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_NAME + \"Mary Jane \"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_ID + \"A17625H \"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_WARD + \"Block B Ward 2 \"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_PHONE + \"96421234 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_EMAIL + \"mj@example.com \"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_ADDRESS + \"789 Hospice St, #06-16 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"                                                            + PREFIX_TAG + \"12B\";","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New staff member added: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This staff member already exists in the patientist book\";","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_WARD_NOT_FOUND \u003d \"Ward not found: %1$s\";","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"    private final String wardToAdd;","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"    private final Staff toAdd;","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"     * Creates an AddCommand to add the specified {@code Staff}","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param staff The staff member to be created.","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"    public AddStaffCommand(String ward, Staff staff) {","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(staff, ward);","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        wardToAdd \u003d ward;","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"        toAdd \u003d staff;","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!model.hasWard(new Ward(wardToAdd))) {","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new CommandException(String.format(MESSAGE_WARD_NOT_FOUND, wardToAdd));","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"        model.addStaff(toAdd, model.getWard(wardToAdd));","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof AddStaffCommand // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"lukkesreysandeur"},"content":"                    \u0026\u0026 toAdd.equals(((AddStaffCommand) other).toAdd)","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"lukkesreysandeur"},"content":"                    \u0026\u0026 wardToAdd.equals(((AddStaffCommand) other).wardToAdd));","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"lukkesreysandeur":83}},{"path":"src/main/java/seedu/patientist/logic/commands/AddWardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":" * Adds a hospital ward to patientist.","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"public class AddWardCommand extends Command {","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"addward\";","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a ward to patientist. \"","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"                                               + \"Parameters: \"","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"                                               + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"                                               + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"                                               + PREFIX_NAME + \"Block B Ward 2\";","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New ward added: %1$s\";","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_DUPLICATE_WARD \u003d \"This ward already exists in the patientist book\";","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    private final Ward toAdd;","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"     * Creates an AddWardCommand to add the specified {@code Ward}","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"     * @param ward The ward member to be created.","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    public AddWardCommand(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        toAdd \u003d ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-24"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        if (model.hasWard(toAdd)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_WARD);","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        model.addWard(toAdd);","lastModifiedDate":"2023-03-24"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof AddWardCommand // instanceof handles nulls","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 toAdd.equals(((AddWardCommand) other).toAdd));","lastModifiedDate":"2023-03-24"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"pzhengze":55}},{"path":"src/main/java/seedu/patientist/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":" * Clears the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Patientist has been cleared!\";","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        model.setPatientist(new Patientist());","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":6,"-":17}},{"path":"src/main/java/seedu/patientist/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":3,"-":17}},{"path":"src/main/java/seedu/patientist/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"    private final int showDetails;","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    private final boolean showWards;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    public CommandResult(String feedbackToUser, int showDetails, boolean showWards, boolean showHelp, boolean exit) {","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"        this.showDetails \u003d showDetails;","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        this.showWards \u003d showWards;","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        this(feedbackToUser, -1, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"    public boolean isShowDetails() {","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        return showDetails \u003e\u003d 0;","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"    public boolean isShowWards() {","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        return showWards;","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"    public int getShowDetailsIndex() {","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"jinnieshin"},"content":"        return showDetails;","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"jinnieshin"},"content":"                \u0026\u0026 showDetails \u003d\u003d otherCommandResult.showDetails","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"jinnieshin"},"content":"        return Objects.hash(feedbackToUser, showDetails, showHelp, exit);","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":1,"-":67,"pzhengze":13,"jinnieshin":9}},{"path":"src/main/java/seedu/patientist/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":" * Deletes a person identified using it\u0027s displayed index from the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d (Patientist) model.getPatientist();","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        patientist.removePerson(personToDelete);","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":7,"-":45,"pzhengze":3}},{"path":"src/main/java/seedu/patientist/logic/commands/DeletePatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.DummyPatient;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":" * Deletes a patient using their unique id number.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeletePatientCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String COMMAND_WORD \u003d \"delpat\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"            + \": Deletes the patient identified by their id number.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Parameters: id/ID_NUMBER\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_ID + \"A612877Z\";","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_DELETE_PATIENT_ID_SUCCESS \u003d \"Deleted Patient with id: %1$s\";","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_PATIENT_ID_NOT_FOUND \u003d \"Patient with id: %1$s not found\";","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"    private final IdNumber idNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"     * Creates a DeletePatientCommand to remove the {@code Patient} based on their {@code IdNumber}.","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param idNumber The id number of the staff member.","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"    public DeletePatientCommand(IdNumber idNumber) {","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        this.idNumber \u003d idNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e wardNames \u003d model.getWardNames();","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        Patient patientToMatch \u003d new DummyPatient(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"        for (String wardName : wardNames) {","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"            Ward ward \u003d model.getWard(wardName);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"            if (ward.containsPatient(patientToMatch)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"                ward.deletePatientById(patientToMatch);","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_ID_SUCCESS, idNumber));","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        throw new CommandException(String.format(MESSAGE_PATIENT_ID_NOT_FOUND, idNumber));","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this // short circuit if same instance","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof DeletePatientCommand)","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 this.idNumber.equals(((DeletePatientCommand) other).idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":65}},{"path":"src/main/java/seedu/patientist/logic/commands/DeletePatientStatusCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":" * Deletes a status to the patient identified using it\u0027s displayed index from the patientist book.","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"public class DeletePatientStatusCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"delpatstatus\";","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"                                               + \": Deletes a status identified by the index number used in the\"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"                                               + \"DetailsPopup panel to the patient identified by the index number used\"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"                                               + \" in the displayed person list.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"                                               + \"Parameters: \"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"                                               + \"INDEX OF PATIENT (must be a positive integer) \"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"                                               + \"INDEX OF STATUS (must be a positive integer)\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"                                               + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                                               + \"1 \"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"                                               + \"1\";","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_DELETE_STATUS_SUCCESS \u003d \"Deleted Status %1$s from %2$s.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_NOT_PATIENT \u003d \"Person selected is not a Patient.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    private final Index targetStatusIndex;","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"     * Creates an AddPatientStatusCommand to add the specified {@code PatientStatusDeatils} into the target Patient.","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    public DeletePatientStatusCommand(Index targetIndex, Index targetStatusIndex) {","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        this.targetStatusIndex \u003d targetStatusIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        Person personToAdd \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        if (!(personToAdd instanceof Patient)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(MESSAGE_NOT_PATIENT);","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d null;","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"        for (String wardName : model.getWardNames()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"            if (model.getWard(wardName).containsPatient((Patient) personToAdd)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"                ward \u003d model.getWard(wardName);","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(\"Patient not found in Patientist\");","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        Patient patientToAdd \u003d (Patient) personToAdd;","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"        patientToAdd.deletePatientStatusDetails(targetStatusIndex);","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d (Patientist) model.getPatientist();","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"        patientist.removePerson(personToAdd);","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"        model.addPatient(patientToAdd, ward);","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_STATUS_SUCCESS, targetStatusIndex.getOneBased(),","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"                patientToAdd));","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof DeletePatientStatusCommand // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 targetIndex.equals(((DeletePatientStatusCommand) other).targetIndex)","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 targetStatusIndex.equals(((DeletePatientStatusCommand) other).targetStatusIndex)); // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":92}},{"path":"src/main/java/seedu/patientist/logic/commands/DeletePatientToDoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" * Deletes a todo from the patient identified using its displayed index from the patientist book.","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"public class DeletePatientToDoCommand extends Command {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    public static final String COMMAND_WORD \u003d \"delpattodo\";","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"            + \": Deletes a todo identified by the index number used in the\"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"            + \"Details panel to the patient identified by the index number used\"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"            + \" in the displayed person list.\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            + \"INDEX OF PATIENT (must be a positive integer) \"","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"            + \"INDEX OF TODO (must be a positive integer)\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"            + \"1 \"","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            + \"1\";","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_DELETE_TODO_SUCCESS \u003d \"Deleted Todo %1$s from %2$s.\";","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_NOT_PATIENT \u003d \"Person selected is not a Patient.\";","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    private final Index targetToDoIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"     * Creates an AddPatientToDoCommand to add the specified {@code PatientToDo} into the target Patient.","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    public DeletePatientToDoCommand(Index targetIndex, Index targetToDoIndex) {","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        this.targetToDoIndex \u003d targetToDoIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        Person personToAdd \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        if (!(personToAdd instanceof Patient)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"            throw new CommandException(MESSAGE_NOT_PATIENT);","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"        Ward ward \u003d null;","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"        for (String wardName : model.getWardNames()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"            if (model.getWard(wardName).containsPatient((Patient) personToAdd)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"                ward \u003d model.getWard(wardName);","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"            throw new CommandException(\"Patient not found in Patientist\");","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        Patient patientToAdd \u003d (Patient) personToAdd;","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        patientToAdd.deletePatientToDo(targetToDoIndex);","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"        Patientist patientist \u003d (Patientist) model.getPatientist();","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        patientist.removePerson(personToAdd);","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"        model.addPatient(patientToAdd, ward);","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TODO_SUCCESS, targetToDoIndex.getOneBased(),","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"                patientToAdd));","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"                || (other instanceof DeletePatientToDoCommand // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePatientToDoCommand) other).targetIndex)","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 targetToDoIndex.equals(((DeletePatientToDoCommand) other).targetToDoIndex)); // state check","lastModifiedDate":"2023-03-30"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"euph00":92}},{"path":"src/main/java/seedu/patientist/logic/commands/DeleteStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.DummyStaff;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":" * Deletes a staff member using their unique id number.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeleteStaffCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String COMMAND_WORD \u003d \"delstf\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"            + \": Deletes the staff identified by their id number.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Parameters: id/ID_NUMBER\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_ID + \"A123456789B\";","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_DELETE_STAFF_ID_SUCCESS \u003d \"Deleted Staff with id: %1$s\";","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_STAFF_ID_NOT_FOUND \u003d \"Staff with id: %1$s not found\";","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"    private final IdNumber idNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"     * Creates a DeleteStaffCommand to remove the {@code Staff} based on their {@code IdNumber}.","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param idNumber The id number of the staff member.","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"    public DeleteStaffCommand(IdNumber idNumber) {","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        this.idNumber \u003d idNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e wardNames \u003d model.getWardNames();","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff staffToMatch \u003d new DummyStaff(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"        for (String wardName : wardNames) {","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"            Ward ward \u003d model.getWard(wardName);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"            if (ward.containsStaff(staffToMatch)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"                ward.deleteStaffById(staffToMatch);","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_STAFF_ID_SUCCESS, idNumber));","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        throw new CommandException(String.format(MESSAGE_STAFF_ID_NOT_FOUND, idNumber));","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this // short circuit if same instance","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof DeleteStaffCommand)","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 this.idNumber.equals(((DeleteStaffCommand) other).idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":64}},{"path":"src/main/java/seedu/patientist/logic/commands/DeleteWardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":" * Deletes a ward identified using its name.","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"public class DeleteWardCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"delward\";","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"                                               + \": Deletes the ward identified by its name. Ward must be empty.\\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"                                               + \"Parameters: \" + PREFIX_NAME + \"NAME (CASE-SENSITIVE)\\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"                                               + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"                                               + PREFIX_NAME + \"Block A Ward 1\";","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_DUPLICATE_WARD \u003d \"This ward doesn\u0027t exists in the patientist book\";","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_NON_EMPTY_WARD \u003d \"This ward is not empty\";","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_DELETE_WARD_SUCCESS \u003d \"Deleted Ward: %1$s\";","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    private final String targetString;","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    public DeleteWardCommand(String targetString) {","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        this.targetString \u003d targetString;","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        Ward wardToDelete \u003d model.getWard(targetString);","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        if (wardToDelete \u003d\u003d null) {","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_WARD);","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        if (!wardToDelete.isEmpty()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(MESSAGE_NON_EMPTY_WARD);","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        model.deleteWard(wardToDelete);","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_WARD_SUCCESS, wardToDelete));","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof DeleteWardCommand // instanceof handles nulls","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 targetString.equals(((DeleteWardCommand) other).targetString)); // state check","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"pzhengze":58}},{"path":"src/main/java/seedu/patientist/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.CollectionUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":" * Edits the details of an existing person in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"            + \"ID cannot be changed.\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the patientist book.\";","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"        Person editedPerson;","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"        if (personToEdit instanceof Patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"            editedPerson \u003d createEditedPatient((Patient) personToEdit, editPersonDescriptor);","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"        } else if (personToEdit instanceof Staff) {","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"            editedPerson \u003d createEditedStaff((Staff) personToEdit, editPersonDescriptor);","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(\"Person that is being edited is neither a patient or a staff\");","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"        if (editedPerson instanceof Patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"            model.setPatient((Patient) personToEdit, (Patient) editedPerson);","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        } else if (editedPerson instanceof Staff) {","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"            model.setStaff((Staff) personToEdit, (Staff) editedPerson);","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"     * Creates and returns a {@code Person} with the details of {@code patientToEdit}","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"    private static Person createEditedPatient(Patient patientToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(patientToEdit.getName());","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(patientToEdit.getPhone());","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(patientToEdit.getEmail());","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(patientToEdit.getAddress());","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(patientToEdit.getTags());","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":116,"author":{"gitId":"pzhengze"},"content":"        return new Patient(patientToEdit.getIdNumber(), updatedName, updatedPhone, updatedEmail, updatedAddress,","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"jinnieshin"},"content":"                patientToEdit.getPriority(), patientToEdit.getPatientStatusDetails(),","lastModifiedDate":"2023-03-31"},{"lineNumber":118,"author":{"gitId":"jinnieshin"},"content":"                patientToEdit.getPatientToDoList(), updatedTags);","lastModifiedDate":"2023-03-31"},{"lineNumber":119,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"pzhengze"},"content":"     * Creates and returns a {@code Person} with the details of {@code patientToEdit}","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"    private static Person createEditedStaff(Staff staffToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"pzhengze"},"content":"        assert staffToEdit !\u003d null;","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"pzhengze"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(staffToEdit.getName());","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"pzhengze"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(staffToEdit.getPhone());","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"pzhengze"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(staffToEdit.getEmail());","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"pzhengze"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(staffToEdit.getAddress());","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"pzhengze"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(staffToEdit.getTags());","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"pzhengze"},"content":"        return new Staff(updatedName, updatedPhone, updatedEmail, staffToEdit.getIdNumber(), updatedAddress,","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"pzhengze"},"content":"                updatedTags);","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":221,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":222,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":223,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":229,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":231,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":232,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"euph00":20,"-":199,"pzhengze":38,"jinnieshin":2}},{"path":"src/main/java/seedu/patientist/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Patientist as requested ...\";","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, -1, false, false, true);","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"euph00":3,"-":15,"pzhengze":1}},{"path":"src/main/java/seedu/patientist/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":" * Finds and lists all persons in patientist book whose name contains any of the argument keywords.","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"euph00":5,"-":37}},{"path":"src/main/java/seedu/patientist/logic/commands/FindPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.PatientIdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":" * Parses input arguments and creates a new FindPatientCommand object","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"public class FindPatientCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"findpat\";","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose id contain any of \"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Keywords must be either name or id number.\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"[\" + PREFIX_ID + \"ID_NUMBER] \\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"            + PREFIX_ID + \"A12345B\";","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    private final PatientIdContainsKeywordsPredicate patientIdPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"    private final PatientNameContainsKeywordsPredicate patientNamePredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"     * Constructor for FindPatientCommand with NameContainsKeywordsPredicate.","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param namePredicate The name keywords to check for.","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"    public FindPatientCommand(PatientNameContainsKeywordsPredicate namePredicate) {","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        this.patientNamePredicate \u003d namePredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        this.patientIdPredicate \u003d null;","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"     * Constructor for FindPatientCommand with PidContainsKeywordsPredicate.","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param idPredicate The id keywords to check for.","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"    public FindPatientCommand(PatientIdContainsKeywordsPredicate idPredicate) {","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        this.patientIdPredicate \u003d idPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        this.patientNamePredicate \u003d null;","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        model.updateFilteredPersonList(patientIdPredicate \u003d\u003d null ? patientNamePredicate : patientIdPredicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof FindPatientCommand // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"                   \u0026\u0026 Objects.equals(patientNamePredicate, ((FindPatientCommand) other).patientNamePredicate)","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"                   \u0026\u0026 Objects.equals(patientIdPredicate, ((FindPatientCommand) other).patientIdPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"lukkesreysandeur":19,"pzhengze":46}},{"path":"src/main/java/seedu/patientist/logic/commands/FindStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.StaffIdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.StaffNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":" * Parses input arguments and creates a new FindPatientCommand object","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"public class FindStaffCommand extends Command {","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String COMMAND_WORD \u003d \"findstf\";","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all staff members whose id contain any of \"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Keywords must be either name or id.\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"[\" + PREFIX_ID + \"ID_NUMBER] \\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"            + PREFIX_ID + \"A71265H\";","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    private final StaffIdContainsKeywordsPredicate staffIdPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"    private final StaffNameContainsKeywordsPredicate staffNamePredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"     * Constructor for FindStaffCommand with {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param namePredicate The name keywords to check for.","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"    public FindStaffCommand(StaffNameContainsKeywordsPredicate namePredicate) {","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        this.staffNamePredicate \u003d namePredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        this.staffIdPredicate \u003d null;","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"     * Constructor for FindStaffCommand with {@code IdContainsKeywordsPredicate}.","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param idPredicate The id keywords to check for.","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"    public FindStaffCommand(StaffIdContainsKeywordsPredicate idPredicate) {","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        this.staffIdPredicate \u003d idPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        this.staffNamePredicate \u003d null;","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        model.updateFilteredPersonList(staffIdPredicate \u003d\u003d null ? staffNamePredicate : staffIdPredicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof FindStaffCommand // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 Objects.equals(staffNamePredicate, ((FindStaffCommand) other).staffNamePredicate)// state check","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 Objects.equals(staffIdPredicate, ((FindStaffCommand) other).staffIdPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":65}},{"path":"src/main/java/seedu/patientist/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, -1, false, true, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":2,"-":18,"pzhengze":1}},{"path":"src/main/java/seedu/patientist/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":" * Lists all persons in the patientist book to the user.","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":4,"-":20}},{"path":"src/main/java/seedu/patientist/logic/commands/ListPatientsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.IsPatientPredicate;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":" * Lists all patients in the patientist book to the user.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"public class ListPatientsCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"lspat\";","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all patients\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"        model.updateFilteredPersonList(new IsPatientPredicate());","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"        return other instanceof ListPatientsCommand; // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"pzhengze":29}},{"path":"src/main/java/seedu/patientist/logic/commands/ListStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.IsStaffPredicate;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":" * Lists all staff members in the patientist book to the user.","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"public class ListStaffCommand extends Command {","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String COMMAND_WORD \u003d \"lsstf\";","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all staff members\";","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"        model.updateFilteredPersonList(new IsStaffPredicate());","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        return other instanceof ListStaffCommand; // instanceof handles nulls","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"lukkesreysandeur":29}},{"path":"src/main/java/seedu/patientist/logic/commands/ListWardPatientsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.patient.PatientInWardPredicate;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":" * Returns all the people that are tag to a particular ward","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"public class ListWardPatientsCommand extends Command {","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String COMMAND_WORD \u003d \"lswardpat\";","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose wards matches any of \"","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"            + \"Keywords must be alphanumeric.\\n\"","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"            + \"Parameters: KEYWORD WARD_NAME\\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"            + \"Example: \" + COMMAND_WORD + \" Block 1 Ward A\";","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_WARD_NOT_FOUND \u003d \"Ward [%1$s] not found.\";","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    private final String keyword;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    public ListWardPatientsCommand(String keyword) {","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"GlennOngJunJie"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        if (!model.hasWard(new Ward(keyword))) {","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(String.format(MESSAGE_WARD_NOT_FOUND, keyword));","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        PatientInWardPredicate predicate \u003d new PatientInWardPredicate(model, keyword);","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof ListWardPatientsCommand // instanceof handles nulls","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 keyword.equals(((ListWardPatientsCommand) other).keyword));","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"GlennOngJunJie":25,"pzhengze":27}},{"path":"src/main/java/seedu/patientist/logic/commands/ListWardStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.staff.StaffInWardPredicate;","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"/**","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":" * Returns all the staffs that are tag to a particular ward","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":" */","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"public class ListWardStaffCommand extends Command {","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String COMMAND_WORD \u003d \"lswardstf\";","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all staff whose wards matches any of \"","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"Keywords must be alphanumeric.\\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"Parameters: KEYWORD WARD_NAME\\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"Example: \" + COMMAND_WORD + \" Block 1 Ward A\";","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String MESSAGE_WARD_NOT_FOUND \u003d \"Ward [%1$s] not found.\";","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"    private final String keyword;","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"    public ListWardStaffCommand(String keyword) {","lastModifiedDate":"2023-03-31"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-03-31"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":32,"author":{"gitId":"GlennOngJunJie"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-31"},{"lineNumber":33,"author":{"gitId":"GlennOngJunJie"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-31"},{"lineNumber":34,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":35,"author":{"gitId":"GlennOngJunJie"},"content":"        if (!model.hasWard(new Ward(keyword))) {","lastModifiedDate":"2023-03-31"},{"lineNumber":36,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new CommandException(String.format(MESSAGE_WARD_NOT_FOUND, keyword));","lastModifiedDate":"2023-03-31"},{"lineNumber":37,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":38,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"GlennOngJunJie"},"content":"        StaffInWardPredicate predicate \u003d new StaffInWardPredicate(model, keyword);","lastModifiedDate":"2023-03-31"},{"lineNumber":40,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":47,"author":{"gitId":"GlennOngJunJie"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-31"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-31"},{"lineNumber":49,"author":{"gitId":"GlennOngJunJie"},"content":"                || (other instanceof ListWardStaffCommand // instanceof handles nulls","lastModifiedDate":"2023-03-31"},{"lineNumber":50,"author":{"gitId":"GlennOngJunJie"},"content":"                \u0026\u0026 keyword.equals(((ListWardStaffCommand) other).keyword));","lastModifiedDate":"2023-03-31"},{"lineNumber":51,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"GlennOngJunJie":52}},{"path":"src/main/java/seedu/patientist/logic/commands/ListWardsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":" * Lists all wards in the patientist book to the user.","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"public class ListWardsCommand extends Command {","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"    public static final String COMMAND_WORD \u003d \"lsward\";","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all wards\";","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_WARDS_LISTED_OVERVIEW \u003d \"%1$d wards listed!\";","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"                String.format(MESSAGE_WARDS_LISTED_OVERVIEW, model.getPatientist().getWardList().size()),","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"                -1, true, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"        return other instanceof ListPatientsCommand; // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"pzhengze":29}},{"path":"src/main/java/seedu/patientist/logic/commands/UpdatePatientWardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":" * Update Patient\u0027s ward identified using it\u0027s displayed index from the patientist book.","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"public class UpdatePatientWardCommand extends Command {","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String COMMAND_WORD \u003d \"trfward\";","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Moves the patient.\"","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"Index \" + PREFIX_WARD + \"WARD \"","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"            + \"2 \" + PREFIX_WARD + \"Block C Ward 1\";","lastModifiedDate":"2023-03-31"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Patient %1$s has been transferred from ward %2$s to ward %3$s\";","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String MESSAGE_WARD_NOT_FOUND \u003d \"Ward not found: %1$s\";","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"GlennOngJunJie"},"content":"    public static final String MESSAGE_WARD_INCORRECT \u003d \"Ward of patient is incorrect\";","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"GlennOngJunJie"},"content":"    private final String nextWard;","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"GlennOngJunJie"},"content":"    private final Index patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"GlennOngJunJie"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"GlennOngJunJie"},"content":"     * Creates an UpdatePatientWardCommand to change specified {@code Index} ward {@code ogWard} to","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"GlennOngJunJie"},"content":"     * {@code nextWard}.","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"GlennOngJunJie"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"    public UpdatePatientWardCommand(Index patient, String nextWard) {","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"        requireNonNull(nextWard);","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"        this.nextWard \u003d nextWard;","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"GlennOngJunJie"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"GlennOngJunJie"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"GlennOngJunJie"},"content":"        if (!model.hasWard(new Ward(nextWard))) {","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new CommandException(String.format(MESSAGE_WARD_NOT_FOUND, nextWard));","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"GlennOngJunJie"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"GlennOngJunJie"},"content":"        if (patient.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"GlennOngJunJie"},"content":"        Patient personToBeUpdated \u003d (Patient) lastShownList.get(patient.getZeroBased());","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"GlennOngJunJie"},"content":"        Ward ward \u003d null;","lastModifiedDate":"2023-03-31"},{"lineNumber":63,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":64,"author":{"gitId":"GlennOngJunJie"},"content":"        for (String wardName : model.getWardNames()) {","lastModifiedDate":"2023-03-31"},{"lineNumber":65,"author":{"gitId":"GlennOngJunJie"},"content":"            if (model.getWard(wardName).containsPatient(personToBeUpdated)) {","lastModifiedDate":"2023-03-31"},{"lineNumber":66,"author":{"gitId":"GlennOngJunJie"},"content":"                ward \u003d model.getWard(wardName);","lastModifiedDate":"2023-03-31"},{"lineNumber":67,"author":{"gitId":"GlennOngJunJie"},"content":"                break;","lastModifiedDate":"2023-03-31"},{"lineNumber":68,"author":{"gitId":"GlennOngJunJie"},"content":"            }","lastModifiedDate":"2023-03-31"},{"lineNumber":69,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":70,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":71,"author":{"gitId":"GlennOngJunJie"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-31"},{"lineNumber":72,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new CommandException(\"Patient not found in Patientist\");","lastModifiedDate":"2023-03-31"},{"lineNumber":73,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":74,"author":{"gitId":"GlennOngJunJie"},"content":"        Patientist patientist \u003d (Patientist) model.getPatientist();","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"GlennOngJunJie"},"content":"        try {","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"GlennOngJunJie"},"content":"            patientist.transferPatient(personToBeUpdated, ward, model.getWard(nextWard));","lastModifiedDate":"2023-03-31"},{"lineNumber":77,"author":{"gitId":"GlennOngJunJie"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new CommandException(MESSAGE_WARD_INCORRECT);","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"GlennOngJunJie"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, patient.getOneBased(), ward, nextWard));","lastModifiedDate":"2023-03-31"},{"lineNumber":81,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"GlennOngJunJie"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"GlennOngJunJie"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"GlennOngJunJie"},"content":"                || (other instanceof UpdatePatientWardCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"GlennOngJunJie"},"content":"                \u0026\u0026 patient.equals(((UpdatePatientWardCommand) other).patient)","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"GlennOngJunJie"},"content":"                \u0026\u0026 nextWard.equals(((UpdatePatientWardCommand) other).nextWard)); // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"GlennOngJunJie":90}},{"path":"src/main/java/seedu/patientist/logic/commands/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":" * Shows details of persons in patientist whose names contain any of the argument keywords.","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"public class ViewCommand extends Command {","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"            + \": Shows details the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_VIEW_PERSON_SUCCESS \u003d \"Viewed Person: %1$s\";","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    public ViewCommand(Index targetIndex) {","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"                String.format(MESSAGE_VIEW_PERSON_SUCCESS, lastShownList.get(targetIndex.getZeroBased())),","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"                targetIndex.getZeroBased(), false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"pzhengze":24,"jinnieshin":29}},{"path":"src/main/java/seedu/patientist/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands.exceptions;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"euph00":1,"-":16}},{"path":"src/main/java/seedu/patientist/logic/parser/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TODO;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.model.tag.PriorityTag;","lastModifiedDate":"2023-03-31"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"    public AddPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID, PREFIX_WARD, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"                        PREFIX_ADDRESS, PREFIX_PRIORITY, PREFIX_STATUS, PREFIX_TAG);","lastModifiedDate":"2023-03-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_WARD, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"                PREFIX_ADDRESS, PREFIX_PRIORITY) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d ParserUtil.parseWard(argMultimap.getValue(PREFIX_WARD).get());","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-03-31"},{"lineNumber":62,"author":{"gitId":"jinnieshin"},"content":"            PriorityTag priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());","lastModifiedDate":"2023-03-31"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"            ArrayList\u003cPatientStatusDetails\u003e details \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"                    new ArrayList\u003c\u003e(ParserUtil.parseDetails(argMultimap.getAllValues(PREFIX_STATUS)));","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"            ArrayList\u003cPatientToDo\u003e toDos \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"                    new ArrayList\u003c\u003e(ParserUtil.parseToDos(argMultimap.getAllValues(PREFIX_TODO)));","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"jinnieshin"},"content":"            Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(List.of(new Tag(\"Patient\"), priority));","lastModifiedDate":"2023-03-31"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"            tagList.addAll(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG)));","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"jinnieshin"},"content":"            Patient patient \u003d new Patient(idNumber, name, phone, email, address, priority, details, toDos, tagList);","lastModifiedDate":"2023-03-31"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"            return new AddPatientCommand(ward.getWardName(), patient);","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-03-31"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2023-03-31"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"lukkesreysandeur":3,"euph00":16,"-":34,"pzhengze":24,"jinnieshin":7}},{"path":"src/main/java/seedu/patientist/logic/parser/AddPatientStatusCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientStatusCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":" * Parses input arguments and creates a new AddPatientStatusCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"public class AddPatientStatusCommandParser implements Parser\u003cAddPatientStatusCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientStatusCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"     * and returns an AddPatientStatusCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    public AddPatientStatusCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STATUS);","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_STATUS) || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                    AddPatientStatusCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        Index index;","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"                    AddPatientStatusCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        ArrayList\u003cPatientStatusDetails\u003e details \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"                new ArrayList\u003c\u003e(ParserUtil.parseDetails(argMultimap.getAllValues(PREFIX_STATUS)));","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        return new AddPatientStatusCommand(index, details);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":55}},{"path":"src/main/java/seedu/patientist/logic/parser/AddPatientToDoCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TODO;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.AddPatientToDoCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":" * Parses input arguments and creates a new AddPatientToDo object","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"public class AddPatientToDoCommandParser implements Parser\u003cAddPatientToDoCommand\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientToDoCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"     * and returns an AddPatientToDoCommand object for execution.","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    public AddPatientToDoCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TODO);","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TODO) || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"                    AddPatientToDoCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        Index index;","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"                    AddPatientToDoCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"        ArrayList\u003cPatientToDo\u003e toDos \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"                new ArrayList\u003c\u003e(ParserUtil.parseToDos(argMultimap.getAllValues(PREFIX_TODO)));","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        return new AddPatientToDoCommand(index, toDos);","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"euph00":55}},{"path":"src/main/java/seedu/patientist/logic/parser/AddStaffCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.AddStaffCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":" * Parses input arguments and creates a new AddStaffCommand object","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"public class AddStaffCommandParser implements Parser\u003cAddStaffCommand\u003e {","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"     * Parses the given {@code String} of arguments in the context of the AddStaffCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    public AddStaffCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ID,","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_WARD);","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ID, PREFIX_ADDRESS,","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"                PREFIX_WARD) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Staff\")));","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        tagList.addAll(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG)));","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        Ward ward \u003d ParserUtil.parseWard(argMultimap.getValue(PREFIX_WARD).get());","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff staff \u003d new Staff(name, phone, email, id, address, tagList);","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        return new AddStaffCommand(ward.getWardName(), staff);","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"lukkesreysandeur":68}},{"path":"src/main/java/seedu/patientist/logic/parser/AddWardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddWardCommand;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":" * Parses input arguments and creates a new AddWardCommand object","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"public class AddWardCommandParser implements Parser\u003cAddWardCommand\u003e {","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"     * Parses the given {@code String} of arguments in the context of the AddWardCommand and returns an AddCommand","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"     * object for execution.","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    public AddWardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d ParserUtil.parseWard(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        return new AddWardCommand(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-24"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-24"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"pzhengze":42}},{"path":"src/main/java/seedu/patientist/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"euph00":1,"-":59}},{"path":"src/main/java/seedu/patientist/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"euph00":1,"-":147}},{"path":"src/main/java/seedu/patientist/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final Prefix PREFIX_ID \u003d new Prefix(\"id/\");","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pr/\");","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    public static final Prefix PREFIX_WARD \u003d new Prefix(\"w/\");","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    public static final Prefix PREFIX_TODO \u003d new Prefix(\"td/\");","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"lukkesreysandeur":1,"euph00":2,"-":13,"pzhengze":2,"jinnieshin":1}},{"path":"src/main/java/seedu/patientist/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"euph00":5,"-":24}},{"path":"src/main/java/seedu/patientist/logic/parser/DeletePatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.DeletePatientCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":" * Parses input arguments and creates a new DeletePatientCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeletePatientCommandParser implements Parser\u003cDeletePatientCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePatientCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"     * and returns a DeletePatientCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    public DeletePatientCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_ID);","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!argMultimap.getValue(PREFIX_ID).isPresent()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"            IdNumber idNumber \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"            return new DeletePatientCommand(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":36}},{"path":"src/main/java/seedu/patientist/logic/parser/DeletePatientStatusCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.DeletePatientStatusCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":" * Parses input arguments and creates a new DeletePatientStatusCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"public class DeletePatientStatusCommandParser implements Parser\u003cDeletePatientStatusCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePatientStatusCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"     * and returns an DeletePatientStatusCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    public DeletePatientStatusCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        Index indexPerson;","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"        Index indexStatus;","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"            String[] indexes \u003d argMultimap.getPreamble().strip().split(\"\\\\s+\");","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"            if (indexes.length !\u003d 2) {","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                        DeletePatientStatusCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"            indexPerson \u003d ParserUtil.parseIndex(indexes[0]);","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"            indexStatus \u003d ParserUtil.parseIndex(indexes[1]);","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"                    DeletePatientStatusCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        return new DeletePatientStatusCommand(indexPerson, indexStatus);","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":43}},{"path":"src/main/java/seedu/patientist/logic/parser/DeletePatientToDoCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.DeletePatientToDoCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":" * Parses input arguments and creates a new DeletePatientToDoCommand object","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"public class DeletePatientToDoCommandParser implements Parser\u003cDeletePatientToDoCommand\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePatientToDoCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"     * and returns an DeletePatientToDoCommand object for execution.","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    public DeletePatientToDoCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"        Index indexPerson;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"        Index indexToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            String[] indexes \u003d argMultimap.getPreamble().strip().split(\"\\\\s+\");","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"            if (indexes.length !\u003d 2) {","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"                        DeletePatientToDoCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"            indexPerson \u003d ParserUtil.parseIndex(indexes[0]);","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"            indexToDo \u003d ParserUtil.parseIndex(indexes[1]);","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"                    DeletePatientToDoCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        return new DeletePatientToDoCommand(indexPerson, indexToDo);","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"euph00":43}},{"path":"src/main/java/seedu/patientist/logic/parser/DeleteStaffCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.DeleteStaffCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":" * Parses input arguments and creates a new DeleteStaffCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeleteStaffCommandParser implements Parser\u003cDeleteStaffCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteStaffCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"     * and returns a DeleteStaffCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    public DeleteStaffCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_ID);","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!argMultimap.getValue(PREFIX_ID).isPresent()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"            IdNumber idNumber \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"            return new DeleteStaffCommand(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":36}},{"path":"src/main/java/seedu/patientist/logic/parser/DeleteWardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddWardCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.DeleteWardCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":" * Parses input arguments and creates a new DeleteWardCommand object","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"public class DeleteWardCommandParser implements Parser\u003cDeleteWardCommand\u003e {","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"     * Parses the given {@code String} of arguments in the context of the AddWardCommand and returns an AddWardCommand","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"     * object for execution.","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    public DeleteWardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d ParserUtil.parseWard(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        return new DeleteWardCommand(ward.getWardName());","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"pzhengze":43}},{"path":"src/main/java/seedu/patientist/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"euph00":12,"-":70}},{"path":"src/main/java/seedu/patientist/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.FindCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"euph00":5,"-":28}},{"path":"src/main/java/seedu/patientist/logic/parser/FindPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.FindPatientCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.PatientIdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":" * Parses input arguments and creates a new FindPatientCommand object","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"public class FindPatientCommandParser implements Parser\u003cFindPatientCommand\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPatientCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"     * and returns a FindPatientCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    public FindPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID);","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!areAnyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID) || !argMultimap.getPreamble().isEmpty()","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"                || areBothPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        Optional\u003cString\u003e name \u003d argMultimap.getValue(PREFIX_NAME);","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        Optional\u003cString\u003e idNumber \u003d argMultimap.getValue(PREFIX_ID);","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        if (idNumber.isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"            String[] nameKeywords \u003d name.get().trim().split(\"\\\\s+\");","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"            return new FindPatientCommand(new PatientNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        } else {","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"            String[] pidKeywords \u003d idNumber.get().trim().split(\"\\\\s+\");","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"            return new FindPatientCommand(new PatientIdContainsKeywordsPredicate(Arrays.asList(pidKeywords)));","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"    private static boolean areBothPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"lukkesreysandeur":9,"pzhengze":52}},{"path":"src/main/java/seedu/patientist/logic/parser/FindStaffCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.FindStaffCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.StaffIdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.StaffNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":" * Parses input arguments and creates a new FindStaffCommand object","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"public class FindStaffCommandParser implements Parser\u003cFindStaffCommand\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPatientCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"     * and returns a FindStaffCommand object for execution.","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    public FindStaffCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID);","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!areAnyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID) || !argMultimap.getPreamble().isEmpty()","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"                || areBothPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        Optional\u003cString\u003e name \u003d argMultimap.getValue(PREFIX_NAME);","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        Optional\u003cString\u003e idNumber \u003d argMultimap.getValue(PREFIX_ID);","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        if (idNumber.isEmpty()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"            String[] nameKeywords \u003d name.get().trim().split(\"\\\\s+\");","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"            return new FindStaffCommand(new StaffNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        } else {","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"            String[] pidKeywords \u003d idNumber.get().trim().split(\"\\\\s+\");","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"            return new FindStaffCommand(new StaffIdContainsKeywordsPredicate(Arrays.asList(pidKeywords)));","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"    private static boolean areBothPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":61}},{"path":"src/main/java/seedu/patientist/logic/parser/ListWardPatientsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.ListWardPatientsCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":" * Finds and lists all patients in patientist book whose ward contains any of the argument keywords.","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"public class ListWardPatientsCommandParser implements Parser\u003cListWardPatientsCommand\u003e {","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    public ListWardPatientsCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"        if (trimmedArgs.isEmpty() || !Ward.isValidWardName(trimmedArgs)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListWardPatientsCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        return new ListWardPatientsCommand(trimmedArgs);","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"pzhengze":28}},{"path":"src/main/java/seedu/patientist/logic/parser/ListWardStaffCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.ListWardStaffCommand;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"/**","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":" * Finds and lists all staff in patientist book whose ward contains any of the argument keywords.","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":" */","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"public class ListWardStaffCommandParser implements Parser\u003cListWardStaffCommand\u003e {","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"    public ListWardStaffCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"        if (trimmedArgs.isEmpty() || !Ward.isValidWardName(trimmedArgs)) {","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListWardStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"        return new ListWardStaffCommand(trimmedArgs);","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"GlennOngJunJie":28}},{"path":"src/main/java/seedu/patientist/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.Command;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"euph00":3,"-":13}},{"path":"src/main/java/seedu/patientist/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.StringUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.model.tag.PriorityTag;","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"     * Parses a {@code String id} into a {@code PatientIdNumber}.","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param id The string to be converted.","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"     * @return PatientIdNumber.","lastModifiedDate":"2023-03-12"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException id the given {@code pid} is invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"    public static IdNumber parseId(String id) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(id);","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        String trimmedPid \u003d id.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!IdNumber.isValidPid(trimmedPid)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new ParseException(IdNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"        return new IdNumber(trimmedPid);","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"     * Parses a {@code String patientist} into an {@code Address}.","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"     * @throws ParseException if the given {@code patientist} is invalid.","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"     * Parses a {@code String status} into a {@code PatientStatusDetails}.","lastModifiedDate":"2023-03-12"},{"lineNumber":124,"author":{"gitId":"pzhengze"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-12"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":126,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the given {@code status} is invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":127,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":128,"author":{"gitId":"pzhengze"},"content":"    public static PatientStatusDetails parseDetail(String status) {","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-03-12"},{"lineNumber":130,"author":{"gitId":"pzhengze"},"content":"        String trimmedStatus \u003d status.trim();","lastModifiedDate":"2023-03-12"},{"lineNumber":131,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":132,"author":{"gitId":"pzhengze"},"content":"        return new PatientStatusDetails(trimmedStatus);","lastModifiedDate":"2023-03-12"},{"lineNumber":133,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":134,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"     * Parses a {@code String todo} into a {@code PatientToDo}.","lastModifiedDate":"2023-03-30"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-30"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"     * @throws ParseException if the given {@code status} is invalid.","lastModifiedDate":"2023-03-30"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"    public static PatientToDo parseToDo(String toDo) {","lastModifiedDate":"2023-03-30"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"        requireNonNull(toDo);","lastModifiedDate":"2023-03-30"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"        String trimmedToDo \u003d toDo.trim();","lastModifiedDate":"2023-03-30"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"        return new PatientToDo(trimmedToDo);","lastModifiedDate":"2023-03-30"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":148,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":149,"author":{"gitId":"jinnieshin"},"content":"     * Parses a {@code String severity} into a {@code SeverityTag}.","lastModifiedDate":"2023-03-31"},{"lineNumber":150,"author":{"gitId":"jinnieshin"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-31"},{"lineNumber":151,"author":{"gitId":"jinnieshin"},"content":"     *","lastModifiedDate":"2023-03-31"},{"lineNumber":152,"author":{"gitId":"jinnieshin"},"content":"     * @throws ParseException if the given {@code status} is invalid.","lastModifiedDate":"2023-03-31"},{"lineNumber":153,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":154,"author":{"gitId":"jinnieshin"},"content":"    public static PriorityTag parsePriority(String priority) {","lastModifiedDate":"2023-03-31"},{"lineNumber":155,"author":{"gitId":"jinnieshin"},"content":"        requireNonNull(priority);","lastModifiedDate":"2023-03-31"},{"lineNumber":156,"author":{"gitId":"jinnieshin"},"content":"        String trimmedPriority \u003d priority.trim();","lastModifiedDate":"2023-03-31"},{"lineNumber":157,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":158,"author":{"gitId":"jinnieshin"},"content":"        return new PriorityTag(trimmedPriority);","lastModifiedDate":"2023-03-31"},{"lineNumber":159,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":160,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":161,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":162,"author":{"gitId":"pzhengze"},"content":"     * Parses {@code Collection\u003cString\u003e details} into a {@code List\u003cPatientStatusDetail\u003e}.","lastModifiedDate":"2023-03-29"},{"lineNumber":163,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":164,"author":{"gitId":"pzhengze"},"content":"    public static List\u003cPatientStatusDetails\u003e parseDetails(Collection\u003cString\u003e details) {","lastModifiedDate":"2023-03-29"},{"lineNumber":165,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(details);","lastModifiedDate":"2023-03-29"},{"lineNumber":166,"author":{"gitId":"pzhengze"},"content":"        final List\u003cPatientStatusDetails\u003e detailsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-29"},{"lineNumber":167,"author":{"gitId":"pzhengze"},"content":"        for (String detail : details) {","lastModifiedDate":"2023-03-29"},{"lineNumber":168,"author":{"gitId":"pzhengze"},"content":"            detailsList.add(parseDetail(detail));","lastModifiedDate":"2023-03-29"},{"lineNumber":169,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":170,"author":{"gitId":"pzhengze"},"content":"        return detailsList;","lastModifiedDate":"2023-03-29"},{"lineNumber":171,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":172,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"     * Parses {@code Collection\u003cString\u003e todo} into a {@code List\u003cPatientToDo\u003e}.","lastModifiedDate":"2023-03-30"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":176,"author":{"gitId":"euph00"},"content":"    public static List\u003cPatientToDo\u003e parseToDos(Collection\u003cString\u003e toDos) {","lastModifiedDate":"2023-03-30"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"        requireNonNull(toDos);","lastModifiedDate":"2023-03-30"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"        final List\u003cPatientToDo\u003e toDoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-30"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"        for (String toDo : toDos) {","lastModifiedDate":"2023-03-30"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"            toDoList.add(parseToDo(toDo));","lastModifiedDate":"2023-03-30"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"        return toDoList;","lastModifiedDate":"2023-03-30"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":211,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":212,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":213,"author":{"gitId":"pzhengze"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2023-03-25"},{"lineNumber":214,"author":{"gitId":"pzhengze"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-25"},{"lineNumber":215,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":216,"author":{"gitId":"pzhengze"},"content":"     * @throws ParseException if the given {@code wardName} is invalid.","lastModifiedDate":"2023-03-25"},{"lineNumber":217,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":218,"author":{"gitId":"pzhengze"},"content":"    public static Ward parseWard(String wardName) throws ParseException {","lastModifiedDate":"2023-03-25"},{"lineNumber":219,"author":{"gitId":"pzhengze"},"content":"        requireNonNull(wardName);","lastModifiedDate":"2023-03-25"},{"lineNumber":220,"author":{"gitId":"pzhengze"},"content":"        String trimmedWard \u003d wardName.trim();","lastModifiedDate":"2023-03-25"},{"lineNumber":221,"author":{"gitId":"pzhengze"},"content":"        if (!Ward.isValidWardName(trimmedWard)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":222,"author":{"gitId":"pzhengze"},"content":"            throw new ParseException(Ward.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-25"},{"lineNumber":223,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":224,"author":{"gitId":"pzhengze"},"content":"        return new Ward(trimmedWard);","lastModifiedDate":"2023-03-25"},{"lineNumber":225,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"lukkesreysandeur":8,"euph00":37,"-":113,"pzhengze":54,"jinnieshin":14}},{"path":"src/main/java/seedu/patientist/logic/parser/PatientistParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientStatusCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.AddPatientToDoCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.AddStaffCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddWardCommand;","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.Command;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.DeletePatientCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.DeletePatientStatusCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.DeletePatientToDoCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.DeleteStaffCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.DeleteWardCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.FindCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.FindPatientCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.FindStaffCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ListCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.ListPatientsCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.ListStaffCommand;","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.ListWardPatientsCommand;","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.ListWardStaffCommand;","lastModifiedDate":"2023-03-31"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ListWardsCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.UpdatePatientWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.logic.commands.ViewCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"public class PatientistParser {","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"        case AddPatientCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"            return new AddPatientCommandParser().parse(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        case AddStaffCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"            return new AddStaffCommandParser().parse(arguments);","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"jinnieshin"},"content":"        case ViewCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"jinnieshin"},"content":"            return new ViewCommandParser().parse(arguments);","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        case ListPatientsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"            return new ListPatientsCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"GlennOngJunJie"},"content":"        case ListWardPatientsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"            return new ListWardPatientsCommandParser().parse(arguments);","lastModifiedDate":"2023-03-20"},{"lineNumber":101,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"GlennOngJunJie"},"content":"        case ListWardStaffCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-31"},{"lineNumber":103,"author":{"gitId":"GlennOngJunJie"},"content":"            return new ListWardStaffCommandParser().parse(arguments);","lastModifiedDate":"2023-03-31"},{"lineNumber":104,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":105,"author":{"gitId":"lukkesreysandeur"},"content":"        case ListStaffCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-17"},{"lineNumber":106,"author":{"gitId":"lukkesreysandeur"},"content":"            return new ListStaffCommand();","lastModifiedDate":"2023-03-17"},{"lineNumber":107,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"        case FindPatientCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"            return new FindPatientCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"lukkesreysandeur"},"content":"        case FindStaffCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":112,"author":{"gitId":"lukkesreysandeur"},"content":"            return new FindStaffCommandParser().parse(arguments);","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"        case AddWardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-24"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"            return new AddWardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-24"},{"lineNumber":116,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":117,"author":{"gitId":"pzhengze"},"content":"        case DeleteWardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"            return new DeleteWardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"GlennOngJunJie"},"content":"        case UpdatePatientWardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":121,"author":{"gitId":"GlennOngJunJie"},"content":"            return new UpdatePatientWardParser().parse(arguments);","lastModifiedDate":"2023-03-30"},{"lineNumber":122,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"        case AddPatientStatusCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"pzhengze"},"content":"            return new AddPatientStatusCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"        case AddPatientToDoCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"            return new AddPatientToDoCommandParser().parse(arguments);","lastModifiedDate":"2023-03-30"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":129,"author":{"gitId":"pzhengze"},"content":"        case DeletePatientStatusCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"pzhengze"},"content":"            return new DeletePatientStatusCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"        case DeletePatientToDoCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"            return new DeletePatientToDoCommandParser().parse(arguments);","lastModifiedDate":"2023-03-30"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":135,"author":{"gitId":"lukkesreysandeur"},"content":"        case DeletePatientCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"lukkesreysandeur"},"content":"            return new DeletePatientCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"lukkesreysandeur"},"content":"        case DeleteStaffCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":139,"author":{"gitId":"lukkesreysandeur"},"content":"            return new DeleteStaffCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"pzhengze"},"content":"        case ListWardsCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":142,"author":{"gitId":"pzhengze"},"content":"            return new ListWardsCommand();","lastModifiedDate":"2023-03-30"},{"lineNumber":143,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lukkesreysandeur":19,"euph00":23,"GlennOngJunJie":12,"-":60,"pzhengze":31,"jinnieshin":4}},{"path":"src/main/java/seedu/patientist/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"euph00":1,"-":38}},{"path":"src/main/java/seedu/patientist/logic/parser/UpdatePatientWardParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.UpdatePatientWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":" * Parses input arguments and creates a new UpdatePatientWardCommand object","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"public class UpdatePatientWardParser implements Parser\u003cUpdatePatientWardCommand\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"    private Index index;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"     * Parses the given {@code String} of arguments in the context of the UpdatePatientWardCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"     * and returns a UpdatePatientWardCommand object for execution.","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"    public UpdatePatientWardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_WARD);","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_WARD) || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"                    UpdatePatientWardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"        try {","lastModifiedDate":"2023-03-31"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble().trim());","lastModifiedDate":"2023-03-31"},{"lineNumber":32,"author":{"gitId":"GlennOngJunJie"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-31"},{"lineNumber":33,"author":{"gitId":"GlennOngJunJie"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-31"},{"lineNumber":34,"author":{"gitId":"GlennOngJunJie"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdatePatientWardCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-31"},{"lineNumber":35,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":37,"author":{"gitId":"GlennOngJunJie"},"content":"        Ward ward \u003d ParserUtil.parseWard(argMultimap.getValue(PREFIX_WARD).get());","lastModifiedDate":"2023-03-31"},{"lineNumber":38,"author":{"gitId":"GlennOngJunJie"},"content":"        return new UpdatePatientWardCommand(index, ward.getWardName());","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"GlennOngJunJie":48}},{"path":"src/main/java/seedu/patientist/logic/parser/ViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.logic.commands.ViewCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" * Parses input arguments and creates a new ViewCommand object","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * and returns a ViewCommand object for execution.","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    public ViewCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"        try {","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"            return new ViewCommand(index);","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"pzhengze":6,"jinnieshin":23}},{"path":"src/main/java/seedu/patientist/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser.exceptions;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"euph00":2,"-":15}},{"path":"src/main/java/seedu/patientist/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"     * Returns the user prefs\u0027 patientist book file path.","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    Path getPatientistFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"     * Sets the user prefs\u0027 patientist book file path.","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    void setPatientistFilePath(Path patientistFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"     * Replaces patientist book data with the data in {@code patientist}.","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"    void setPatientist(ReadOnlyPatientist patientist);","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    /** Returns the Patientist */","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"    ReadOnlyPatientist getPatientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the patientist book (all wards).","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"     * This method makes use of {@code Person::isSamePerson} to check identity","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the given {@code ward}.","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist.","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"     * Patients are uniquely identified by Patient ID, through {@code Patient::isSamePerson}","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"     * Staff are uniquely identified by name, through {@code Staff::isSamePerson}","lastModifiedDate":"2023-03-20"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"    boolean hasPerson(Person person, Ward ward);","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"     * Patients are uniquely identified by ID, through {@code Person::isSamePerson}.","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"    boolean hasPatient(Patient patient, Ward ward);","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"     * Returns true if a staff with the same identity as {@code staff} exists in the ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"     * Staff are uniquely identified by ID, through {@code Person::isSamePerson}.","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"    boolean hasStaff(Staff staff, Ward ward);","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"     * Deletes the given staff from the given ward. Other instances of this staff in other wards are untouched.","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"     * The staff must exist in the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"    void deleteStaff(Staff target, Ward ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"     * Deletes the given patient.","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"     * Ward must exist, and patient must be in the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"    void deletePatient(Patient target, Ward ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"     * Adds the given patient to the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"     * {@code patient} must not already exist in the patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"    void addPatient(Patient patient, Ward ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"     * Adds the given staff to the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"     * {@code person} must not already exist in the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"    void addStaff(Staff staff, Ward ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"     * Replaces target Patient with edited Patient.","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"     * Target patient must exist in ward, edited patient must not already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"    void setPatient(Patient target, Patient edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"     * Replaces target Staff with edited Staff throughout whole Patientist.","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"     * Target Staff must exist in ward, edited Staff must not already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"    void setStaff(Staff target, Staff edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"     * Transfers patient from original ward to target ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"     * Patient must exist in original ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"    void transferPatient(Patient patient, Ward original, Ward target);","lastModifiedDate":"2023-03-20"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"     * Transfers staff from original ward to target ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"     * Staff must exist in original ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"    void transferStaff(Staff staff, Ward original, Ward target);","lastModifiedDate":"2023-03-20"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"     * Returns true if a ward with the same name as {@code ward} exists in the patientist book","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"    boolean hasWard(Ward ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"     * Adds the given ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"     * {@code ward} must not already exist in the patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"     * Wards are uniquely identified by name, through {@code Ward::equals}","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"     * @param ward","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"    void addWard(Ward ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"     * Deletes the given ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"     * The ward must exist in the patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"    void deleteWard(Ward ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"     * Replaces the given ward {@code ward} with {@code editedWard}.","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist in the patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"     * The ward identity of {@code editedWard} must not be the same as another existing ward in the patientist.","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"     * @param target","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"     * @param editedWard","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"    void setWard(Ward target, Ward editedWard);","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"     * Returns {@code List} of ward names in the model.","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"    List\u003cString\u003e getWardNames();","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"     * Returns the Ward object with the associated name in the Patientist, if it exists.","lastModifiedDate":"2023-03-24"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"     * Else, null is returned.","lastModifiedDate":"2023-03-24"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"    Ward getWard(String wardName);","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"euph00":120,"-":61}},{"path":"src/main/java/seedu/patientist/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":" * Represents the in-memory model of the patientist book data.","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    private final Patientist patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"     * Initializes a ModelManager with the given patientist and userPrefs.","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    public ModelManager(ReadOnlyPatientist patientist, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(patientist, userPrefs);","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        logger.fine(\"Initializing with patientist book: \" + patientist + \" and user prefs \" + userPrefs);","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        this.patientist \u003d new Patientist(patientist);","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.patientist.getPersonList());","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        this.patientist.updatePersonList();","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        this(new Patientist(), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"    public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        return userPrefs.getPatientistFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"    public void setPatientistFilePath(Path patientistFilePath) {","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        requireNonNull(patientistFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"        userPrefs.setPatientistFilePath(patientistFilePath);","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patientist \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"    public void setPatientist(ReadOnlyPatientist patientist) {","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"        this.patientist.resetData(patientist);","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"    public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"        return patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"    public boolean hasPerson(Person person) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"        requireNonNull(person);","lastModifiedDate":"2023-03-20"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"        return patientist.hasPerson(person);","lastModifiedDate":"2023-03-20"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"    public boolean hasPerson(Person person, Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(person, ward);","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"        return patientist.hasPerson(person, ward);","lastModifiedDate":"2023-03-20"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"    public boolean hasPatient(Patient patient, Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"        return hasPerson(patient, ward);","lastModifiedDate":"2023-03-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"    public boolean hasStaff(Staff staff, Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"        return hasPerson(staff, ward);","lastModifiedDate":"2023-03-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"    public void deleteStaff(Staff target, Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"        patientist.removeStaff(target, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"    public void deletePatient(Patient target, Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"        patientist.removePatient(target, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"    public void addPatient(Patient patient, Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"        if (hasPerson(patient)) { // global uniqueness check","lastModifiedDate":"2023-03-20"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2023-03-20"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"        patientist.addPatient(patient, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"    public void addStaff(Staff staff, Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"        if (hasPerson(staff)) { // global uniqueness check","lastModifiedDate":"2023-03-20"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2023-03-20"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        patientist.addStaff(staff, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"    public void setPatient(Patient target, Patient edited) { //checked?","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"        patientist.setPatient(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"    public void setStaff(Staff target, Staff edited) { //checked?","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"        patientist.setStaff(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"    public void transferPatient(Patient patient, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"        patientist.transferPatient(patient, original, target);","lastModifiedDate":"2023-03-20"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"    public void transferStaff(Staff staff, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"        patientist.transferStaff(staff, original, target);","lastModifiedDate":"2023-03-20"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"    public boolean hasWard(Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"        return patientist.hasWard(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"    public void addWard(Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"        patientist.addWard(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":176,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"    public void deleteWard(Ward ward) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"        patientist.deleteWard(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"    public void setWard(Ward target, Ward editedWard) { //checked","lastModifiedDate":"2023-03-20"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"        patientist.setWard(target, editedWard);","lastModifiedDate":"2023-03-13"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"    public List\u003cString\u003e getWardNames() {","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"        return this.patientist.getWardNames();","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"    public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-24"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(wardName);","lastModifiedDate":"2023-03-24"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"        return this.patientist.getWard(wardName);","lastModifiedDate":"2023-03-24"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":229,"author":{"gitId":"euph00"},"content":"        return patientist.equals(other.patientist)","lastModifiedDate":"2023-03-09"},{"lineNumber":230,"author":{"gitId":"pzhengze"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2023-03-27"},{"lineNumber":231,"author":{"gitId":"pzhengze"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2023-03-27"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":122,"-":109,"pzhengze":3}},{"path":"src/main/java/seedu/patientist/model/Patientist.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.WardList;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" * Wraps all data at the patientist-book level","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"public class Patientist implements ReadOnlyPatientist {","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    private final WardList wards;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    private final ObservableList\u003cPerson\u003e personsInPatientist;","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        wards \u003d new WardList();","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        personsInPatientist \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    public Patientist() {}","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"     * Creates a Patientist using the Persons in the {@code toBeCopied}","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    public Patientist(ReadOnlyPatientist toBeCopied) {","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"     * Replaces the contents of the ward list with {@code wards}.","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"     * {@code wards} must not contain duplicate wards, and no person should appear more than once.","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    public void setWards(List\u003cWard\u003e wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        this.wards.setWards(wards);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"     * Resets the existing data of this {@code Patientist} with {@code newData}.","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"    public void resetData(ReadOnlyPatientist newData) {","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"        setWards(newData.getWardList());","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        return wards.contains(person);","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"     * Returns true if a person with the same identity as {@code person} exists in {@code ward}.","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"    public boolean hasPerson(Person person, Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(person, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        return ward.containsPerson(person);","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"     * Adds a patient to the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"     * The ward must exist and the patient must not already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"    public void addPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(patient, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"        ward.addPatient(patient);","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"     * Adds a staff to the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"     * The ward must exist and the staff must not already be assigned to the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"    public void addStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(staff, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"        ward.addStaff(staff);","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"     * Replaces the given staff {@code target} with {@code edited} throughout the whole patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"     * {@code target} must exist in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist in the patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"     * The staff identity of {@code edited} must not be the same as another existing staff.","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"    public void setStaff(Staff target, Staff edited) {","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"        for (Ward ward : wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"euph00"},"content":"            if (ward.containsStaff(target)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"                ward.setStaff(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"     * Replaces the given patient {@code target} with {@code edited}.","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"     * {@code target} must exist in the patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist in the patientist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"     * The patient identity of {@code edited} must not be the same as another existing patient in the paitentist book.","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"    public void setPatient(Patient target, Patient edited) {","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"        for (Ward ward : wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"            if (ward.containsPatient(target)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"                ward.setPatient(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"     * Removes {@code key} from this {@code ward}.","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"     * {@code key} must exist in the ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"    public void removeStaff(Staff key, Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"        ward.deleteStaff(key);","lastModifiedDate":"2023-03-13"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"     * Removes {@code key} from all {@code ward}s.","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"     * {@code key} could be a staff or patient, all instances will be removed.","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"        for (Ward ward : wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"            if (ward.containsPerson(key)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"                ward.deletePerson(key);","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"     * Removes {@code key} from this {@code ward}.","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"     * {@code key} could be a staff or patient.","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"    public void removePerson(Person person, Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"        if (person instanceof Staff) {","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"            removeStaff((Staff) person, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"        if (person instanceof Patient) {","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"            removePatient((Patient) person, ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"        return; //TODO: there\u0027s some kind of exception to be thrown here idk what","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"     * Removes {@code key} from this {@code Patientist}.","lastModifiedDate":"2023-03-09"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"     * {@code key} must exist in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"    public void removePatient(Patient key, Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"        ward.deletePatient(key);","lastModifiedDate":"2023-03-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"     * Removes patient from original ward and adds patient to target ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"     * Patient must exist in original ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"     * Patient must not exist in target ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"    public void transferPatient(Patient patient, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"        if (!original.containsPatient(patient)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2023-03-20"},{"lineNumber":186,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"        if (target.containsPatient(patient)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2023-03-20"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"        original.deletePatient(patient);","lastModifiedDate":"2023-03-20"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"        target.addPatient(patient);","lastModifiedDate":"2023-03-20"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"     * Removes staff from original ward and adds staff to target ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"     * Staff must exist in original ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"     * Staff must not exist in target ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":198,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":199,"author":{"gitId":"euph00"},"content":"    public void transferStaff(Staff staff, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":200,"author":{"gitId":"euph00"},"content":"        if (!original.containsStaff(staff)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":201,"author":{"gitId":"euph00"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2023-03-20"},{"lineNumber":202,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":203,"author":{"gitId":"euph00"},"content":"        if (target.containsStaff(staff)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":204,"author":{"gitId":"euph00"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2023-03-20"},{"lineNumber":205,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":206,"author":{"gitId":"euph00"},"content":"        original.deleteStaff(staff);","lastModifiedDate":"2023-03-20"},{"lineNumber":207,"author":{"gitId":"euph00"},"content":"        target.addStaff(staff);","lastModifiedDate":"2023-03-20"},{"lineNumber":208,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":209,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":210,"author":{"gitId":"euph00"},"content":"    //// ward level methods","lastModifiedDate":"2023-03-13"},{"lineNumber":211,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":212,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":213,"author":{"gitId":"euph00"},"content":"     * Returns {@code List} of ward names in this patientist.","lastModifiedDate":"2023-03-28"},{"lineNumber":214,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":215,"author":{"gitId":"euph00"},"content":"    public List\u003cString\u003e getWardNames() {","lastModifiedDate":"2023-03-28"},{"lineNumber":216,"author":{"gitId":"euph00"},"content":"        return this.wards.getWardNameList();","lastModifiedDate":"2023-03-28"},{"lineNumber":217,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":218,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":219,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":220,"author":{"gitId":"euph00"},"content":"     * Returns true if this Patientist contains a ward with the same name as the target.","lastModifiedDate":"2023-03-13"},{"lineNumber":221,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":222,"author":{"gitId":"euph00"},"content":"    public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":223,"author":{"gitId":"euph00"},"content":"        return this.wards.contains(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":224,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":225,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":226,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":227,"author":{"gitId":"euph00"},"content":"     * Adds {@code ward} to the patientist\u0027s wardlist","lastModifiedDate":"2023-03-13"},{"lineNumber":228,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":229,"author":{"gitId":"euph00"},"content":"    public void addWard(Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":230,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":231,"author":{"gitId":"euph00"},"content":"        wards.add(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":232,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":233,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":234,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":235,"author":{"gitId":"euph00"},"content":"     * Deletes {@code ward} from the patientist\u0027s wardlist.","lastModifiedDate":"2023-03-13"},{"lineNumber":236,"author":{"gitId":"euph00"},"content":"     * {@code ward} must exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":237,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":238,"author":{"gitId":"euph00"},"content":"    public void deleteWard(Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":239,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":240,"author":{"gitId":"euph00"},"content":"        wards.delete(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":241,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":242,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":243,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":244,"author":{"gitId":"euph00"},"content":"     * Replaces {@code target} ward with {@code edited} ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":245,"author":{"gitId":"euph00"},"content":"     * Target must already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":246,"author":{"gitId":"euph00"},"content":"     * Edited must not already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":247,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":248,"author":{"gitId":"euph00"},"content":"    public void setWard(Ward target, Ward edited) {","lastModifiedDate":"2023-03-13"},{"lineNumber":249,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":250,"author":{"gitId":"euph00"},"content":"        wards.setWard(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":251,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":252,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":253,"author":{"gitId":"euph00"},"content":"    public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-24"},{"lineNumber":254,"author":{"gitId":"euph00"},"content":"        return this.wards.get(wardName);","lastModifiedDate":"2023-03-24"},{"lineNumber":255,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":256,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"euph00"},"content":"        return wards.asUnmodifiableObservableList().size() + \" wards\";","lastModifiedDate":"2023-03-13"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":267,"author":{"gitId":"pzhengze"},"content":"        return FXCollections.unmodifiableObservableList(this.personsInPatientist);","lastModifiedDate":"2023-03-25"},{"lineNumber":268,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":269,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":270,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":271,"author":{"gitId":"pzhengze"},"content":"    public void updatePersonList() {","lastModifiedDate":"2023-03-25"},{"lineNumber":272,"author":{"gitId":"pzhengze"},"content":"        this.personsInPatientist.setAll();","lastModifiedDate":"2023-03-25"},{"lineNumber":273,"author":{"gitId":"euph00"},"content":"        for (Ward ward : wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":274,"author":{"gitId":"pzhengze"},"content":"            this.personsInPatientist.addAll(ward.getStaffsAsUnmodifiableObservableList());","lastModifiedDate":"2023-03-25"},{"lineNumber":275,"author":{"gitId":"pzhengze"},"content":"            this.personsInPatientist.addAll(ward.getPatientsAsUnmodifiableObservableList());","lastModifiedDate":"2023-03-25"},{"lineNumber":276,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":277,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":278,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":279,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":280,"author":{"gitId":"euph00"},"content":"    public ObservableList\u003cWard\u003e getWardList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":281,"author":{"gitId":"euph00"},"content":"        return wards.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-13"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":284,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":285,"author":{"gitId":"euph00"},"content":"    public ObservableList\u003cPerson\u003e getPatientListInWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":286,"author":{"gitId":"euph00"},"content":"        return ward.getPatientsAsUnmodifiableObservableList();","lastModifiedDate":"2023-03-24"},{"lineNumber":287,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":288,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":289,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":290,"author":{"gitId":"euph00"},"content":"    public ObservableList\u003cPerson\u003e getStaffListInWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":291,"author":{"gitId":"euph00"},"content":"        return ward.getStaffsAsUnmodifiableObservableList();","lastModifiedDate":"2023-03-24"},{"lineNumber":292,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":293,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":297,"author":{"gitId":"euph00"},"content":"                || (other instanceof Patientist // instanceof handles nulls","lastModifiedDate":"2023-03-09"},{"lineNumber":298,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 wards.equals(((Patientist) other).wards));","lastModifiedDate":"2023-03-13"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":303,"author":{"gitId":"euph00"},"content":"        return wards.hashCode();","lastModifiedDate":"2023-03-13"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":213,"-":82,"pzhengze":10}},{"path":"src/main/java/seedu/patientist/model/ReadOnlyPatientist.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":" * Unmodifiable view of an patientist book","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"public interface ReadOnlyPatientist {","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    ObservableList\u003cWard\u003e getWardList();","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    ObservableList\u003cPerson\u003e getPatientListInWard(Ward ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    ObservableList\u003cPerson\u003e getStaffListInWard(Ward ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    void updatePersonList();","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":11,"-":13,"pzhengze":2}},{"path":"src/main/java/seedu/patientist/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    Path getPatientistFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"euph00":3,"-":13}},{"path":"src/main/java/seedu/patientist/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    private Path patientistFilePath \u003d Paths.get(\"data\" , \"patientist.json\");","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        setPatientistFilePath(newUserPrefs.getPatientistFilePath());","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        return patientistFilePath;","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"    public void setPatientistFilePath(Path patientistFilePath) {","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"        requireNonNull(patientistFilePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        this.patientistFilePath \u003d patientistFilePath;","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 patientistFilePath.equals(o.patientistFilePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        return Objects.hash(guiSettings, patientistFilePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        sb.append(\"\\nLocal data file location : \" + patientistFilePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":12,"-":75}},{"path":"src/main/java/seedu/patientist/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" * Represents a Person\u0027s patientist in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"     * The first character of the patientist must not be a whitespace,","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"     * @param address A valid patientist.","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":5,"-":52}},{"path":"src/main/java/seedu/patientist/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" * Represents a Person\u0027s email in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"     * @param email A valid email patientist.","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":4,"-":67}},{"path":"src/main/java/seedu/patientist/model/person/IdContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":" * Tests that a {@code Person}\u0027s {@code IdNumber} matches any of the keywords given.","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"public class IdContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"    public IdContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        return keywords.stream()","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"                .anyMatch(keyword -\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"                        StringUtil.containsWordIgnoreCase(person.getIdNumber().toString(), keyword));","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof IdContainsKeywordsPredicate)","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 keywords.equals(((IdContainsKeywordsPredicate) other).keywords);","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":31}},{"path":"src/main/java/seedu/patientist/model/person/IdNumber.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":" * API for an id number associated with a person.","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"public class IdNumber {","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"ID should be of the format: alphanumeric without spaces\";","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    /** ID should be alphanumeric. */","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}*\";","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    protected final String idNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"     * Creates an idNumber.","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param idNumber The idNumber in text form.","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    public IdNumber(String idNumber) {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        requireNonNull(idNumber);","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        checkArgument(isValidPid(idNumber), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        this.idNumber \u003d idNumber.toUpperCase();","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"     * Returns true if a given string is a valid patient id.","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"    public static boolean isValidPid(String test) {","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        return idNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        return idNumber.hashCode();","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"            return true;","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!(other instanceof IdNumber)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"            return false;","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        return this.idNumber.equals(((IdNumber) other).idNumber);","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"lukkesreysandeur":54,"euph00":1}},{"path":"src/main/java/seedu/patientist/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" * Represents a Person\u0027s name in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"     * The first character of the patientist must not be a whitespace,","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":4,"-":55}},{"path":"src/main/java/seedu/patientist/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.StringUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"euph00":2,"-":29}},{"path":"src/main/java/seedu/patientist/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.RoleTag;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":" * Represents a Person in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"public abstract class Person {","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    private final IdNumber id;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    public Person(Name name, Phone phone, Email email, IdNumber id, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        requireAllNonNull(name, phone, email, id, address, tags);","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"    public IdNumber getIdNumber() {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        return id;","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"     * Returns the tag of the person that identifies their role.","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    public abstract RoleTag getRoleTag();","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"     * Returns true if both persons have the same ID number.","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 otherPerson.getIdNumber().equals(getIdNumber());","lastModifiedDate":"2023-03-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":107,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 otherPerson.getIdNumber().equals(getIdNumber())","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"lukkesreysandeur"},"content":"        return Objects.hash(name, phone, email, id, address, tags);","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"lukkesreysandeur"},"content":"                .append(\"; ID: \")","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"lukkesreysandeur"},"content":"                .append(getIdNumber())","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lukkesreysandeur":12,"euph00":13,"-":112}},{"path":"src/main/java/seedu/patientist/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" * Represents a Person\u0027s phone number in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":3,"-":50}},{"path":"src/main/java/seedu/patientist/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    private final String wardName;","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    public UniquePersonList(String wardName) {","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        this.wardName \u003d wardName;","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"pzhengze"},"content":"     * Returns true if internal list is empty.","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"        return internalList.isEmpty();","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":9,"-":133,"pzhengze":7}},{"path":"src/main/java/seedu/patientist/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.exceptions;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"euph00":1,"-":10}},{"path":"src/main/java/seedu/patientist/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.exceptions;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"euph00":1,"-":5}},{"path":"src/main/java/seedu/patientist/model/person/patient/DummyPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":" * Creates a dummy patient instance to check for equality of {@code IdNumber}.","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"public class DummyPatient extends Patient {","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"     * Instantiates a dummy patient object.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param idNumber The id number we are checking equality for.","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    public DummyPatient(IdNumber idNumber) {","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        super(new Email(\"dummy@example.com\"), new Name(\"dummy\"), new Phone(\"12345678\"),","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"                idNumber, new Address(\"dummy\"), new HashSet\u003c\u003e());","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":24}},{"path":"src/main/java/seedu/patientist/model/person/patient/IsPatientPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":" * Test if Person object is a patients","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"public class IsPatientPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"        return person instanceof Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof IsPatientPredicate); // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"lukkesreysandeur":1,"pzhengze":20}},{"path":"src/main/java/seedu/patientist/model/person/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.model.tag.PriorityTag;","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.RoleTag;","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":" * Represents a patient object in Patientist","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":" * Guarantees: superclass guarantees, and details is non null. If none provided, details is blank.","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"public class Patient extends Person {","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public static final RoleTag PATIENT_TAG \u003d new RoleTag(\"Patient\");","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    private PriorityTag priority \u003d new PriorityTag(\"LOW\");","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    private List\u003cPatientStatusDetails\u003e details \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    private List\u003cPatientToDo\u003e toDos \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"    public Patient(Email email, Name name, Phone phone, IdNumber id, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        super(name, phone, email, id, address, tags);","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"    public Patient(IdNumber id, Name name, Phone phone, Email email,","lastModifiedDate":"2023-03-31"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"                   Address address, PriorityTag priority, List\u003cPatientStatusDetails\u003e details,","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"                   List\u003cPatientToDo\u003e toDos, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"        super(name, phone, email, id, address, tags);","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2023-03-31"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"        this.details.addAll(details);","lastModifiedDate":"2023-03-31"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        this.toDos.addAll(toDos);","lastModifiedDate":"2023-03-31"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"    public Patient(IdNumber id, Name name, Phone phone, Email email,","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"                   Address address, List\u003cPatientStatusDetails\u003e details, List\u003cPatientToDo\u003e toDos, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        super(name, phone, email, id, address, tags);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        this.details.addAll(details);","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        this.toDos.addAll(toDos);","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"     * Adds the new \u003ccode\u003ePatientStatusDetails\u003c/code\u003e into the \u003ccode\u003edetails\u003c/code\u003e field.","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"    public void addPatientStatusDetails(PatientStatusDetails details) {","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        this.details.add(details);","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"     * Deletes the \u003ccode\u003ePatientStatusDetails\u003c/code\u003e specified by the index into the \u003ccode\u003edetails\u003c/code\u003e field.","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"    public void deletePatientStatusDetails(Index index) throws CommandException {","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        if (!statusDetailsIndexInRange(index)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"            throw new CommandException(\"Status index not in range.\");","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        this.details.remove(index.getZeroBased());","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"     * Returns the \u003ccode\u003ePatientStatusDetails\u003c/code\u003e of this patient","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"     * @return \u003ccode\u003edetails\u003c/code\u003e, the object representing the details of a patient\u0027s treatment","lastModifiedDate":"2023-03-12"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"    public List\u003cPatientStatusDetails\u003e getPatientStatusDetails() {","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"        return Collections.unmodifiableList(this.details);","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"    private boolean statusDetailsIndexInRange(Index index) {","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        return (index.getZeroBased() \u003c details.size() \u0026\u0026 index.getZeroBased() \u003e\u003d 0);","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"     * Adds the new \u003ccode\u003ePatientToDo\u003c/code\u003e into the \u003ccode\u003etoDos\u003c/code\u003e field","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"    public void addPatientToDo(PatientToDo toDo) {","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"        this.toDos.add(toDo);","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"     * Deletes the \u003ccode\u003ePatientToDo\u003c/code\u003e specified by the index into the \u003ccode\u003eToDos\u003c/code\u003e field.","lastModifiedDate":"2023-03-30"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"    public void deletePatientToDo(Index index) throws CommandException {","lastModifiedDate":"2023-03-30"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"        if (!toDoIndexInRange(index)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"            throw new CommandException(\"Todo index not in range.\");","lastModifiedDate":"2023-03-30"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"        this.toDos.remove(index.getZeroBased());","lastModifiedDate":"2023-03-30"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"     * Returns the \u003ccode\u003ePatientToDos\u003c/code\u003e of this patient","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"     * @return \u003ccode\u003etoDos\u003c/code\u003e, the object representing the details of a patient\u0027s todo list","lastModifiedDate":"2023-03-30"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"    public List\u003cPatientToDo\u003e getPatientToDoList() {","lastModifiedDate":"2023-03-30"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"        return Collections.unmodifiableList(this.toDos);","lastModifiedDate":"2023-03-30"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"jinnieshin"},"content":"    public PriorityTag getPriority() {","lastModifiedDate":"2023-03-31"},{"lineNumber":114,"author":{"gitId":"jinnieshin"},"content":"        return priority;","lastModifiedDate":"2023-03-31"},{"lineNumber":115,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":116,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"    private boolean toDoIndexInRange(Index index) {","lastModifiedDate":"2023-03-30"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"        return (index.getZeroBased() \u003c toDos.size() \u0026\u0026 index.getZeroBased() \u003e\u003d 0);","lastModifiedDate":"2023-03-30"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-03-12"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder(super.toString());","lastModifiedDate":"2023-03-12"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"        sb.append(\"; Details: \")","lastModifiedDate":"2023-03-12"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"                .append(details.toString())","lastModifiedDate":"2023-03-12"},{"lineNumber":126,"author":{"gitId":"pzhengze"},"content":"                .append(\"; Todos: \")","lastModifiedDate":"2023-03-31"},{"lineNumber":127,"author":{"gitId":"pzhengze"},"content":"                .append(toDos.toString())","lastModifiedDate":"2023-03-31"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"                .append(\"; Type: Patient \");","lastModifiedDate":"2023-03-12"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"        return sb.toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-12"},{"lineNumber":134,"author":{"gitId":"lukkesreysandeur"},"content":"        return getIdNumber().hashCode();","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-12"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-12"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"            return true;","lastModifiedDate":"2023-03-12"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2023-03-12"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"            return false;","lastModifiedDate":"2023-03-12"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"        Patient otherPat \u003d (Patient) other;","lastModifiedDate":"2023-03-12"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"        return super.equals(otherPat);","lastModifiedDate":"2023-03-20"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"    public RoleTag getRoleTag() {","lastModifiedDate":"2023-03-20"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"        return PATIENT_TAG;","lastModifiedDate":"2023-03-20"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"    public boolean isSamePerson(Person otherPatient) {","lastModifiedDate":"2023-03-20"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"        if (otherPatient \u003d\u003d this) {","lastModifiedDate":"2023-03-20"},{"lineNumber":159,"author":{"gitId":"pzhengze"},"content":"            return true;","lastModifiedDate":"2023-03-12"},{"lineNumber":160,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":161,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"        if (!(otherPatient instanceof Patient)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":163,"author":{"gitId":"pzhengze"},"content":"            return false;","lastModifiedDate":"2023-03-12"},{"lineNumber":164,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":165,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"        return super.isSamePerson(otherPatient);","lastModifiedDate":"2023-03-20"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":6,"euph00":113,"pzhengze":32,"jinnieshin":18}},{"path":"src/main/java/seedu/patientist/model/person/patient/PatientIdContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":" * Tests that a {@code Patient}\u0027s {@code IdNumber} matches any of the keywords given.","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"public class PatientIdContainsKeywordsPredicate extends IdContainsKeywordsPredicate {","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    public PatientIdContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"        super(keywords);","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!(person instanceof Patient)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"            return false;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        return super.test(person);","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof PatientIdContainsKeywordsPredicate)","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 super.equals(other);","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":30}},{"path":"src/main/java/seedu/patientist/model/person/patient/PatientInWardPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":" * Checks the tag of all personnel to see if they belong to a particular ward","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"public class PatientInWardPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    private final Model model;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    private final String keyword;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"     * Constructor for PatientInWardPredicate.","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    public PatientInWardPredicate(Model model, String keyword) {","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        requireAllNonNull(model, keyword);","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"        this.model \u003d model;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        if (!(person instanceof Patient)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            return false;","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d model.getWard(keyword);","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"            return false;","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        return ward.containsPatient((Patient) person);","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"                || (other instanceof PatientInWardPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"                    \u0026\u0026 keyword.equals(((PatientInWardPredicate) other).keyword));","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"euph00":3,"GlennOngJunJie":22,"pzhengze":23}},{"path":"src/main/java/seedu/patientist/model/person/patient/PatientNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.util.StringUtil;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"public class PatientNameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    public PatientNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!(person instanceof Patient)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"            return false;","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        Patient patient \u003d (Patient) person;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        return keywords.stream()","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof PatientNameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 keywords.equals(((PatientNameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"lukkesreysandeur":1,"pzhengze":34}},{"path":"src/main/java/seedu/patientist/model/person/patient/PatientStatusDetails.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":" * Represents the status details of a patient. This is where the treatment progress and notes are to be recorded.","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"public class PatientStatusDetails {","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"    private String details;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    public PatientStatusDetails() {","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"        this.details \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    public PatientStatusDetails(String details) {","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    public String getDetails() {","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        return details;","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"        return details; //TODO?","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"               || (other instanceof PatientStatusDetails // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                   \u0026\u0026 details.equals(((PatientStatusDetails) other).details)); // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"euph00":25,"pzhengze":7}},{"path":"src/main/java/seedu/patientist/model/person/patient/PatientToDo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":" * Represents the status details of a patient. This is where the treatment progress and notes are to be recorded.","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"public class PatientToDo {","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"    private String todo;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    public PatientToDo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"        this.todo \u003d \"\";","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    public PatientToDo(String details) {","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        this.todo \u003d details;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    public String getTodo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        return todo;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"        return todo;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"                || (other instanceof PatientToDo // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 todo.equals(((PatientToDo) other).todo)); // state check","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"euph00":32}},{"path":"src/main/java/seedu/patientist/model/person/staff/DummyStaff.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":" * Creates a dummy staff instance to check for equality of {@code IdNumber}.","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"public class DummyStaff extends Staff {","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"     * Instantiates a dummy staff object.","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param idNumber The id number we are checking equality for.","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    public DummyStaff(IdNumber idNumber) {","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        super(new Name(\"dummy\"), new Phone(\"12345678\"), new Email(\"dummy@example.com\"),","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"                idNumber, new Address(\"dummy\"), new HashSet\u003c\u003e());","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":24}},{"path":"src/main/java/seedu/patientist/model/person/staff/IsStaffPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":" * Tests that a {@code Person} is a {@code Staff} member.","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"public class IsStaffPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"        return person instanceof Staff;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof IsStaffPredicate); // instanceof handles nulls","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"lukkesreysandeur":21}},{"path":"src/main/java/seedu/patientist/model/person/staff/Staff.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.RoleTag;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":" * Represents a Staff object in Patientist","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":" * Guarantees: superclass guarantees","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"public class Staff extends Person {","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    /** Tag used to check if a person is a staff member. */","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    public static final RoleTag STAFF_TAG \u003d new RoleTag(\"Staff\");","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    public Staff(Name name, Phone phone, Email email, IdNumber id, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        super(name, phone, email, id, address, tags); //TODO: wards in charge implemented as tags for now","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    public RoleTag getRoleTag() {","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        return STAFF_TAG;","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean isSamePerson(Person otherStaff) {","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!(otherStaff instanceof Staff)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"            return false;","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        return super.isSamePerson(otherStaff);","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder(super.toString());","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        sb.append(\"; Type: Staff \");","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        return sb.toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        if (this \u003d\u003d object) {","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"            return true;","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!(object instanceof Staff)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"            return false;","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff otherStaff \u003d (Staff) object;","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        return super.equals(otherStaff);","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":27,"euph00":36}},{"path":"src/main/java/seedu/patientist/model/person/staff/StaffIdContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":" * Tests that a {@code Staff}\u0027s {@code IdNumber} matches any of the keywords given.","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"public class StaffIdContainsKeywordsPredicate extends IdContainsKeywordsPredicate {","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffIdContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"        super(keywords);","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!(person instanceof Staff)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"            return false;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        return super.test(person);","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof StaffIdContainsKeywordsPredicate)","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 super.equals(other);","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":30}},{"path":"src/main/java/seedu/patientist/model/person/staff/StaffInWardPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"/**","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":" * Checks the tag of all personnel to see if they belong to a particular ward","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":" */","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"public class StaffInWardPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"    private final Model model;","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"    private final String keyword;","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"     * Constructor for StaffInWardPredicate.","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"    public StaffInWardPredicate(Model model, String keyword) {","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"        requireAllNonNull(model, keyword);","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"        this.model \u003d model;","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-31"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"        if (!(person instanceof Staff)) {","lastModifiedDate":"2023-03-31"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"            return false;","lastModifiedDate":"2023-03-31"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":32,"author":{"gitId":"GlennOngJunJie"},"content":"        Ward ward \u003d model.getWard(keyword);","lastModifiedDate":"2023-03-31"},{"lineNumber":33,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":34,"author":{"gitId":"GlennOngJunJie"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-31"},{"lineNumber":35,"author":{"gitId":"GlennOngJunJie"},"content":"            return false;","lastModifiedDate":"2023-03-31"},{"lineNumber":36,"author":{"gitId":"GlennOngJunJie"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":37,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":38,"author":{"gitId":"GlennOngJunJie"},"content":"        return ward.containsStaff((Staff) person);","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":40,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"    @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"                || (other instanceof StaffInWardPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-31"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"                \u0026\u0026 keyword.equals(((StaffInWardPredicate) other).keyword));","lastModifiedDate":"2023-03-31"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":47,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"GlennOngJunJie":48}},{"path":"src/main/java/seedu/patientist/model/person/staff/StaffNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"public class StaffNameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!(person instanceof Staff)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"            return false;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff staff \u003d (Staff) person;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        return keywords.stream()","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(staff.getName().fullName, keyword));","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"                || (other instanceof StaffNameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"                \u0026\u0026 keywords.equals(((StaffNameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":35}},{"path":"src/main/java/seedu/patientist/model/tag/PriorityTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package seedu.patientist.model.tag;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":" * Represents the severity of a patient in the patientist.","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":" * Severity is either HIGH, MEDIUM, or LOW.","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"public class PriorityTag extends Tag {","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"SeverityTag should be either HIGH, MEDIUM, or LOW\";","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     * Constructs a {@code SeverityTag}.","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * This tag is used to show severity of a patient.","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public PriorityTag(String tagName) {","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        super(tagName);","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"        return test.equals(\"HIGH\") || test.equals(\"MEDIUM\") || test.equals(\"LOW\");","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"jinnieshin":26}},{"path":"src/main/java/seedu/patientist/model/tag/RoleTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.tag;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":" * Represents the role of a person in the patientist.","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" * Staff have a RoleTag named \"Staff\", Patient have a RoleTag named \"Patient\".","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"public class RoleTag extends Tag {","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Role Tag names should be either Patient or Staff\";","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    public static final String PATIENT_TAG_NAME \u003d \"Patient\";","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    public static final String STAFF_TAG_NAME \u003d \"Staff\";","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"     * Constructs a {@code RoleTag}.","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"     * This tag is used to differentiate between Patient and Staff","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    public RoleTag(String tagName) {","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        super(tagName);","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        return test.equals(PATIENT_TAG_NAME) || test.equals(STAFF_TAG_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    public boolean isPatientTag() {","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        return this.tagName.equals(PATIENT_TAG_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    public boolean isStaffTag() {","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        return this.tagName.equals(STAFF_TAG_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"euph00":35,"jinnieshin":1}},{"path":"src/main/java/seedu/patientist/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" * Represents a Tag in the patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"euph00":3,"-":51}},{"path":"src/main/java/seedu/patientist/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":" * Contains utility methods for populating {@code Patientist} with sample data.","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":" * TODO: refactor this to create a valid sample Patientist","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    public static Patient[] getSamplePatients() {","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"        return new Patient[] {","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"            new Patient(new Email(\"alexyeoh@example.com\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"                    new IdNumber(\"A12345A\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                getTagSet(\"Patient\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"            new Patient(new Email(\"berniceyu@example.com\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"                    new IdNumber(\"A12345B\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"                getTagSet(\"Patient\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"            new Patient(new Email(\"charlotte@example.com\"), new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"                    new IdNumber(\"A12345C\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"                getTagSet(\"Patient\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"            new Patient(new Email(\"lidavid@example.com\"), new Name(\"David Li\"), new Phone(\"91031282\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"                    new IdNumber(\"A12345D\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"                getTagSet(\"Patient\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"            new Patient(new Email(\"irfan@example.com\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"                    new IdNumber(\"A12345E\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"                getTagSet(\"Patient\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"            new Patient(new Email(\"royb@example.com\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"                    new IdNumber(\"A12345F\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"                getTagSet(\"Patient\"))","lastModifiedDate":"2023-03-24"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        };","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    private static Staff[] getSampleStaffs() {","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        return new Staff[] {","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"            new Staff(new Name(\"Amy Bee\"), new Phone(\"11111111\"), new Email(\"amy@example.com\"),","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"                    new IdNumber(\"A12345678B\"), new Address(\"Block 312, Amy Street 1\"), getTagSet(\"Staff\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"            new Staff(new Name(\"Bob Choo\"), new Phone(\"222222222\"), new Email(\"bob@example.com\"),","lastModifiedDate":"2023-03-24"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"                    new IdNumber(\"Y78932734N\"), new Address(\"Block 123, Bobby Street 3\"), getTagSet(\"Staff\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"            new Staff(new Name(\"Charles Lee\"), new Phone(\"2136784\"), new Email(\"leecharles@example.com\"),","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"                    new IdNumber(\"G487659645D\"), new Address(\"123, ABC, #08-111\"), getTagSet(\"Staff\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"            new Staff(new Name(\"Dacia Chin\"), new Phone(\"96128393\"), new Email(\"daciachin@example.com\"),","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"                    new IdNumber(\"L73825263J\"), new Address(\"970, Hindhede St, #07-27\"), getTagSet(\"Staff\")),","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        };","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"    public static Ward[] getSampleWards() {","lastModifiedDate":"2023-03-24"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        return new Ward[] {","lastModifiedDate":"2023-03-24"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"            new Ward(\"Block A Ward 1\"),","lastModifiedDate":"2023-03-24"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"            new Ward(\"Block B Ward 2\")","lastModifiedDate":"2023-03-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"    public static ReadOnlyPatientist getSamplePatientist() {","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        Patientist sampleAb \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        Patient[] patients \u003d getSamplePatients();","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        Staff[] staffs \u003d getSampleStaffs();","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        Ward[] wards \u003d getSampleWards();","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"        for (int i \u003d 0; i \u003c wards.length; i++) {","lastModifiedDate":"2023-03-24"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"            for (int j \u003d i; j \u003c patients.length; j +\u003d 2) {","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"                wards[i].addPatient(patients[j]);","lastModifiedDate":"2023-03-24"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-24"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"            for (int j \u003d i; j \u003c staffs.length; j +\u003d 2) {","lastModifiedDate":"2023-03-24"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"                wards[i].addStaff(staffs[j]);","lastModifiedDate":"2023-03-24"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-24"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"            sampleAb.addWard(wards[i]);","lastModifiedDate":"2023-03-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"     * Returns a PatientStatusDetails list containing the list of strings given.","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"    public static List\u003cPatientStatusDetails\u003e getDetailsList(String... strings) {","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"                .map(PatientStatusDetails::new)","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"lukkesreysandeur":13,"euph00":11,"-":26,"pzhengze":55}},{"path":"src/main/java/seedu/patientist/model/ward/Ward.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.ward;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.UniquePersonList;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" * Represents a ward in Patientist, which holds a collection of Patients and a collection of Staff.","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"public class Ward {","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Ward name cannot be blank\";","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    private final UniquePersonList patients;","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    private final UniquePersonList staffs;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    private final String wardName;","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"     * Initialises an empty ward with wardName.","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    public Ward(String wardName) {","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(wardName);","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        checkArgument(isValidWardName(wardName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        patients \u003d new UniquePersonList(wardName);","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        staffs \u003d new UniquePersonList(wardName);","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        this.wardName \u003d wardName;","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"    public static boolean isValidWardName(String wardName) {","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        return !wardName.equals(\"\");","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    public boolean containsPatient(Patient patient) {","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        return patients.contains(patient);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    public boolean containsStaff(Staff staff) {","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        return staffs.contains(staff);","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"     * Checks if ward contains Person, which could be either staff or patient","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"    public boolean containsPerson(Person person) {","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"        return patients.contains(person) || staffs.contains(person);","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"     * Adds patient into the ward. Patient must not already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(patient);","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"        if (containsPatient(patient)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"        patients.add(patient);","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"     * Adds staff into the ward. Staff must not already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"    public void addStaff(Staff staff) {","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(staff);","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        if (containsStaff(staff)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        staffs.add(staff);","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"     * Deletes patient from ward. Patient must already exist in ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"    public void deletePatient(Patient patient) {","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(patient);","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        if (!containsPatient(patient)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"        patients.remove(patient);","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"     * Deletes staff from ward. Staff must already exist in ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"    public void deleteStaff(Staff staff) {","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(staff);","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"        if (!containsStaff(staff)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"        staffs.remove(staff);","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"     * Deletes person which could be a staff or patient from ward. Person must already exist in ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"    public void deletePerson(Person person) {","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(person);","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"        if (person instanceof Staff \u0026\u0026 staffs.contains(person)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"            staffs.remove(person);","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"        } else if (person instanceof Patient \u0026\u0026 patients.contains(person)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"            patients.remove(person);","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"        } else {","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"lukkesreysandeur"},"content":"     * Deletes a patient based on id from any ward. Patient must already exist in ward.","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param patient The dummy patient used to check equality of {@code IdNumber}.","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"lukkesreysandeur"},"content":"    public void deletePatientById(Patient patient) {","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"lukkesreysandeur"},"content":"        requireAllNonNull(patient);","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!containsPatient(patient)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"lukkesreysandeur"},"content":"        Iterator\u003cPerson\u003e patientIterator \u003d patients.iterator();","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"lukkesreysandeur"},"content":"        while (patientIterator.hasNext()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"lukkesreysandeur"},"content":"            Person toCheck \u003d patientIterator.next();","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"lukkesreysandeur"},"content":"            if (patient.isSamePerson(toCheck)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"lukkesreysandeur"},"content":"                patientIterator.remove();","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"lukkesreysandeur"},"content":"                return;","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"lukkesreysandeur"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"lukkesreysandeur"},"content":"     * Deletes a staff member based on id from any ward. Staff must already exist in ward.","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"lukkesreysandeur"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"lukkesreysandeur"},"content":"     * @param staff The dummy staff used to check equality of {@code IdNumber}.","lastModifiedDate":"2023-03-29"},{"lineNumber":139,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"lukkesreysandeur"},"content":"    public void deleteStaffById(Staff staff) {","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"lukkesreysandeur"},"content":"        requireAllNonNull(staff);","lastModifiedDate":"2023-03-29"},{"lineNumber":142,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!containsStaff(staff)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":143,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2023-03-29"},{"lineNumber":144,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":145,"author":{"gitId":"lukkesreysandeur"},"content":"        Iterator\u003cPerson\u003e staffIterator \u003d staffs.iterator();","lastModifiedDate":"2023-03-29"},{"lineNumber":146,"author":{"gitId":"lukkesreysandeur"},"content":"        while (staffIterator.hasNext()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"lukkesreysandeur"},"content":"            Person toCheck \u003d staffIterator.next();","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"lukkesreysandeur"},"content":"            if (staff.isSamePerson(toCheck)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":149,"author":{"gitId":"lukkesreysandeur"},"content":"                staffIterator.remove();","lastModifiedDate":"2023-03-29"},{"lineNumber":150,"author":{"gitId":"lukkesreysandeur"},"content":"                return;","lastModifiedDate":"2023-03-29"},{"lineNumber":151,"author":{"gitId":"lukkesreysandeur"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":152,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"     * Replaces target patient with updated patient.","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"     * Target must already exist in ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"     * Updated must not already exist in ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"    public void setPatient(Patient target, Patient updated) {","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, updated);","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"        patients.setPerson(target, updated);","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"     * Replaces target staff with updated staff.","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"     * Target must already exist in ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"     * Updated must not already exist in ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"    public void setStaff(Staff target, Staff updated) {","lastModifiedDate":"2023-03-13"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, updated);","lastModifiedDate":"2023-03-13"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"        staffs.setPerson(target, updated);","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":176,"author":{"gitId":"euph00"},"content":"     * Returns an unmodifiable list view of patients in the ward","lastModifiedDate":"2023-03-13"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"    public ObservableList\u003cPerson\u003e getPatientsAsUnmodifiableObservableList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-13"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"     * Returns an unmodifiable list view of staff in the ward","lastModifiedDate":"2023-03-13"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"    public ObservableList\u003cPerson\u003e getStaffsAsUnmodifiableObservableList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"euph00"},"content":"        return staffs.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-13"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"     * 2 wards are equal iff they share the same name","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-13"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"        if (!(other instanceof Ward)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":198,"author":{"gitId":"euph00"},"content":"            return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":200,"author":{"gitId":"euph00"},"content":"        Ward otherWard \u003d (Ward) other;","lastModifiedDate":"2023-03-13"},{"lineNumber":201,"author":{"gitId":"euph00"},"content":"        return this.wardName.equals(otherWard.wardName);","lastModifiedDate":"2023-03-13"},{"lineNumber":202,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":203,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":204,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"euph00"},"content":"     * Identity of a ward is defined by its name","lastModifiedDate":"2023-03-13"},{"lineNumber":206,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":207,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":208,"author":{"gitId":"euph00"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-13"},{"lineNumber":209,"author":{"gitId":"euph00"},"content":"        return this.wardName.hashCode();","lastModifiedDate":"2023-03-13"},{"lineNumber":210,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":211,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":212,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":213,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-03-13"},{"lineNumber":214,"author":{"gitId":"euph00"},"content":"        return this.wardName;","lastModifiedDate":"2023-03-20"},{"lineNumber":215,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":216,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":217,"author":{"gitId":"euph00"},"content":"    public String getWardName() {","lastModifiedDate":"2023-03-20"},{"lineNumber":218,"author":{"gitId":"euph00"},"content":"        return wardName;","lastModifiedDate":"2023-03-20"},{"lineNumber":219,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":220,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":221,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":222,"author":{"gitId":"pzhengze"},"content":"     * Checks if ward is empty.","lastModifiedDate":"2023-03-25"},{"lineNumber":223,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":224,"author":{"gitId":"pzhengze"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-03-25"},{"lineNumber":225,"author":{"gitId":"pzhengze"},"content":"        return patients.isEmpty() \u0026\u0026 staffs.isEmpty();","lastModifiedDate":"2023-03-25"},{"lineNumber":226,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":227,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":42,"euph00":177,"pzhengze":8}},{"path":"src/main/java/seedu/patientist/model/ward/WardList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.ward;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.exceptions.DuplicateWardException;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.exceptions.WardNotFoundException;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" * Representation of a list of wards that enforces uniqueness between the wards.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" * Wards are identified by their name, thus addition and deletion occur","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" * based on equality check of {@code Ward::equals}, which compares name only.","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"public class WardList implements Iterable\u003cWard\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    public static final String INVALID_INDEX_MESSAGE \u003d \"Specified index needs to be in range of list indices\";","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    private final ObservableList\u003cWard\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    private final ObservableList\u003cWard\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"     * Returns a List of Strings of ward names of all wards in the WardList.","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    public List\u003cString\u003e getWardNameList() {","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        for (Ward ward : internalList) {","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"            result.add(ward.getWardName());","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        return result;","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"     * Sets internal wardlist as {@code wards}.","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    public void setWards(WardList wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(wards);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        internalList.setAll(wards.internalList);","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"     * Sets internal wardlist using the provided {@code List\u003cWard\u003e}","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"    public void setWards(List\u003cWard\u003e wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(wards);","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        if (!wardsAreUnique(wards)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"            throw new DuplicateWardException();","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        internalList.setAll(wards);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"     * Replaces target ward with edited ward.","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"     * Target ward must already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"     * Edited ward cannot already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    public void setWard(Ward target, Ward edited) {","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(target, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"        int idx \u003d internalList.indexOf(target);","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"        if (idx \u003d\u003d -1) {","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"            throw new WardNotFoundException();","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        if (!target.equals(edited) \u0026\u0026 contains(edited)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"            throw new DuplicateWardException();","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"        internalList.set(idx, edited);","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"     * Adds given ward to wardlist.","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"     * Ward cannot already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"    public void add(Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        if (contains(ward)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"            throw new DuplicateWardException();","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"        internalList.add(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"     * Returns true if targetWard is in the list.","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"    public boolean contains(Ward targetWard) {","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(targetWard);","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"        return internalList.stream().anyMatch(targetWard::equals);","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"     * Returns true if person is in any of the wards in the list.","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"     * Person can be staff or patient.","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"    public boolean contains(Person person) {","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(person);","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"        for (Ward ward : internalList) {","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"            if (ward.containsPerson(person)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"                return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"        return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"     * Deletes ward from the wardlist","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"     * ward must already exist.","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"    public void delete(Ward ward) {","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"        requireAllNonNull(ward);","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"        if (!internalList.remove(ward)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"            throw new WardNotFoundException();","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"    public Ward get(int index) {","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"        checkArgument(isValidIndex(index), INVALID_INDEX_MESSAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"        return internalList.get(index);","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"    public Ward get(String wardName) {","lastModifiedDate":"2023-03-24"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"        return internalList.stream()","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"                .filter(ward -\u003e ward.getWardName().equals(wardName))","lastModifiedDate":"2023-03-24"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"                .findFirst().orElse(null);","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"    public ObservableList\u003cWard\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"    private boolean isValidIndex(int index) {","lastModifiedDate":"2023-03-13"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        return index \u003e\u003d 0 \u0026\u0026 index \u003c internalList.size();","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"    public Iterator\u003cWard\u003e iterator() {","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"    private boolean wardsAreUnique(List\u003cWard\u003e wards) {","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 0; i \u003c wards.size() - 1; i++) {","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"            for (int j \u003d i + 1; j \u003c wards.size(); j++) {","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"                if (wards.get(i).equals(wards.get(j))) {","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"                    return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"                }","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"        return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"                || (other instanceof WardList // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"                \u0026\u0026 internalList.equals(((WardList) other).internalList));","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"euph00":171}},{"path":"src/main/java/seedu/patientist/model/ward/exceptions/DuplicateWardException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.ward.exceptions;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":" * Signals that an operation would result in duplicate wards. Wards are equal iff they share the same name.","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"public class DuplicateWardException extends RuntimeException {","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"    public DuplicateWardException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"        super(\"Operation would result in duplicate wards.\");","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"euph00":10}},{"path":"src/main/java/seedu/patientist/model/ward/exceptions/WardNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.ward.exceptions;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":" * Signals that the operation is unable to find the desired ward.","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"public class WardNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"euph00":6}},{"path":"src/main/java/seedu/patientist/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"class JsonAdaptedPatient {","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    private final String id;","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    private final List\u003cJsonAdaptedStatus\u003e details \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    private final List\u003cJsonAdaptedToDo\u003e toDos \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"                              @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"                              @JsonProperty(\"address\") String address,","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"                              @JsonProperty(\"status\") List\u003cJsonAdaptedStatus\u003e details,","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"                              @JsonProperty(\"todo\") List\u003cJsonAdaptedToDo\u003e toDos,","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        if (details !\u003d null) {","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"            this.details.addAll(details);","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        if (toDos !\u003d null) {","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"            this.toDos.addAll(toDos);","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedPatient(Person source) {","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        Patient patient \u003d (Patient) source;","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        name \u003d patient.getName().fullName;","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        phone \u003d patient.getPhone().value;","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        email \u003d patient.getEmail().value;","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        id \u003d patient.getIdNumber().toString();","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"        address \u003d patient.getAddress().value;","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        details.addAll(((Patient) source).getPatientStatusDetails().stream()","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"                .map(JsonAdaptedStatus::new)","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"        toDos.addAll(((Patient) source).getPatientToDoList().stream()","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"                .map(JsonAdaptedToDo::new)","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"        final List\u003cPatientStatusDetails\u003e personDetails \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"        for (JsonAdaptedStatus detail : details) {","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"            personDetails.add(detail.toModelType());","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"        final List\u003cPatientToDo\u003e personToDos \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-30"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"        for (JsonAdaptedToDo toDo : toDos) {","lastModifiedDate":"2023-03-30"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"            personToDos.add(toDo.toModelType());","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2023-03-12"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-03-12"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":116,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!IdNumber.isValidPid(id)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new IllegalValueException(IdNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":119,"author":{"gitId":"lukkesreysandeur"},"content":"        final IdNumber modelId \u003d new IdNumber(id);","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"pzhengze"},"content":"        final List\u003cPatientStatusDetails\u003e modelDetails \u003d new ArrayList\u003c\u003e(personDetails);","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"        final List\u003cPatientToDo\u003e modelToDos \u003d new ArrayList\u003c\u003e(personToDos);","lastModifiedDate":"2023-03-30"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"        return new Patient(modelId, modelName, modelPhone, modelEmail,","lastModifiedDate":"2023-03-30"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"                modelAddress, modelDetails, modelToDos, modelTags);","lastModifiedDate":"2023-03-30"},{"lineNumber":153,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"lukkesreysandeur":8,"euph00":25,"-":90,"pzhengze":33}},{"path":"src/main/java/seedu/patientist/storage/JsonAdaptedStaff.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"class JsonAdaptedStaff {","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    private final String id;","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedStaff(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"                             @JsonProperty(\"address\") String address,","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedStaff(Person source) {","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        id \u003d source.getIdNumber().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2023-03-12"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-03-12"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":90,"author":{"gitId":"lukkesreysandeur"},"content":"        if (!IdNumber.isValidPid(id)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new IllegalValueException(IdNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":93,"author":{"gitId":"lukkesreysandeur"},"content":"        final IdNumber modelId \u003d new IdNumber(id);","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"lukkesreysandeur"},"content":"        return new Staff(modelName, modelPhone, modelEmail, modelId, modelAddress, modelTags);","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"lukkesreysandeur":9,"euph00":8,"-":95,"pzhengze":12}},{"path":"src/main/java/seedu/patientist/storage/JsonAdaptedStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":" * Jackson-friendly version of {@link PatientStatusDetails}.","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"public class JsonAdaptedStatus {","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"    private final String statusDescription;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"     * Constructs a {@code JsonAdaptedStatus} with the given {@code statusDescription}.","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedStatus(String statusDescription) {","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"        this.statusDescription \u003d statusDescription;","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"     * Converts a given {@code PatientStatusDetails} into this class for Jackson use.","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedStatus(PatientStatusDetails source) {","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"        statusDescription \u003d source.getDetails();","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    @JsonValue","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    public String getStatusDescription() {","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        return statusDescription;","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code PatientStatusDetails} object.","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    public PatientStatusDetails toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        return new PatientStatusDetails(statusDescription);","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":44}},{"path":"src/main/java/seedu/patientist/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"euph00":3,"-":45}},{"path":"src/main/java/seedu/patientist/storage/JsonAdaptedToDo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":" * Jackson-friendly version of {@link PatientToDo}.","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"public class JsonAdaptedToDo {","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    private final String toDoDescription;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"     * Constructs a {@code JsonAdaptedToDo} with the given {@code toDoDescription}.","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    public JsonAdaptedToDo(String toDoDescription) {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        this.toDoDescription \u003d toDoDescription;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     * Converts a given {@code PatientToDo} into this class for Jackson use.","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    public JsonAdaptedToDo(PatientToDo source) {","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        toDoDescription \u003d source.getTodo();","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    @JsonValue","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    public String getToDoDescription() {","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        return toDoDescription;","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code PatientToDo} object.","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    public PatientToDo toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        return new PatientToDo(toDoDescription);","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"euph00":44}},{"path":"src/main/java/seedu/patientist/storage/JsonAdaptedWard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-24"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":" * Jackson-friendly version of {@link Ward}.","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"public class JsonAdaptedWard {","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ward\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    private final String name;","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    private final List\u003cJsonAdaptedStaff\u003e staffs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedWard(@JsonProperty(\"name\") String name,","lastModifiedDate":"2023-03-24"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"                           @JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients,","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"                           @JsonProperty(\"staffs\") List\u003cJsonAdaptedStaff\u003e staffs) {","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-24"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        if (patients !\u003d null) {","lastModifiedDate":"2023-03-24"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"            this.patients.addAll(patients);","lastModifiedDate":"2023-03-24"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        if (staffs !\u003d null) {","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"            this.staffs.addAll(staffs);","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2023-03-24"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    public JsonAdaptedWard(Ward source) {","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        name \u003d source.getWardName();","lastModifiedDate":"2023-03-24"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        patients.addAll(source.getPatientsAsUnmodifiableObservableList().stream()","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"                .map(JsonAdaptedPatient::new)","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        staffs.addAll(source.getStaffsAsUnmodifiableObservableList().stream()","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"                .map(JsonAdaptedStaff::new)","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"    public Ward toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-24"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        final List\u003cPatient\u003e wardPatients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-24"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"        final List\u003cStaff\u003e wardStaffs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-24"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"        for (JsonAdaptedPatient patient : patients) {","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"            wardPatients.add((Patient) patient.toModelType());","lastModifiedDate":"2023-03-24"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        for (JsonAdaptedStaff staff : staffs) {","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"            wardStaffs.add((Staff) staff.toModelType());","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-03-24"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-03-24"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d new Ward(name);","lastModifiedDate":"2023-03-24"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"        for (Patient patient : wardPatients) {","lastModifiedDate":"2023-03-24"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"            ward.addPatient(patient);","lastModifiedDate":"2023-03-24"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"        for (Staff staff : wardStaffs) {","lastModifiedDate":"2023-03-24"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"            ward.addStaff(staff);","lastModifiedDate":"2023-03-24"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"        return ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"pzhengze":89}},{"path":"src/main/java/seedu/patientist/storage/JsonPatientistStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.FileUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.JsonUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" * A class to access Patientist data stored as a json file on the hard disk.","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"public class JsonPatientistStorage implements PatientistStorage {","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientistStorage.class);","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    private Path filePath;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    public JsonPatientistStorage(Path filePath) {","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        return filePath;","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    public Optional\u003cReadOnlyPatientist\u003e readPatientist() throws DataConversionException {","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        return readPatientist(filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"     * Similar to {@link #readPatientist()}.","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    public Optional\u003cReadOnlyPatientist\u003e readPatientist(Path filePath) throws DataConversionException {","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        Optional\u003cJsonSerializablePatientist\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"                filePath, JsonSerializablePatientist.class);","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"            return Optional.empty();","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"    public void savePatientist(ReadOnlyPatientist patientist) throws IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"        savePatientist(patientist, filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"     * Similar to {@link #savePatientist(ReadOnlyPatientist)}.","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"    public void savePatientist(ReadOnlyPatientist patientist, Path filePath) throws IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        requireNonNull(patientist);","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"        JsonUtil.saveJsonFile(new JsonSerializablePatientist(patientist), filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"euph00":80}},{"path":"src/main/java/seedu/patientist/storage/JsonSerializablePatientist.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" * An Immutable Patientist that is serializable to JSON format.","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"@JsonRootName(value \u003d \"patientist\")","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"class JsonSerializablePatientist {","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    public static final String MESSAGE_DUPLICATE_WARD \u003d \"Persons list contains duplicate ward(s).\";","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    private final List\u003cJsonAdaptedWard\u003e wards \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"     * Constructs a {@code JsonSerializablePatientist} with the given persons.","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    public JsonSerializablePatientist(@JsonProperty(\"wards\") List\u003cJsonAdaptedWard\u003e wards) {","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        this.wards.addAll(wards);","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"     * Converts a given {@code ReadOnlyPatientist} into this class for Jackson use.","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializablePatientist}.","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    public JsonSerializablePatientist(ReadOnlyPatientist source) {","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        wards.addAll(source.getWardList().stream().map(JsonAdaptedWard::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"     * Converts this patientist book into the model\u0027s {@code Patientist} object.","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    public Patientist toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        Patientist patientist \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        for (JsonAdaptedWard jsonAdaptedWard : wards) {","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"            Ward ward \u003d jsonAdaptedWard.toModelType();","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"            if (patientist.hasWard(ward)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_WARD);","lastModifiedDate":"2023-03-24"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"            }","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"            patientist.addWard(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        return patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"lukkesreysandeur":1,"euph00":15,"-":33,"pzhengze":11}},{"path":"src/main/java/seedu/patientist/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.JsonUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"euph00":5,"-":42}},{"path":"src/main/java/seedu/patientist/storage/PatientistStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":" * Represents a storage for {@link Patientist}.","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"public interface PatientistStorage {","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    Path getPatientistFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"     * Returns Patientist data as a {@link ReadOnlyPatientist}.","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    Optional\u003cReadOnlyPatientist\u003e readPatientist() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"     * @see #getPatientistFilePath()","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    Optional\u003cReadOnlyPatientist\u003e readPatientist(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"     * Saves the given {@link ReadOnlyPatientist} to the storage.","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"     * @param patientist cannot be null.","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    void savePatientist(ReadOnlyPatientist patientist) throws IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"     * @see #savePatientist(ReadOnlyPatientist)","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    void savePatientist(ReadOnlyPatientist patientist, Path filePath) throws IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"euph00":46}},{"path":"src/main/java/seedu/patientist/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":" * API of the Storage component","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"public interface Storage extends PatientistStorage, UserPrefsStorage {","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    Path getPatientistFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    Optional\u003cReadOnlyPatientist\u003e readPatientist() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    void savePatientist(ReadOnlyPatientist patientist) throws IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"euph00":32}},{"path":"src/main/java/seedu/patientist/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":" * Manages storage of Patientist data in local storage.","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    private PatientistStorage patientistStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     * Creates a {@code StorageManager} with the given {@code PatientistStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    public StorageManager(PatientistStorage patientistStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        this.patientistStorage \u003d patientistStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patientist methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        return patientistStorage.getPatientistFilePath();","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"    public Optional\u003cReadOnlyPatientist\u003e readPatientist() throws DataConversionException, IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        return readPatientist(patientistStorage.getPatientistFilePath());","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"    public Optional\u003cReadOnlyPatientist\u003e readPatientist(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"        return patientistStorage.readPatientist(filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"    public void savePatientist(ReadOnlyPatientist patientist) throws IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"        savePatientist(patientist, patientistStorage.getPatientistFilePath());","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"    public void savePatientist(ReadOnlyPatientist patientist, Path filePath) throws IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        patientistStorage.savePatientist(patientist, filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"euph00":78}},{"path":"src/main/java/seedu/patientist/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":" * Represents a storage for {@link seedu.patientist.model.UserPrefs}.","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"     * Saves the given {@link seedu.patientist.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"euph00":6,"-":30}},{"path":"src/main/java/seedu/patientist/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.CommandResult;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"         * @see seedu.patientist.logic.Logic#execute(String)","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"euph00":5,"-":80}},{"path":"src/main/java/seedu/patientist/ui/DetailsPopup.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":" * The UI component that is responsible for a pop-up to show details of Person.","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"public class DetailsPopup extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(DetailsPopup.class);","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    private static final String FXML \u003d \"DetailsPopup.fxml\";","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Patientist level 4\u003c/a\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"    public final Person person;","lastModifiedDate":"2023-03-31"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"    private HBox detailsPane;","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    private Label name;","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    private Label idNumber;","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    private Label phone;","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    private Label address;","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    private Label email;","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"    private VBox status;","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    private VBox todos;","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    private FlowPane tags;","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"     * Creates a {@code DetailsPopup} with the given {@code personListPanel}.","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"    public DetailsPopup(Person personToView) {","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"        super(FXML);","lastModifiedDate":"2023-03-26"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        this.person \u003d personToView;","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"jinnieshin"},"content":"        if (personToView \u003d\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":64,"author":{"gitId":"jinnieshin"},"content":"            name.setText(\"\");","lastModifiedDate":"2023-03-26"},{"lineNumber":65,"author":{"gitId":"jinnieshin"},"content":"            phone.setText(\"\");","lastModifiedDate":"2023-03-26"},{"lineNumber":66,"author":{"gitId":"jinnieshin"},"content":"            address.setText(\"\");","lastModifiedDate":"2023-03-26"},{"lineNumber":67,"author":{"gitId":"jinnieshin"},"content":"            email.setText(\"\");","lastModifiedDate":"2023-03-26"},{"lineNumber":68,"author":{"gitId":"jinnieshin"},"content":"            idNumber.setText(\"\");","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"jinnieshin"},"content":"            return;","lastModifiedDate":"2023-03-26"},{"lineNumber":70,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"        String s \u003d person.getIdNumber().toString();","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        idNumber.setText(s);","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"        if (personToView instanceof Patient) {","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"            Patient patientToView \u003d (Patient) personToView;","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"            List\u003cPatientStatusDetails\u003e details \u003d patientToView.getPatientStatusDetails();","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"            for (int i \u003d 1; i \u003c details.size() + 1; i++) {","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"                status.getChildren().add(new Label(String.format(\"%d. \", i) + details.get(i - 1).getDetails()));","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"            List\u003cPatientToDo\u003e todos \u003d patientToView.getPatientToDoList();","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"            for (int i \u003d 1; i \u003c todos.size() + 1; i++) {","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"                this.todos.getChildren()","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"                        .add(new Label(String.format(\"%d. \", i) + todos.get(i - 1).getTodo()));","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        person.getTags().stream()","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2023-03-18"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"euph00":8,"pzhengze":61,"jinnieshin":24}},{"path":"src/main/java/seedu/patientist/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2223s2-cs2103t-t12-1.github.io/tp/UserGuide.html\";","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"euph00":2,"-":99,"pzhengze":1}},{"path":"src/main/java/seedu/patientist/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.Logic;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.CommandResult;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    private DetailsPopup detailsPopup;","lastModifiedDate":"2023-03-31"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"    private Person personToView;","lastModifiedDate":"2023-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    private WardListPanel wardListPanel;","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"    private StackPane wardListPanelPlaceholder;","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-03-26"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"    private StackPane detailsPopupPlaceholder;","lastModifiedDate":"2023-03-26"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"        detailsPopup \u003d new DetailsPopup(null);","lastModifiedDate":"2023-03-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"pzhengze"},"content":"        wardListPanel \u003d new WardListPanel(logic.getPatientist().getWardList());","lastModifiedDate":"2023-03-30"},{"lineNumber":129,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":130,"author":{"gitId":"jinnieshin"},"content":"        detailsPopup \u003d new DetailsPopup(personToView);","lastModifiedDate":"2023-03-26"},{"lineNumber":131,"author":{"gitId":"jinnieshin"},"content":"        detailsPopupPlaceholder.getChildren().add(detailsPopup.getRoot());","lastModifiedDate":"2023-03-26"},{"lineNumber":132,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPatientistPath());","lastModifiedDate":"2023-03-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":156,"author":{"gitId":"pzhengze"},"content":"     * Opens the details window.","lastModifiedDate":"2023-03-18"},{"lineNumber":157,"author":{"gitId":"pzhengze"},"content":"     * @param index The index of the person to view.","lastModifiedDate":"2023-03-18"},{"lineNumber":158,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":159,"author":{"gitId":"pzhengze"},"content":"    public void handleDetails(int index) {","lastModifiedDate":"2023-03-18"},{"lineNumber":160,"author":{"gitId":"jinnieshin"},"content":"        personToView \u003d logic.getFilteredPersonList().get(index);","lastModifiedDate":"2023-03-26"},{"lineNumber":161,"author":{"gitId":"jinnieshin"},"content":"        detailsPopup \u003d new DetailsPopup(personToView);","lastModifiedDate":"2023-03-26"},{"lineNumber":162,"author":{"gitId":"pzhengze"},"content":"        detailsPopupPlaceholder.getChildren().setAll(detailsPopup.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":163,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":164,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":165,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":166,"author":{"gitId":"pzhengze"},"content":"     * Opens the details window.","lastModifiedDate":"2023-03-30"},{"lineNumber":167,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":168,"author":{"gitId":"pzhengze"},"content":"    public void handleWards(boolean showWards) {","lastModifiedDate":"2023-03-30"},{"lineNumber":169,"author":{"gitId":"pzhengze"},"content":"        if (showWards) {","lastModifiedDate":"2023-03-30"},{"lineNumber":170,"author":{"gitId":"pzhengze"},"content":"            personListPanelPlaceholder.getChildren().setAll(wardListPanel.getRoot());","lastModifiedDate":"2023-03-30"},{"lineNumber":171,"author":{"gitId":"pzhengze"},"content":"        } else {","lastModifiedDate":"2023-03-30"},{"lineNumber":172,"author":{"gitId":"pzhengze"},"content":"            personListPanelPlaceholder.getChildren().setAll(personListPanel.getRoot());","lastModifiedDate":"2023-03-30"},{"lineNumber":173,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":174,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":175,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"euph00"},"content":"     * @see seedu.patientist.logic.Logic#execute(String)","lastModifiedDate":"2023-03-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"jinnieshin"},"content":"            if (commandResult.isShowDetails()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":220,"author":{"gitId":"pzhengze"},"content":"                handleDetails(commandResult.getShowDetailsIndex());","lastModifiedDate":"2023-03-18"},{"lineNumber":221,"author":{"gitId":"jinnieshin"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":222,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":223,"author":{"gitId":"pzhengze"},"content":"            handleWards(commandResult.isShowWards());","lastModifiedDate":"2023-03-30"},{"lineNumber":224,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"euph00":9,"-":187,"pzhengze":28,"jinnieshin":16}},{"path":"src/main/java/seedu/patientist/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Patientist level 4\u003c/a\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    private Label idNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        String s \u003d person.getIdNumber().toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        idNumber.setText(s);","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"lukkesreysandeur":3,"euph00":3,"-":74,"pzhengze":2}},{"path":"src/main/java/seedu/patientist/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"euph00":3,"-":46}},{"path":"src/main/java/seedu/patientist/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"euph00":1,"-":27}},{"path":"src/main/java/seedu/patientist/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":27}},{"path":"src/main/java/seedu/patientist/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"euph00":1,"-":12}},{"path":"src/main/java/seedu/patientist/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.MainApp;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.StringUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.Logic;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"jinnieshin"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/PatientistTheme.css\");","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"euph00":5,"-":82,"jinnieshin":1}},{"path":"src/main/java/seedu/patientist/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.MainApp;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"euph00":2,"-":86}},{"path":"src/main/java/seedu/patientist/ui/WardCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":" * An UI component that displays information of a {@code Ward}.","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"public class WardCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"    private static final String FXML \u003d \"WardListCard.fxml\";","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Patientist level 4\u003c/a\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    public final Ward ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    private Label name;","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    private Label id;","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    private Label patientCount;","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    private Label staffCount;","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    public WardCard(Ward ward, int displayedIndex) {","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        super(FXML);","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        this.ward \u003d ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        name.setText(ward.getWardName());","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        patientCount.setText(\"No. of patients: \" + ward.getPatientsAsUnmodifiableObservableList().size());","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        staffCount.setText(\"No. of staffs: \" + ward.getStaffsAsUnmodifiableObservableList().size());","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"            return true;","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        if (!(other instanceof WardCard)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"            return false;","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        // state check","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        WardCard card \u003d (WardCard) other;","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"               \u0026\u0026 ward.equals(card.ward);","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"pzhengze":65}},{"path":"src/main/java/seedu/patientist/ui/WardListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":" * Panel containing the list of wards.","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"public class WardListPanel extends UiPart\u003cNode\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    private static final String FXML \u003d \"WardListPanel.fxml\";","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(WardListPanel.class);","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    private ListView\u003cWard\u003e wardListView;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    public WardListPanel(ObservableList\u003cWard\u003e wardList) {","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        super(FXML);","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"        wardListView.setItems(wardList);","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        wardListView.setCellFactory(listView -\u003e new WardListViewCell());","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    class WardListViewCell extends ListCell\u003cWard\u003e {","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        protected void updateItem(Ward ward, boolean empty) {","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"            super.updateItem(ward, empty);","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"            if (empty || ward \u003d\u003d null) {","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"                setText(null);","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"            } else {","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"                setGraphic(new WardCard(ward, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"pzhengze":47}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" style\u003d\"-fx-background-color: transparent;\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"-":6,"pzhengze":2}},{"path":"src/main/resources/view/DetailsPopup.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"\u003cScrollPane minWidth\u003d\"350.0\" pickOnBounds\u003d\"false\" prefWidth\u003d\"350.0\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    \u003ccontent\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"        \u003cGridPane pickOnBounds\u003d\"false\" prefHeight\u003d\"183.0\" prefWidth\u003d\"300.0\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"            \u003cVBox alignment\u003d\"CENTER_LEFT\" pickOnBounds\u003d\"false\" style\u003d\"-fx-background-color: transparent;\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"                \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"                    \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Name:  \" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"                    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Tags:  \" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"                        \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"ID No.:  \" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"                        \u003cLabel fx:id\u003d\"idNumber\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$idNumber\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Phone no.:  \" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"                        \u003cLabel fx:id\u003d\"phone\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Address:  \" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"                        \u003cLabel fx:id\u003d\"address\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Email:  \" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"                        \u003cLabel fx:id\u003d\"email\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Status:  \" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"                        \u003cVBox fx:id\u003d\"status\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Todo:  \" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"                        \u003cVBox fx:id\u003d\"todos\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"               \u003cInsets left\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"         \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"            \u003cColumnConstraints /\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"         \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"         \u003crowConstraints\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"            \u003cRowConstraints /\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"         \u003c/rowConstraints\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"        \u003c/GridPane\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"    \u003c/content\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"   \u003cpadding\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"   \u003c/padding\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"\u003c/ScrollPane\u003e","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"euph00":9,"pzhengze":93,"jinnieshin":1}},{"path":"src/main/resources/view/HelpWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"#copyButton {","lastModifiedDate":"2022-01-02"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: white;","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"#copyButton:hover {","lastModifiedDate":"2022-01-02"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: lightgray;","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"#copyButton:armed {","lastModifiedDate":"2022-01-02"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: white;","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"#helpMessageContainer {","lastModifiedDate":"2022-01-02"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"-":14,"jinnieshin":5}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Patientist\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"        \u003cURL value\u003d\"@PatientistTheme.css\" /\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"        \u003cHBox styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"               \u003cHBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"                  \u003cchildren\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"               \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" minWidth\u003d\"350.0\" prefWidth\u003d\"350.0\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"                \u003cStackPane fx:id\u003d\"detailsPopupPlaceholder\" alignment\u003d\"TOP_RIGHT\" minWidth\u003d\"365.0\" prefWidth\u003d\"365.0\" styleClass\u003d\"details\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"                  \u003c/children\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"               \u003c/HBox\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":47,"pzhengze":13,"jinnieshin":4}},{"path":"src/main/resources/view/PatientistTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"    background-color: #dbdbdb; /* Used in the default.html file */","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"    -fx-base: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"    -fx-control-inner-background: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"    -fx-margin: 5 5 5 5;","lastModifiedDate":"2023-03-31"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"    -fx-background-radius: 18 18 18 18;","lastModifiedDate":"2023-03-31"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"    -fx-background-insets: 5, 5 ;","lastModifiedDate":"2023-03-31"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #d4d4d4;","lastModifiedDate":"2023-03-26"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"    -fx-margin: 5 5 5 5;","lastModifiedDate":"2023-03-31"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"    -fx-background-radius: 18 18 18 18;","lastModifiedDate":"2023-03-31"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"    -fx-background-insets: 5, 5 ;","lastModifiedDate":"2023-03-31"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"    -fx-background-color: #ebebeb;","lastModifiedDate":"2023-03-31"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"    -fx-margin: 5 5 5 5;","lastModifiedDate":"2023-03-31"},{"lineNumber":116,"author":{"gitId":"pzhengze"},"content":"    -fx-background-radius: 18 18 18 18;","lastModifiedDate":"2023-03-31"},{"lineNumber":117,"author":{"gitId":"pzhengze"},"content":"    -fx-background-insets: 5, 5 ;","lastModifiedDate":"2023-03-31"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #a7ccd9;","lastModifiedDate":"2023-03-26"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"    -fx-margin: 5 5 5 5;","lastModifiedDate":"2023-03-31"},{"lineNumber":124,"author":{"gitId":"pzhengze"},"content":"    -fx-background-radius: 18 18 18 18;","lastModifiedDate":"2023-03-31"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"    -fx-background-insets: 5, 5 ;","lastModifiedDate":"2023-03-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"pzhengze"},"content":"    -fx-background-radius: 18 18 18 18;","lastModifiedDate":"2023-03-31"},{"lineNumber":130,"author":{"gitId":"pzhengze"},"content":"    -fx-background-insets: 5, 5 ;","lastModifiedDate":"2023-03-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":133,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":150,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":154,"author":{"gitId":"jinnieshin"},"content":"     -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":155,"author":{"gitId":"jinnieshin"},"content":"     -fx-border-color: derive(#dbdbdb, 10%);","lastModifiedDate":"2023-03-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 30%);","lastModifiedDate":"2023-03-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":176,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 30%);","lastModifiedDate":"2023-03-26"},{"lineNumber":183,"author":{"gitId":"jinnieshin"},"content":"    -fx-border-color: derive(#dbdbdb, 25%);","lastModifiedDate":"2023-03-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 30%);","lastModifiedDate":"2023-03-26"},{"lineNumber":193,"author":{"gitId":"jinnieshin"},"content":"    -fx-border-color: derive(#dbdbdb, 30%);","lastModifiedDate":"2023-03-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":198,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 30%);","lastModifiedDate":"2023-03-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 50%);","lastModifiedDate":"2023-03-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 20%);","lastModifiedDate":"2023-03-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":216,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: #424242;","lastModifiedDate":"2023-03-26"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #ababab;","lastModifiedDate":"2023-03-26"},{"lineNumber":243,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"jinnieshin"},"content":"  -fx-text-fill: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":261,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: #000000;","lastModifiedDate":"2023-03-26"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: #dbdbdb;","lastModifiedDate":"2023-03-26"},{"lineNumber":279,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: derive(#dbdbdb, 25%);","lastModifiedDate":"2023-03-26"},{"lineNumber":289,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"jinnieshin"},"content":"    -fx-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":295,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":299,"author":{"gitId":"pzhengze"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-31"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":303,"author":{"gitId":"pzhengze"},"content":"    -fx-background-color: derive(#ababab, 50%);","lastModifiedDate":"2023-03-31"},{"lineNumber":304,"author":{"gitId":"pzhengze"},"content":"    -fx-background-insets: 5;","lastModifiedDate":"2023-03-31"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":307,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":316,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":322,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":324,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":327,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":329,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: #ab0911;","lastModifiedDate":"2023-03-26"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":335,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: transparent #ffffff transparent #ffffff;","lastModifiedDate":"2023-03-26"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"jinnieshin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-26"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":347,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":350,"author":{"gitId":"jinnieshin"},"content":"    -fx-background-color: transparent, #ababab, transparent, #ababab;","lastModifiedDate":"2023-03-26"},{"lineNumber":351,"author":{"gitId":"pzhengze"},"content":"    -fx-background-radius: 18 18 18 18;","lastModifiedDate":"2023-03-31"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":357,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":359,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":366,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":367,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":368,"author":{"gitId":"pzhengze"},"content":"#status .label, #todos .label {","lastModifiedDate":"2023-03-31"},{"lineNumber":369,"author":{"gitId":"pzhengze"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2023-03-29"},{"lineNumber":370,"author":{"gitId":"pzhengze"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2023-03-29"},{"lineNumber":371,"author":{"gitId":"pzhengze"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2023-03-29"},{"lineNumber":372,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"},{"lineNumber":373,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":374,"author":{"gitId":"pzhengze"},"content":".details {","lastModifiedDate":"2023-03-31"},{"lineNumber":375,"author":{"gitId":"pzhengze"},"content":"   -fx-background-color: transparent, #ffffff, transparent, #ffffff;","lastModifiedDate":"2023-03-31"},{"lineNumber":376,"author":{"gitId":"pzhengze"},"content":"   -fx-background-radius: 18 18 18 18;","lastModifiedDate":"2023-03-31"},{"lineNumber":377,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-31"},{"lineNumber":378,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":379,"author":{"gitId":"pzhengze"},"content":".scroll-pane \u003e .viewport {","lastModifiedDate":"2023-03-31"},{"lineNumber":380,"author":{"gitId":"pzhengze"},"content":"   -fx-background-color: transparent","lastModifiedDate":"2023-03-31"},{"lineNumber":381,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-31"},{"lineNumber":382,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":383,"author":{"gitId":"pzhengze"},"content":".text-field {","lastModifiedDate":"2023-03-31"},{"lineNumber":384,"author":{"gitId":"pzhengze"},"content":"     -fx-background-color: transparent;","lastModifiedDate":"2023-03-31"},{"lineNumber":385,"author":{"gitId":"pzhengze"},"content":"     -fx-background-radius: 15;","lastModifiedDate":"2023-03-31"},{"lineNumber":386,"author":{"gitId":"pzhengze"},"content":"     -fx-border-radius: 15;","lastModifiedDate":"2023-03-31"},{"lineNumber":387,"author":{"gitId":"pzhengze"},"content":"     -fx-border-color: transparent;","lastModifiedDate":"2023-03-31"},{"lineNumber":388,"author":{"gitId":"pzhengze"},"content":" }","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"-":302,"pzhengze":44,"jinnieshin":42}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"      \u003cLabel fx:id\u003d\"idNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$idNumber\" /\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lukkesreysandeur":1,"-":32,"pzhengze":8}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"result-display\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"-":6,"pzhengze":2}},{"path":"src/main/resources/view/WardListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"            \u003cLabel fx:id\u003d\"patientCount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$patientCount\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"            \u003cLabel fx:id\u003d\"staffCount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$staffCount\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"pzhengze":33}},{"path":"src/main/resources/view/WardListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"    \u003cListView fx:id\u003d\"wardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"pzhengze":9}},{"path":"src/test/java/seedu/patientist/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"euph00":1,"-":57}},{"path":"src/test/java/seedu/patientist/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"euph00":1,"-":26}},{"path":"src/test/java/seedu/patientist/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":2,"-":133}},{"path":"src/test/java/seedu/patientist/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.core.index;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"euph00":2,"-":58}},{"path":"src/test/java/seedu/patientist/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"euph00":2,"-":34}},{"path":"src/test/java/seedu/patientist/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"euph00":3,"-":105}},{"path":"src/test/java/seedu/patientist/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Config;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"euph00":4,"-":112}},{"path":"src/test/java/seedu/patientist/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":2,"-":21}},{"path":"src/test/java/seedu/patientist/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.SerializableTestClass;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.TestUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":3,"-":42}},{"path":"src/test/java/seedu/patientist/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.commons.util;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"euph00":2,"-":141}},{"path":"src/test/java/seedu/patientist/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PID_DESC_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.STATUS_DESC_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_WARD_AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.WARD_DESC_AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.CommandResult;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ListCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.JsonPatientistStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"import seedu.patientist.storage.StorageManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        JsonPatientistStorage addressBookStorage \u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"                new JsonPatientistStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        // Setup LogicManager with JsonPatientistIoExceptionThrowingStub","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"        JsonPatientistStorage addressBookStorage \u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"                new JsonPatientistIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d new Ward(VALID_WARD_AMY);","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        model.addWard(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        String addCommand \u003d AddPatientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"                            + ADDRESS_DESC_AMY + PID_DESC_AMY + STATUS_DESC_AMY + WARD_DESC_AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags(\"Patient\").build();","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"        Ward expectedWard \u003d new Ward(VALID_WARD_AMY);","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"        expectedModel.addWard(expectedWard);","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"        expectedModel.addPatient(expectedPatient, expectedWard);","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"jinnieshin"},"content":"        //assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2023-03-31"},{"lineNumber":156,"author":{"gitId":"jinnieshin"},"content":"        //assertEquals(expectedModel, model);","lastModifiedDate":"2023-03-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"    private static class JsonPatientistIoExceptionThrowingStub extends JsonPatientistStorage {","lastModifiedDate":"2023-03-09"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"        private JsonPatientistIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"        public void savePatientist(ReadOnlyPatientist patientist, Path filePath) throws IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"euph00":28,"-":124,"pzhengze":18,"jinnieshin":2}},{"path":"src/test/java/seedu/patientist/logic/commands/AddPatientCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_WARD_AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"public class AddPatientCommandIntegrationTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        expectedModel.addPatient(validPatient, expectedModel.getWard(VALID_WARD_AMY));","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(new AddPatientCommand(VALID_WARD_AMY, validPatient), model,","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), expectedModel);","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        Patient personInList \u003d (Patient) model.getPatientist().getPersonList().get(1);","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(new AddPatientCommand(\"Block A Ward 1\", personInList), model,","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"                AddPatientCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"euph00":8,"-":27,"pzhengze":13}},{"path":"src/test/java/seedu/patientist/logic/commands/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null, null));","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(\"Block A Ward 1\", validPatient).execute(modelStub);","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.personsAdded);","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(\"Block A Ward 1\", validPatient);","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPatient);","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        assertThrows(CommandException.class, AddPatientCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"                addPatientCommand.execute(modelStub));","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(\"Block A Ward 1\", alice);","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        AddPatientCommand addBobCommand \u003d new AddPatientCommand(\"Block A Ward 1\", bob);","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(\"Block A Ward 1\", alice);","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"        public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"        public void setPatientistFilePath(Path patientistFilePath) {","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"        public void setPatientist(ReadOnlyPatientist patientist) {","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"        public boolean hasPerson(Person person, Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"        public boolean hasPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"        public boolean hasStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"        public void deleteStaff(Staff target, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"        public void deletePatient(Patient target, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"        public void addPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"        public void addStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"        public void setPatient(Patient target, Patient edited) {","lastModifiedDate":"2023-03-16"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"        public void setStaff(Staff target, Staff edited) {","lastModifiedDate":"2023-03-16"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"        public void transferPatient(Patient patient, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"        public void transferStaff(Staff staff, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"        public void addWard(Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"        public void deleteWard(Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":198,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":199,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":200,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":201,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":202,"author":{"gitId":"euph00"},"content":"        public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-16"},{"lineNumber":203,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":204,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":205,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":206,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":207,"author":{"gitId":"pzhengze"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":208,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":209,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":210,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":211,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":212,"author":{"gitId":"lukkesreysandeur"},"content":"        public List\u003cString\u003e getWardNames() {","lastModifiedDate":"2023-03-29"},{"lineNumber":213,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-29"},{"lineNumber":214,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":215,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":257,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":258,"author":{"gitId":"pzhengze"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":259,"author":{"gitId":"pzhengze"},"content":"            return true;","lastModifiedDate":"2023-03-25"},{"lineNumber":260,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":261,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":262,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":263,"author":{"gitId":"pzhengze"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":264,"author":{"gitId":"pzhengze"},"content":"            return new Ward(wardName);","lastModifiedDate":"2023-03-25"},{"lineNumber":265,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":266,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":267,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":268,"author":{"gitId":"pzhengze"},"content":"        public void addPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":269,"author":{"gitId":"pzhengze"},"content":"            personsAdded.add(patient);","lastModifiedDate":"2023-03-25"},{"lineNumber":270,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":273,"author":{"gitId":"euph00"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-09"},{"lineNumber":274,"author":{"gitId":"euph00"},"content":"            return new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"lukkesreysandeur":6,"euph00":85,"-":147,"pzhengze":39}},{"path":"src/test/java/seedu/patientist/logic/commands/AddPatientStatusCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.CHARLIE;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"public class AddPatientStatusCommandTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        List\u003cPatientStatusDetails\u003e newStatus \u003d List.of(new PatientStatusDetails(\"Feeling ok\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        AddPatientStatusCommand addCommand \u003d new AddPatientStatusCommand(INDEX_SECOND_PERSON, newStatus);","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        Patient editedPatient \u003d new PatientBuilder(AMY).withStatus(\"Doing fine\", \"Feeling ok\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"                String.format(AddPatientStatusCommand.MESSAGE_ADD_STATUS_SUCCESS, newStatus, editedPatient);","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d (Patientist) expectedModel.getPatientist();","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        patientist.removePerson(expectedModel.getFilteredPersonList().get(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        expectedModel.addPatient(editedPatient, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(addCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        List\u003cPatientStatusDetails\u003e newStatus \u003d List.of(new PatientStatusDetails(\"Feeling ok\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        AddPatientStatusCommand addCommand \u003d new AddPatientStatusCommand(INDEX_FIRST_PERSON, newStatus);","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        Patient editedPatient \u003d new PatientBuilder(CHARLIE).withStatus(\"Doing good\", \"Feeling ok\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"                String.format(AddPatientStatusCommand.MESSAGE_ADD_STATUS_SUCCESS, newStatus, editedPatient);","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(expectedModel, INDEX_THIRD_PERSON);","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d (Patientist) expectedModel.getPatientist();","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"        patientist.removePerson(expectedModel.getFilteredPersonList().get(0));","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        expectedModel.addPatient(editedPatient, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(addCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        AddPatientStatusCommand addPatientStatusCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"                new AddPatientStatusCommand(outOfBoundIndex, List.of(new PatientStatusDetails(\"Doing fine\")));","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(addPatientStatusCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"     * but smaller than size of patientist book","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"        // ensures that outOfBoundIndex is still in bounds of patientist book list","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientist().getPersonList().size());","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"        AddPatientStatusCommand addPatientStatusCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"                new AddPatientStatusCommand(outOfBoundIndex, List.of(new PatientStatusDetails(\"Doing fine\")));","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(addPatientStatusCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"        List\u003cPatientStatusDetails\u003e status \u003d List.of(new PatientStatusDetails(\"Doing fine\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"        final AddPatientStatusCommand standardCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"                new AddPatientStatusCommand(INDEX_FIRST_PERSON, status);","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"pzhengze"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"pzhengze"},"content":"        AddPatientStatusCommand commandWithSameValues \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"                new AddPatientStatusCommand(INDEX_FIRST_PERSON, List.of(new PatientStatusDetails(\"Doing fine\")));","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"pzhengze"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"pzhengze"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(new AddPatientStatusCommand(INDEX_SECOND_PERSON, status)));","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"pzhengze"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(new AddPatientStatusCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"pzhengze"},"content":"                List.of(new PatientStatusDetails(\"Not doing fine\")))));","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":126}},{"path":"src/test/java/seedu/patientist/logic/commands/AddStaffCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalWards.VALID_WARD_NAME;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"public class AddStaffCommandTest {","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddStaffCommand(VALID_WARD_NAME, null));","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    public void execute_staffAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        ModelStubAcceptingStaffAdded modelStub \u003d new ModelStubAcceptingStaffAdded();","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff validStaff \u003d new StaffBuilder().build();","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        CommandResult commandResult \u003d new AddStaffCommand(VALID_WARD_NAME, validStaff).execute(modelStub);","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        assertEquals(String.format(AddStaffCommand.MESSAGE_SUCCESS, validStaff), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        assertEquals(Arrays.asList(validStaff), modelStub.staffAdded);","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff validStaff \u003d new StaffBuilder().build();","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        AddStaffCommand addStaffCommand \u003d new AddStaffCommand(VALID_WARD_NAME, validStaff);","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validStaff);","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"                AddStaffCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addStaffCommand.execute(modelStub));","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff alex \u003d new StaffBuilder().withName(\"Alex\").build();","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff billy \u003d new StaffBuilder().withName(\"Billy\").build();","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"        AddStaffCommand addStaffAlexCommand \u003d new AddStaffCommand(VALID_WARD_NAME, alex);","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        AddStaffCommand addStaffBillyCommand \u003d new AddStaffCommand(VALID_WARD_NAME, billy);","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(addStaffAlexCommand.equals(addStaffAlexCommand));","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"        AddStaffCommand addStaffAlexCommandCopy \u003d new AddStaffCommand(VALID_WARD_NAME, alex);","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(addStaffAlexCommand.equals(addStaffAlexCommandCopy));","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(addStaffAlexCommand.equals(1));","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(addStaffAlexCommand.equals(null));","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":80,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":81,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(addStaffAlexCommand.equals(addStaffBillyCommand));","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"lukkesreysandeur"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"lukkesreysandeur"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"lukkesreysandeur"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"lukkesreysandeur"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":97,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":98,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":99,"author":{"gitId":"lukkesreysandeur"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-03-16"},{"lineNumber":100,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":101,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"lukkesreysandeur"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":107,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":108,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":109,"author":{"gitId":"lukkesreysandeur"},"content":"        public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-16"},{"lineNumber":110,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":111,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":112,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":113,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":114,"author":{"gitId":"lukkesreysandeur"},"content":"        public void setPatientistFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-03-16"},{"lineNumber":115,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":116,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":117,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":118,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":119,"author":{"gitId":"lukkesreysandeur"},"content":"        public void setPatientist(ReadOnlyPatientist patientist) {","lastModifiedDate":"2023-03-16"},{"lineNumber":120,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":121,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":122,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":123,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":124,"author":{"gitId":"lukkesreysandeur"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-16"},{"lineNumber":125,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":126,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":127,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":128,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":129,"author":{"gitId":"lukkesreysandeur"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-16"},{"lineNumber":130,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":131,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":132,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"        public boolean hasPerson(Person person, Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"        public boolean hasPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"        public boolean hasStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":148,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"        public void deleteStaff(Staff target, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":150,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":151,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":152,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"        public void deletePatient(Patient target, Ward ward) {","lastModifiedDate":"2023-03-20"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"        public void addPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"        public void addStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"        public void setPatient(Patient target, Patient edited) {","lastModifiedDate":"2023-03-16"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"        public void setStaff(Staff target, Staff edited) {","lastModifiedDate":"2023-03-16"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":176,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":178,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"        public void transferPatient(Patient patient, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-20"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"        public void transferStaff(Staff staff, Ward original, Ward target) {","lastModifiedDate":"2023-03-20"},{"lineNumber":186,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":188,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":189,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"        public void addWard(Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":198,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":199,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":200,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":201,"author":{"gitId":"euph00"},"content":"        public void deleteWard(Ward ward) {","lastModifiedDate":"2023-03-16"},{"lineNumber":202,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":203,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":204,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":205,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":206,"author":{"gitId":"euph00"},"content":"        public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-16"},{"lineNumber":207,"author":{"gitId":"euph00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":208,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":209,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":210,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":211,"author":{"gitId":"pzhengze"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":212,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":213,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":214,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":215,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":216,"author":{"gitId":"lukkesreysandeur"},"content":"        public List\u003cString\u003e getWardNames() {","lastModifiedDate":"2023-03-29"},{"lineNumber":217,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-29"},{"lineNumber":218,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":219,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":220,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":221,"author":{"gitId":"lukkesreysandeur"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-03-16"},{"lineNumber":222,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":223,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":224,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":225,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":226,"author":{"gitId":"lukkesreysandeur"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-03-16"},{"lineNumber":227,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-16"},{"lineNumber":228,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":229,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":230,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":231,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":232,"author":{"gitId":"lukkesreysandeur"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2023-03-16"},{"lineNumber":233,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":234,"author":{"gitId":"lukkesreysandeur"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2023-03-16"},{"lineNumber":235,"author":{"gitId":"lukkesreysandeur"},"content":"        private final Staff staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":236,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":237,"author":{"gitId":"lukkesreysandeur"},"content":"        ModelStubWithPerson(Staff staff) {","lastModifiedDate":"2023-03-16"},{"lineNumber":238,"author":{"gitId":"lukkesreysandeur"},"content":"            requireNonNull(staff);","lastModifiedDate":"2023-03-16"},{"lineNumber":239,"author":{"gitId":"lukkesreysandeur"},"content":"            this.staff \u003d staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":240,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":241,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":242,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":243,"author":{"gitId":"lukkesreysandeur"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-16"},{"lineNumber":244,"author":{"gitId":"lukkesreysandeur"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-03-16"},{"lineNumber":245,"author":{"gitId":"lukkesreysandeur"},"content":"            return this.staff.isSamePerson(person);","lastModifiedDate":"2023-03-16"},{"lineNumber":246,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":247,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":248,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":249,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":250,"author":{"gitId":"lukkesreysandeur"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2023-03-16"},{"lineNumber":251,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":252,"author":{"gitId":"lukkesreysandeur"},"content":"    private class ModelStubAcceptingStaffAdded extends ModelStub {","lastModifiedDate":"2023-03-16"},{"lineNumber":253,"author":{"gitId":"lukkesreysandeur"},"content":"        final ArrayList\u003cStaff\u003e staffAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-16"},{"lineNumber":254,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":255,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":256,"author":{"gitId":"lukkesreysandeur"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-16"},{"lineNumber":257,"author":{"gitId":"lukkesreysandeur"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-03-16"},{"lineNumber":258,"author":{"gitId":"lukkesreysandeur"},"content":"            return staffAdded.stream().anyMatch(x -\u003e x.isSamePerson(person));","lastModifiedDate":"2023-03-16"},{"lineNumber":259,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":260,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":261,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":262,"author":{"gitId":"lukkesreysandeur"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-28"},{"lineNumber":263,"author":{"gitId":"lukkesreysandeur"},"content":"            requireNonNull(ward);","lastModifiedDate":"2023-03-28"},{"lineNumber":264,"author":{"gitId":"lukkesreysandeur"},"content":"            return true;","lastModifiedDate":"2023-03-28"},{"lineNumber":265,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":266,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":267,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":268,"author":{"gitId":"lukkesreysandeur"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-28"},{"lineNumber":269,"author":{"gitId":"lukkesreysandeur"},"content":"            return new Ward(wardName);","lastModifiedDate":"2023-03-28"},{"lineNumber":270,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":271,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":272,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":273,"author":{"gitId":"lukkesreysandeur"},"content":"        public void addStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-28"},{"lineNumber":274,"author":{"gitId":"lukkesreysandeur"},"content":"            staffAdded.add(staff);","lastModifiedDate":"2023-03-28"},{"lineNumber":275,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":276,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":277,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":278,"author":{"gitId":"lukkesreysandeur"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-16"},{"lineNumber":279,"author":{"gitId":"lukkesreysandeur"},"content":"            return new Patientist();","lastModifiedDate":"2023-03-16"},{"lineNumber":280,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":281,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":282,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-16"},{"lineNumber":283,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"lukkesreysandeur":205,"euph00":71,"pzhengze":7}},{"path":"src/test/java/seedu/patientist/logic/commands/AddWardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.WardBuilder;","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"public class AddWardCommandTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddWardCommand(null));","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    public void execute_wardAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        ModelStubAcceptingWardAdded modelStub \u003d new ModelStubAcceptingWardAdded();","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        Ward validWard \u003d new WardBuilder().build();","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        CommandResult commandResult \u003d new AddWardCommand(validWard).execute(modelStub);","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        assertEquals(String.format(AddWardCommand.MESSAGE_SUCCESS, validWard), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(validWard), modelStub.wardsAdded);","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    public void execute_duplicateWard_throwsCommandException() {","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        Ward validWard \u003d new WardBuilder().build();","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        AddWardCommand addWardCommand \u003d new AddWardCommand(validWard);","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        ModelStub modelStub \u003d new ModelStubWithWard(validWard);","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"        assertThrows(CommandException.class, AddWardCommand.MESSAGE_DUPLICATE_WARD, () -\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"                addWardCommand.execute(modelStub));","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        Ward ward1 \u003d new WardBuilder().withName(\"Ward1\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        Ward ward2 \u003d new WardBuilder().withName(\"Ward2\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        AddWardCommand addWardCommand1 \u003d new AddWardCommand(ward1);","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        AddWardCommand addWardCommand2 \u003d new AddWardCommand(ward2);","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"        assertTrue(addWardCommand1.equals(addWardCommand1));","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        AddWardCommand addWardCommandCopy \u003d new AddWardCommand(ward1);","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        assertTrue(addWardCommand1.equals(addWardCommandCopy));","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        assertFalse(addWardCommand1.equals(1));","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"        assertFalse(addWardCommand1.equals(null));","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"        assertFalse(addWardCommand1.equals(addWardCommand2));","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"pzhengze"},"content":"        public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"        public void setPatientistFilePath(Path patientistFilePath) {","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"pzhengze"},"content":"        public void setPatientist(ReadOnlyPatientist patientist) {","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"pzhengze"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"pzhengze"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"pzhengze"},"content":"        public boolean hasPerson(Person person, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"pzhengze"},"content":"        public boolean hasPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":137,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"pzhengze"},"content":"        public boolean hasStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":143,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":144,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":145,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":146,"author":{"gitId":"pzhengze"},"content":"        public void deleteStaff(Staff target, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":147,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":148,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":149,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":150,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"pzhengze"},"content":"        public void deletePatient(Patient target, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":152,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":153,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":154,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":155,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":156,"author":{"gitId":"pzhengze"},"content":"        public void addPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":158,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"pzhengze"},"content":"        public void addStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":162,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":166,"author":{"gitId":"pzhengze"},"content":"        public void setPatient(Patient target, Patient edited) {","lastModifiedDate":"2023-03-25"},{"lineNumber":167,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":169,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":170,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":171,"author":{"gitId":"pzhengze"},"content":"        public void setStaff(Staff target, Staff edited) {","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":173,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":174,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":176,"author":{"gitId":"pzhengze"},"content":"        public void transferPatient(Patient patient, Ward original, Ward target) {","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":179,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":180,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"pzhengze"},"content":"        public void transferStaff(Staff staff, Ward original, Ward target) {","lastModifiedDate":"2023-03-25"},{"lineNumber":182,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":183,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":185,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":186,"author":{"gitId":"pzhengze"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":187,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":188,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":189,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":190,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":191,"author":{"gitId":"pzhengze"},"content":"        public void addWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":192,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":193,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":194,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":195,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":196,"author":{"gitId":"pzhengze"},"content":"        public void deleteWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":197,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":198,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":199,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":200,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":201,"author":{"gitId":"pzhengze"},"content":"        public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-25"},{"lineNumber":202,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":203,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":204,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":205,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":206,"author":{"gitId":"pzhengze"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":207,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":208,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":209,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":210,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":211,"author":{"gitId":"lukkesreysandeur"},"content":"        public List\u003cString\u003e getWardNames() {","lastModifiedDate":"2023-03-29"},{"lineNumber":212,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-29"},{"lineNumber":213,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":214,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":215,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":216,"author":{"gitId":"pzhengze"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-03-25"},{"lineNumber":217,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":218,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":219,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":220,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":221,"author":{"gitId":"pzhengze"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-03-25"},{"lineNumber":222,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":223,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":224,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":225,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":226,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":227,"author":{"gitId":"pzhengze"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2023-03-25"},{"lineNumber":228,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":229,"author":{"gitId":"pzhengze"},"content":"    private class ModelStubWithWard extends ModelStub {","lastModifiedDate":"2023-03-25"},{"lineNumber":230,"author":{"gitId":"pzhengze"},"content":"        private final Ward ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":231,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":232,"author":{"gitId":"pzhengze"},"content":"        ModelStubWithWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":233,"author":{"gitId":"pzhengze"},"content":"            requireNonNull(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":234,"author":{"gitId":"pzhengze"},"content":"            this.ward \u003d ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":235,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":236,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":237,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":238,"author":{"gitId":"pzhengze"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":239,"author":{"gitId":"pzhengze"},"content":"            requireNonNull(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":240,"author":{"gitId":"pzhengze"},"content":"            return this.ward.equals(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":241,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":242,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":243,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":244,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":245,"author":{"gitId":"pzhengze"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2023-03-25"},{"lineNumber":246,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":247,"author":{"gitId":"pzhengze"},"content":"    private class ModelStubAcceptingWardAdded extends ModelStub {","lastModifiedDate":"2023-03-25"},{"lineNumber":248,"author":{"gitId":"pzhengze"},"content":"        final ArrayList\u003cWard\u003e wardsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":249,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":250,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":251,"author":{"gitId":"pzhengze"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":252,"author":{"gitId":"pzhengze"},"content":"            return false;","lastModifiedDate":"2023-03-25"},{"lineNumber":253,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":254,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":255,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":256,"author":{"gitId":"pzhengze"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":257,"author":{"gitId":"pzhengze"},"content":"            return new Ward(wardName);","lastModifiedDate":"2023-03-25"},{"lineNumber":258,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":259,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":260,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":261,"author":{"gitId":"pzhengze"},"content":"        public void addWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":262,"author":{"gitId":"pzhengze"},"content":"            wardsAdded.add(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":263,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":264,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":265,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":266,"author":{"gitId":"pzhengze"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-25"},{"lineNumber":267,"author":{"gitId":"pzhengze"},"content":"            return new Patientist();","lastModifiedDate":"2023-03-25"},{"lineNumber":268,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":269,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":270,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"lukkesreysandeur":6,"pzhengze":264}},{"path":"src/test/java/seedu/patientist/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        expectedModel.setPatientist(new Patientist());","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"euph00":9,"-":22,"pzhengze":2}},{"path":"src/test/java/seedu/patientist/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", -1, false, false, false)));","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", -1, false, true, false)));","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", -1, false, false, true)));","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", -1, false, true, false).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", -1, false, false, true).hashCode());","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"euph00":1,"-":48,"pzhengze":5}},{"path":"src/test/java/seedu/patientist/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    public static final String VALID_PID_AMY \u003d \"A12345678B\";","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    public static final String VALID_PID_BOB \u003d \"Y78932734N\";","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"    public static final String VALID_STATUS_AMY \u003d \"Doing fine\";","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    public static final String VALID_STATUS_BOB \u003d \"Feeling dizzy\";","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    public static final String VALID_TODO_AMY \u003d \"Take medicine\";","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    public static final String VALID_TODO_BOB \u003d \"Physiotherapy at 2pm\";","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    public static final String VALID_WARD_AMY \u003d \"Block A Ward 1\";","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    public static final String VALID_WARD_BOB \u003d \"Block B Ward 2\";","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"    public static final String VALID_PRIORITY_AMY \u003d \"HIGH\";","lastModifiedDate":"2023-03-31"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"    public static final String VALID_PRIORITY_BOB \u003d \"LOW\";","lastModifiedDate":"2023-03-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String PID_DESC_AMY \u003d \" \" + PREFIX_ID + VALID_PID_AMY;","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String PID_DESC_BOB \u003d \" \" + PREFIX_ID + VALID_PID_BOB;","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_STATUS + VALID_STATUS_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_STATUS + VALID_STATUS_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"    public static final String WARD_DESC_AMY \u003d \" \" + PREFIX_WARD + VALID_WARD_AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"    public static final String WARD_DESC_BOB \u003d \" \" + PREFIX_WARD + VALID_WARD_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"jinnieshin"},"content":"    public static final String PRIORITY_DESC_AMY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_AMY;","lastModifiedDate":"2023-03-31"},{"lineNumber":74,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":75,"author":{"gitId":"jinnieshin"},"content":"    public static final String PRIORITY_DESC_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_BOB;","lastModifiedDate":"2023-03-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String INVALID_PID_DESC \u003d \" \" + PREFIX_ID + \"@3544\"; // PID must be alnum","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"    public static final String INVALID_WARD_DESC \u003d \" \" + PREFIX_ID + \"\"; // PID must be alnum","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"jinnieshin"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY","lastModifiedDate":"2023-03-31"},{"lineNumber":85,"author":{"gitId":"jinnieshin"},"content":"            + \"low\"; //Priority must be in capital letters","lastModifiedDate":"2023-03-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"            actualModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"     * - the patientist book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"        Patientist expectedPatientist \u003d new Patientist(actualModel.getPatientist());","lastModifiedDate":"2023-03-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"        assertEquals(expectedPatientist, actualModel.getPatientist());","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"     * {@code model}\u0027s patientist book.","lastModifiedDate":"2023-03-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"lukkesreysandeur":4,"euph00":20,"-":110,"pzhengze":16,"jinnieshin":9}},{"path":"src/test/java/seedu/patientist/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        expectedModel.deleteStaff((Staff) personToDelete, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        expectedModel.deleteStaff((Staff) personToDelete, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        // ensures that outOfBoundIndex is still in bounds of patientist book list","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientist().getPersonList().size());","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"euph00":17,"-":89,"pzhengze":6}},{"path":"src/test/java/seedu/patientist/logic/commands/DeletePatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.IsPatientPredicate;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeletePatientCommandTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    public void execute_validId_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        model.updateFilteredPersonList(new IsPatientPredicate());","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idToDelete \u003d personToDelete.getIdNumber();","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(idToDelete);","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_ID_SUCCESS, idToDelete);","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.deletePatient((Patient) personToDelete, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.updateFilteredPersonList(new IsPatientPredicate());","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public void execute_invalidId_throwCommandException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber invalidId \u003d new IdNumber(\"FAK3\");","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(invalidId);","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_PATIENT_ID_NOT_FOUND, invalidId);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        assertCommandFailure(deletePatientCommand, model, expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber id1 \u003d new IdNumber(\"test1\");","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber id2 \u003d new IdNumber(\"test2\");","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        DeletePatientCommand deletePatientCommand1 \u003d new DeletePatientCommand(id1);","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        DeletePatientCommand deletePatientCommand2 \u003d new DeletePatientCommand(id2);","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        DeletePatientCommand deletePatientCommand3 \u003d new DeletePatientCommand(id1);","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        DeleteStaffCommand deleteStaffCommand \u003d new DeleteStaffCommand(id1);","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(deletePatientCommand1.equals(deletePatientCommand1));","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        // same id number -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(deletePatientCommand1.equals(deletePatientCommand3));","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deletePatientCommand2.equals(3));","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deletePatientCommand1.equals(null));","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        // different id number -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deletePatientCommand2.equals(deletePatientCommand3));","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deletePatientCommand2.equals(deletePatientCommand1));","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"        // same id number different class","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deletePatientCommand1.equals(deleteStaffCommand));","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deletePatientCommand2.equals(deleteStaffCommand));","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":79}},{"path":"src/test/java/seedu/patientist/logic/commands/DeletePatientStatusCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.CHARLIE;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"public class DeletePatientStatusCommandTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        DeletePatientStatusCommand deletePatientStatusCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"                new DeletePatientStatusCommand(INDEX_SECOND_PERSON, Index.fromOneBased(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        Patient editedPatient \u003d new PatientBuilder(AMY).withStatus().build();","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"                String.format(DeletePatientStatusCommand.MESSAGE_DELETE_STATUS_SUCCESS, 1, editedPatient);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d (Patientist) expectedModel.getPatientist();","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        patientist.removePerson(expectedModel.getFilteredPersonList().get(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        expectedModel.addPatient(editedPatient, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(deletePatientStatusCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        DeletePatientStatusCommand deletePatientStatusCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"                new DeletePatientStatusCommand(INDEX_FIRST_PERSON, Index.fromOneBased(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        Patient editedPatient \u003d new PatientBuilder(CHARLIE).withStatus().build();","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"                String.format(DeletePatientStatusCommand.MESSAGE_DELETE_STATUS_SUCCESS, 1, editedPatient);","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(expectedModel, INDEX_THIRD_PERSON);","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d (Patientist) expectedModel.getPatientist();","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"        patientist.removePerson(expectedModel.getFilteredPersonList().get(0));","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"        expectedModel.addPatient(editedPatient, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(deletePatientStatusCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        DeletePatientStatusCommand deletePatientStatusCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"                new DeletePatientStatusCommand(outOfBoundIndex, Index.fromOneBased(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(deletePatientStatusCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"     * but smaller than size of patientist book","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"        // ensures that outOfBoundIndex is still in bounds of patientist book list","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientist().getPersonList().size());","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"        DeletePatientStatusCommand deletePatientStatusCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"                new DeletePatientStatusCommand(outOfBoundIndex, Index.fromOneBased(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(deletePatientStatusCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"        final DeletePatientStatusCommand standardCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"                new DeletePatientStatusCommand(INDEX_FIRST_PERSON, Index.fromOneBased(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"        DeletePatientStatusCommand commandWithSameValues \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"                new DeletePatientStatusCommand(INDEX_FIRST_PERSON, Index.fromOneBased(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(new DeletePatientStatusCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"pzhengze"},"content":"                Index.fromOneBased(1))));","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"pzhengze"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"pzhengze"},"content":"        assertFalse(standardCommand.equals(new DeletePatientStatusCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"pzhengze"},"content":"                Index.fromOneBased(2))));","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":123}},{"path":"src/test/java/seedu/patientist/logic/commands/DeleteStaffCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.IsStaffPredicate;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeleteStaffCommandTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    public void execute_validId_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        model.updateFilteredPersonList(new IsStaffPredicate());","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idToDelete \u003d personToDelete.getIdNumber();","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        DeleteStaffCommand deleteStaffCommand \u003d new DeleteStaffCommand(idToDelete);","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(DeleteStaffCommand.MESSAGE_DELETE_STAFF_ID_SUCCESS, idToDelete);","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.deleteStaff((Staff) personToDelete, expectedModel.getWard(\"Block A Ward 1\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.updateFilteredPersonList(new IsStaffPredicate());","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertCommandSuccess(deleteStaffCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public void execute_invalidId_throwCommandException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber invalidId \u003d new IdNumber(\"FAK3\");","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        DeleteStaffCommand deleteStaffCommand \u003d new DeleteStaffCommand(invalidId);","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(DeleteStaffCommand.MESSAGE_STAFF_ID_NOT_FOUND, invalidId);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        assertCommandFailure(deleteStaffCommand, model, expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber id1 \u003d new IdNumber(\"test1\");","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber id2 \u003d new IdNumber(\"test2\");","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        DeleteStaffCommand deleteStaffCommand1 \u003d new DeleteStaffCommand(id1);","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        DeleteStaffCommand deleteStaffCommand2 \u003d new DeleteStaffCommand(id2);","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        DeleteStaffCommand deleteStaffCommand3 \u003d new DeleteStaffCommand(id1);","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(id1);","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(deleteStaffCommand1.equals(deleteStaffCommand1));","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        // same id number -\u003e returns true","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(deleteStaffCommand1.equals(deleteStaffCommand3));","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deleteStaffCommand2.equals(3));","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deleteStaffCommand1.equals(null));","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        // different id number -\u003e returns false","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deleteStaffCommand2.equals(deleteStaffCommand3));","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deleteStaffCommand2.equals(deleteStaffCommand1));","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"        // same id number different class","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deleteStaffCommand1.equals(deletePatientCommand));","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(deleteStaffCommand2.equals(deletePatientCommand));","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":78}},{"path":"src/test/java/seedu/patientist/logic/commands/DeleteWardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.WardBuilder;","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"public class DeleteWardCommandTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddWardCommand(null));","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    public void execute_wardDeletedByModel_deleteSuccessful() throws Exception {","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d new Ward(\"Ward1\");","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        ModelStubAcceptingWardAdded modelStub \u003d new ModelStubAcceptingWardAdded(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        CommandResult commandResult \u003d new DeleteWardCommand(\"Ward1\").execute(modelStub);","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        assertEquals(String.format(DeleteWardCommand.MESSAGE_DELETE_WARD_SUCCESS, ward),","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(), modelStub.wardsAdded);","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    public void execute_wardNotEmpty_throwsCommandException() {","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        Ward validWard \u003d new WardBuilder().withName(\"Ward1\").withPatient(BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        DeleteWardCommand deleteWardCommand \u003d new DeleteWardCommand(validWard.getWardName());","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        ModelStub modelStub \u003d new ModelStubAcceptingWardAdded(validWard);","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        assertThrows(CommandException.class, DeleteWardCommand.MESSAGE_NON_EMPTY_WARD, () -\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"                deleteWardCommand.execute(modelStub));","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"        DeleteWardCommand deleteWardCommand1 \u003d new DeleteWardCommand(\"ward1\");","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"        DeleteWardCommand deleteWardCommand2 \u003d new DeleteWardCommand(\"ward2\");","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        assertTrue(deleteWardCommand1.equals(deleteWardCommand1));","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        DeleteWardCommand deleteWardCommandCopy \u003d new DeleteWardCommand(\"ward1\");","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        assertTrue(deleteWardCommand1.equals(deleteWardCommandCopy));","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        assertFalse(deleteWardCommand1.equals(1));","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"        assertFalse(deleteWardCommand1.equals(null));","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"        assertFalse(deleteWardCommand1.equals(deleteWardCommand2));","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"pzhengze"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"        public Path getPatientistFilePath() {","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"pzhengze"},"content":"        public void setPatientistFilePath(Path patientistFilePath) {","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"pzhengze"},"content":"        public void setPatientist(ReadOnlyPatientist patientist) {","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"pzhengze"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"pzhengze"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"pzhengze"},"content":"        public boolean hasPerson(Person person, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":137,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"pzhengze"},"content":"        public boolean hasPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":143,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":144,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":145,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":146,"author":{"gitId":"pzhengze"},"content":"        public boolean hasStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":147,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":148,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":149,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":150,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"pzhengze"},"content":"        public void deleteStaff(Staff target, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":152,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":153,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":154,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":155,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":156,"author":{"gitId":"pzhengze"},"content":"        public void deletePatient(Patient target, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":158,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"pzhengze"},"content":"        public void addPatient(Patient patient, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":162,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":166,"author":{"gitId":"pzhengze"},"content":"        public void addStaff(Staff staff, Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":167,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":169,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":170,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":171,"author":{"gitId":"pzhengze"},"content":"        public void setPatient(Patient target, Patient edited) {","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":173,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":174,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":176,"author":{"gitId":"pzhengze"},"content":"        public void setStaff(Staff target, Staff edited) {","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":179,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":180,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"pzhengze"},"content":"        public void transferPatient(Patient patient, Ward original, Ward target) {","lastModifiedDate":"2023-03-25"},{"lineNumber":182,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":183,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":185,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":186,"author":{"gitId":"pzhengze"},"content":"        public void transferStaff(Staff staff, Ward original, Ward target) {","lastModifiedDate":"2023-03-25"},{"lineNumber":187,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":188,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":189,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":190,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":191,"author":{"gitId":"pzhengze"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":192,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":193,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":194,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":195,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":196,"author":{"gitId":"pzhengze"},"content":"        public void addWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":197,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":198,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":199,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":200,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":201,"author":{"gitId":"pzhengze"},"content":"        public void deleteWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":202,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":203,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":204,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":205,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":206,"author":{"gitId":"pzhengze"},"content":"        public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-25"},{"lineNumber":207,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":208,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":209,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":210,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":211,"author":{"gitId":"pzhengze"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":212,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":213,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":214,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":215,"author":{"gitId":"lukkesreysandeur"},"content":"        @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":216,"author":{"gitId":"lukkesreysandeur"},"content":"        public List\u003cString\u003e getWardNames() {","lastModifiedDate":"2023-03-29"},{"lineNumber":217,"author":{"gitId":"lukkesreysandeur"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-29"},{"lineNumber":218,"author":{"gitId":"lukkesreysandeur"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":219,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":220,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":221,"author":{"gitId":"pzhengze"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-03-25"},{"lineNumber":222,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":223,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":224,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":225,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":226,"author":{"gitId":"pzhengze"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-03-25"},{"lineNumber":227,"author":{"gitId":"pzhengze"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-25"},{"lineNumber":228,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":229,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":230,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":231,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":232,"author":{"gitId":"pzhengze"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2023-03-25"},{"lineNumber":233,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":234,"author":{"gitId":"pzhengze"},"content":"    private class ModelStubAcceptingWardAdded extends ModelStub {","lastModifiedDate":"2023-03-25"},{"lineNumber":235,"author":{"gitId":"pzhengze"},"content":"        final ArrayList\u003cWard\u003e wardsAdded;","lastModifiedDate":"2023-03-25"},{"lineNumber":236,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":237,"author":{"gitId":"pzhengze"},"content":"        ModelStubAcceptingWardAdded(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":238,"author":{"gitId":"pzhengze"},"content":"            requireNonNull(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":239,"author":{"gitId":"pzhengze"},"content":"            this.wardsAdded \u003d new ArrayList\u003c\u003e(Arrays.asList(ward));","lastModifiedDate":"2023-03-25"},{"lineNumber":240,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":241,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":242,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":243,"author":{"gitId":"pzhengze"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":244,"author":{"gitId":"pzhengze"},"content":"            return true;","lastModifiedDate":"2023-03-25"},{"lineNumber":245,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":246,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":247,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":248,"author":{"gitId":"pzhengze"},"content":"        public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-25"},{"lineNumber":249,"author":{"gitId":"pzhengze"},"content":"            return wardsAdded.get(0);","lastModifiedDate":"2023-03-25"},{"lineNumber":250,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":251,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":252,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":253,"author":{"gitId":"pzhengze"},"content":"        public void deleteWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":254,"author":{"gitId":"pzhengze"},"content":"            wardsAdded.remove(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":255,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":256,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":257,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":258,"author":{"gitId":"pzhengze"},"content":"        public ReadOnlyPatientist getPatientist() {","lastModifiedDate":"2023-03-25"},{"lineNumber":259,"author":{"gitId":"pzhengze"},"content":"            return new Patientist();","lastModifiedDate":"2023-03-25"},{"lineNumber":260,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":261,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":262,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"lukkesreysandeur":6,"pzhengze":256}},{"path":"src/test/java/seedu/patientist/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(new StaffBuilder().build()).build();","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        Staff editedStaff \u003d","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"                new StaffBuilder().withIdNumber(model.getFilteredPersonList().get(0).getIdNumber().toString()).build();","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStaff);","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        expectedModel.setStaff((Staff) model.getFilteredPersonList().get(0), editedStaff);","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        PatientBuilder personInList \u003d new PatientBuilder((Patient) lastPerson);","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        Patient editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        expectedModel.setPatient((Patient) lastPerson, editedPerson);","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"        Model expectedModel \u003d new ModelManager(new Patientist(model.getPatientist()), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        Staff editedStaff \u003d new StaffBuilder((Staff) personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStaff);","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"pzhengze"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"        expectedModel.setStaff((Staff) model.getFilteredPersonList().get(0), editedStaff);","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"     * but smaller than size of patientist book","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"        // ensures that outOfBoundIndex is still in bounds of patientist book list","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientist().getPersonList().size());","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"euph00":25,"-":110,"pzhengze":24}},{"path":"src/test/java/seedu/patientist/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"        // different patientist -\u003e returns false","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"euph00":11,"-":47}},{"path":"src/test/java/seedu/patientist/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, -1, false, false, true);","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"euph00":5,"-":14,"pzhengze":1}},{"path":"src/test/java/seedu/patientist/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Amy Bob\");","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(AMY, BOB), model.getFilteredPersonList());","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"euph00":9,"-":67,"pzhengze":6}},{"path":"src/test/java/seedu/patientist/logic/commands/FindPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalPatients.ADAM;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"public class FindPatientCommandTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"        PatientNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"                new PatientNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        PatientNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"                new PatientNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        FindPatientCommand findFirstCommand \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        FindPatientCommand findSecondCommand \u003d new FindPatientCommand(secondPredicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        FindPatientCommand findFirstCommandCopy \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        PatientNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        PatientNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Amy Bob Adam\");","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(AMY, ADAM, BOB), model.getFilteredPersonList());","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"    private PatientNameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"        return new PatientNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"lukkesreysandeur":1,"euph00":1,"pzhengze":78}},{"path":"src/test/java/seedu/patientist/logic/commands/FindStaffCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.CHARLES;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.DACIA;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.StaffNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"public class FindStaffCommandTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        FindStaffCommand findFirstCommand \u003d new FindStaffCommand(firstPredicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        FindStaffCommand findSecondCommand \u003d new FindStaffCommand(secondPredicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        FindStaffCommand findFirstCommandCopy \u003d new FindStaffCommand(firstPredicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"        FindStaffCommand command \u003d new FindStaffCommand(predicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Dacia Charles\");","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        FindStaffCommand command \u003d new FindStaffCommand(predicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        assertEquals(Arrays.asList(CHARLES, DACIA), model.getFilteredPersonList());","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"    private StaffNameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"        return new StaffNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":79}},{"path":"src/test/java/seedu/patientist/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, -1, false, true, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"euph00":5,"-":14,"pzhengze":1}},{"path":"src/test/java/seedu/patientist/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        expectedModel \u003d new ModelManager(model.getPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"euph00":9,"-":29,"pzhengze":1}},{"path":"src/test/java/seedu/patientist/logic/commands/ListPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalPatients.ADAM;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.testutil.TypicalPatients.CHARLIE;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.IsPatientPredicate;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"public class ListPatientCommandTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        ListPatientsCommand findFirstCommand \u003d new ListPatientsCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"        ListPatientsCommand findSecondCommand \u003d new ListPatientsCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        // different object -\u003e returns true","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        assertTrue(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    public void execute_onlyPatients_found() {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        IsPatientPredicate predicate \u003d new IsPatientPredicate();","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        ListPatientsCommand command \u003d new ListPatientsCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(AMY, CHARLIE, ADAM, BOB), model.getFilteredPersonList());","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"lukkesreysandeur":1,"euph00":1,"GlennOngJunJie":1,"pzhengze":45}},{"path":"src/test/java/seedu/patientist/logic/commands/ListStaffCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.CHARLES;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.DACIA;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.IsStaffPredicate;","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"public class ListStaffCommandTest {","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        ListStaffCommand staffCommand1 \u003d new ListStaffCommand();","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        ListStaffCommand staffCommand2 \u003d new ListStaffCommand();","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        ListPatientsCommand patientsCommand \u003d new ListPatientsCommand();","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(staffCommand1.equals(staffCommand1));","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        // different object -\u003e returns true","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(staffCommand1.equals(staffCommand2));","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        // different class -\u003e returns false","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(staffCommand1.equals(patientsCommand));","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    public void execute_onlyStaff_found() {","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        IsStaffPredicate predicate \u003d new IsStaffPredicate();","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"        ListStaffCommand command \u003d new ListStaffCommand();","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(CHARLES, DACIA), model.getFilteredPersonList());","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"lukkesreysandeur":42,"pzhengze":8}},{"path":"src/test/java/seedu/patientist/logic/commands/ListWardPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.CHARLIE;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientInWardPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"public class ListWardPatientCommandTest {","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        ListWardPatientsCommand findFirstCommand \u003d new ListWardPatientsCommand(\"first\");","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"        ListWardPatientsCommand findSecondCommand \u003d new ListWardPatientsCommand(\"second\");","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        ListWardPatientsCommand findFirstCommandCopy \u003d new ListWardPatientsCommand(\"first\");","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        // different ward -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"    public void execute_zeroKeywords_failure() {","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        ListWardPatientsCommand command \u003d new ListWardPatientsCommand(\" \");","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(String.format(ListWardPatientsCommand.MESSAGE_WARD_NOT_FOUND, \" \"), 0);","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(command, model, expectedMessage);","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"    public void execute_onlyPatients_found() {","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        PatientInWardPredicate predicate \u003d new PatientInWardPredicate(model, \"Block A Ward 1\");","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        ListWardPatientsCommand command \u003d new ListWardPatientsCommand(\"Block A Ward 1\");","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        assertEquals(Arrays.asList(AMY, CHARLIE), model.getFilteredPersonList());","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"GlennOngJunJie":5,"pzhengze":59}},{"path":"src/test/java/seedu/patientist/logic/commands/ListWardStaffCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.testutil.TypicalStaff.CHARLES;","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.staff.StaffInWardPredicate;","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"public class ListWardStaffCommandTest {","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"    public void equals() {","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"        ListWardStaffCommand findFirstCommand \u003d new ListWardStaffCommand(\"first\");","lastModifiedDate":"2023-03-31"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"        ListWardStaffCommand findSecondCommand \u003d new ListWardStaffCommand(\"second\");","lastModifiedDate":"2023-03-31"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-31"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-03-31"},{"lineNumber":32,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":33,"author":{"gitId":"GlennOngJunJie"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-31"},{"lineNumber":34,"author":{"gitId":"GlennOngJunJie"},"content":"        ListWardStaffCommand findFirstCommandCopy \u003d new ListWardStaffCommand(\"first\");","lastModifiedDate":"2023-03-31"},{"lineNumber":35,"author":{"gitId":"GlennOngJunJie"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-03-31"},{"lineNumber":36,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":37,"author":{"gitId":"GlennOngJunJie"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-31"},{"lineNumber":38,"author":{"gitId":"GlennOngJunJie"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":40,"author":{"gitId":"GlennOngJunJie"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-31"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"        // different ward -\u003e returns false","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-03-31"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":47,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-31"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"    public void execute_zeroKeywords_failure() {","lastModifiedDate":"2023-03-31"},{"lineNumber":49,"author":{"gitId":"GlennOngJunJie"},"content":"        ListWardStaffCommand command \u003d new ListWardStaffCommand(\" \");","lastModifiedDate":"2023-03-31"},{"lineNumber":50,"author":{"gitId":"GlennOngJunJie"},"content":"        String expectedMessage \u003d String.format(String.format(ListWardStaffCommand.MESSAGE_WARD_NOT_FOUND, \" \"), 0);","lastModifiedDate":"2023-03-31"},{"lineNumber":51,"author":{"gitId":"GlennOngJunJie"},"content":"        assertCommandFailure(command, model, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":53,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":54,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"GlennOngJunJie"},"content":"    public void execute_onlyStaff_found() {","lastModifiedDate":"2023-03-31"},{"lineNumber":56,"author":{"gitId":"GlennOngJunJie"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2023-03-31"},{"lineNumber":57,"author":{"gitId":"GlennOngJunJie"},"content":"        StaffInWardPredicate predicate \u003d new StaffInWardPredicate(model, \"Block A Ward 1\");","lastModifiedDate":"2023-03-31"},{"lineNumber":58,"author":{"gitId":"GlennOngJunJie"},"content":"        ListWardStaffCommand command \u003d new ListWardStaffCommand(\"Block A Ward 1\");","lastModifiedDate":"2023-03-31"},{"lineNumber":59,"author":{"gitId":"GlennOngJunJie"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-03-31"},{"lineNumber":60,"author":{"gitId":"GlennOngJunJie"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-31"},{"lineNumber":61,"author":{"gitId":"GlennOngJunJie"},"content":"        assertEquals(Arrays.asList(CHARLES), model.getFilteredPersonList());","lastModifiedDate":"2023-03-31"},{"lineNumber":62,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":63,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"GlennOngJunJie":63}},{"path":"src/test/java/seedu/patientist/logic/commands/UpdatePatientWardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"public class UpdatePatientWardCommandTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"    public void execute_validIndexList_success() {","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"        Person personToBeUpdated \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"        UpdatePatientWardCommand updatePatientWardCommand \u003d new UpdatePatientWardCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"                \"Block A Ward 2\");","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"        String expectedMessage \u003d String.format(UpdatePatientWardCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"                INDEX_SECOND_PERSON.getOneBased(), \"Block A Ward 1\", \"Block A Ward 2\");","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"GlennOngJunJie"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"GlennOngJunJie"},"content":"        expectedModel.transferPatient((Patient) personToBeUpdated,","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"GlennOngJunJie"},"content":"                expectedModel.getWard(\"Block A Ward 1\"), expectedModel.getWard(\"Block A Ward 2\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"GlennOngJunJie"},"content":"        expectedModel.getPatientist().updatePersonList();","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"GlennOngJunJie"},"content":"        assertCommandSuccess(updatePatientWardCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"GlennOngJunJie"},"content":"    public void execute_invalidIndexList_throwsCommandException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"GlennOngJunJie"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"GlennOngJunJie"},"content":"        UpdatePatientWardCommand updatePatientWardCommand \u003d new UpdatePatientWardCommand(outOfBoundIndex,","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"GlennOngJunJie"},"content":"                \"Block A Ward 2\");","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"GlennOngJunJie"},"content":"        assertCommandFailure(updatePatientWardCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"GlennOngJunJie"},"content":"    public void execute_invalidWard_throwsCommandException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"GlennOngJunJie"},"content":"        Person personToBeUpdated \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"GlennOngJunJie"},"content":"        UpdatePatientWardCommand updatePatientWardCommand \u003d new UpdatePatientWardCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"GlennOngJunJie"},"content":"                \"Block C Ward 1\");","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"GlennOngJunJie"},"content":"        assertCommandFailure(updatePatientWardCommand, model,","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"GlennOngJunJie"},"content":"                String.format(updatePatientWardCommand.MESSAGE_WARD_NOT_FOUND, \"Block C Ward 1\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"GlennOngJunJie":56}},{"path":"src/test/java/seedu/patientist/logic/commands/ViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.commands;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.Messages;","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ModelManager;","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":" * {@code ViewCommand}.","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"public class ViewCommandTest {","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientist(), new UserPrefs());","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_PERSON_SUCCESS, personToView);","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, 0, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(viewCommand, model, expectedCommandResult, model);","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_PERSON_SUCCESS, personToView);","lastModifiedDate":"2023-03-20"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, 0, false, false, false);","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        assertCommandSuccess(viewCommand, model, expectedCommandResult, model);","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-20"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        // ensures that outOfBoundIndex is still in bounds of patientist book list","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientist().getPersonList().size());","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"pzhengze"},"content":"        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"pzhengze"},"content":"        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommand));","lastModifiedDate":"2023-03-20"},{"lineNumber":84,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-20"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-03-20"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));","lastModifiedDate":"2023-03-20"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"        assertFalse(viewFirstCommand.equals(1));","lastModifiedDate":"2023-03-20"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"        assertFalse(viewFirstCommand.equals(null));","lastModifiedDate":"2023-03-20"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        assertFalse(viewFirstCommand.equals(viewSecondCommand));","lastModifiedDate":"2023-03-20"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"pzhengze":98}},{"path":"src/test/java/seedu/patientist/logic/parser/AddPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_PID_DESC;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PID_DESC_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_WARD_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.WARD_DESC_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"public class AddPatientCommandParserTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(\"Patient\", VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"        //                + ADDRESS_DESC_BOB + PRIORITY_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + STATUS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"        //                + WARD_DESC_BOB, new AddPatientCommand(VALID_WARD_BOB, expectedPatient));","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"        //                + ADDRESS_DESC_BOB + PRIORITY_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + STATUS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"        //                + WARD_DESC_BOB, new AddPatientCommand(VALID_WARD_BOB, expectedPatient));","lastModifiedDate":"2023-03-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":63,"author":{"gitId":"jinnieshin"},"content":"        //                + ADDRESS_DESC_BOB + PRIORITY_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + STATUS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":64,"author":{"gitId":"jinnieshin"},"content":"        //                + WARD_DESC_BOB, new AddPatientCommand(VALID_WARD_BOB, expectedPatient));","lastModifiedDate":"2023-03-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":68,"author":{"gitId":"jinnieshin"},"content":"        //                + ADDRESS_DESC_BOB + PRIORITY_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + STATUS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":69,"author":{"gitId":"jinnieshin"},"content":"        //                + WARD_DESC_BOB, new AddPatientCommand(VALID_WARD_BOB, expectedPatient));","lastModifiedDate":"2023-03-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2023-03-31"},{"lineNumber":73,"author":{"gitId":"jinnieshin"},"content":"        //                + ADDRESS_DESC_BOB + PRIORITY_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + STATUS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":74,"author":{"gitId":"jinnieshin"},"content":"        //                + WARD_DESC_BOB, new AddPatientCommand(VALID_WARD_BOB, expectedPatient));","lastModifiedDate":"2023-03-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"jinnieshin"},"content":"        //        Patient expectedPatientMultipleTags \u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":78,"author":{"gitId":"jinnieshin"},"content":"        //                new PatientBuilder(BOB).withTags(\"Patient\", VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-31"},{"lineNumber":79,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":80,"author":{"gitId":"jinnieshin"},"content":"        //                + TAG_DESC_HUSBAND + PRIORITY_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + STATUS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":81,"author":{"gitId":"jinnieshin"},"content":"        //                + WARD_DESC_BOB, new AddPatientCommand(VALID_WARD_BOB, expectedPatientMultipleTags));","lastModifiedDate":"2023-03-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"pzhengze"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags(\"Patient\").build();","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseSuccess(parser, NAME_DESC_AMY + PID_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-03-31"},{"lineNumber":89,"author":{"gitId":"jinnieshin"},"content":"        //                + ADDRESS_DESC_AMY + PRIORITY_DESC_AMY + STATUS_DESC_AMY + WARD_DESC_AMY,","lastModifiedDate":"2023-03-31"},{"lineNumber":90,"author":{"gitId":"jinnieshin"},"content":"        //                new AddPatientCommand(VALID_WARD_AMY, expectedPatient));","lastModifiedDate":"2023-03-31"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-12"},{"lineNumber":100,"author":{"gitId":"jinnieshin"},"content":"                + PRIORITY_DESC_BOB + PID_DESC_BOB + WARD_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-12"},{"lineNumber":104,"author":{"gitId":"jinnieshin"},"content":"                + PRIORITY_DESC_BOB + PID_DESC_BOB + WARD_DESC_BOB , expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-12"},{"lineNumber":108,"author":{"gitId":"jinnieshin"},"content":"                + PRIORITY_DESC_BOB + PID_DESC_BOB + WARD_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"        // missing address prefix","lastModifiedDate":"2023-03-12"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2023-03-12"},{"lineNumber":112,"author":{"gitId":"jinnieshin"},"content":"                + PRIORITY_DESC_BOB + PID_DESC_BOB + WARD_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":114,"author":{"gitId":"pzhengze"},"content":"        // missing pid prefix","lastModifiedDate":"2023-03-12"},{"lineNumber":115,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-12"},{"lineNumber":116,"author":{"gitId":"jinnieshin"},"content":"                + PRIORITY_DESC_BOB + VALID_PID_BOB + WARD_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":117,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"pzhengze"},"content":"        // missing ward prefix","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"jinnieshin"},"content":"                + PRIORITY_DESC_BOB + PID_DESC_BOB + VALID_WARD_BOB, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":121,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":122,"author":{"gitId":"jinnieshin"},"content":"        // missing priority prefix","lastModifiedDate":"2023-03-31"},{"lineNumber":123,"author":{"gitId":"jinnieshin"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":124,"author":{"gitId":"jinnieshin"},"content":"                + VALID_PRIORITY_BOB + PID_DESC_BOB + WARD_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":127,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2023-03-12"},{"lineNumber":128,"author":{"gitId":"jinnieshin"},"content":"                + VALID_PRIORITY_BOB + VALID_PID_BOB + VALID_WARD_BOB, expectedMessage);","lastModifiedDate":"2023-03-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"jinnieshin"},"content":"                        + PRIORITY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-31"},{"lineNumber":136,"author":{"gitId":"jinnieshin"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"jinnieshin"},"content":"                        + PRIORITY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-31"},{"lineNumber":141,"author":{"gitId":"jinnieshin"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":145,"author":{"gitId":"jinnieshin"},"content":"                        + PRIORITY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-31"},{"lineNumber":146,"author":{"gitId":"jinnieshin"},"content":"                Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":148,"author":{"gitId":"pzhengze"},"content":"        // invalid address","lastModifiedDate":"2023-03-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":150,"author":{"gitId":"jinnieshin"},"content":"                        + PRIORITY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-31"},{"lineNumber":151,"author":{"gitId":"jinnieshin"},"content":"                Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":155,"author":{"gitId":"jinnieshin"},"content":"                        + PRIORITY_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-31"},{"lineNumber":156,"author":{"gitId":"jinnieshin"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":158,"author":{"gitId":"pzhengze"},"content":"        // invalid pid","lastModifiedDate":"2023-03-12"},{"lineNumber":159,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-12"},{"lineNumber":160,"author":{"gitId":"jinnieshin"},"content":"                        + PRIORITY_DESC_BOB + INVALID_PID_DESC + TAG_DESC_HUSBAND + VALID_TAG_FRIEND + WARD_DESC_BOB,","lastModifiedDate":"2023-03-31"},{"lineNumber":161,"author":{"gitId":"jinnieshin"},"content":"                IdNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":162,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":163,"author":{"gitId":"jinnieshin"},"content":"        //invalid ward","lastModifiedDate":"2023-03-31"},{"lineNumber":164,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":165,"author":{"gitId":"jinnieshin"},"content":"        //                        + PRIORITY_DESC_BOB + PID_DESC_BOB + TAG_DESC_HUSBAND + VALID_TAG_FRIEND","lastModifiedDate":"2023-03-31"},{"lineNumber":166,"author":{"gitId":"jinnieshin"},"content":"        //                        + INVALID_WARD_DESC, Ward.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":167,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":168,"author":{"gitId":"jinnieshin"},"content":"        //invalid priority","lastModifiedDate":"2023-03-31"},{"lineNumber":169,"author":{"gitId":"jinnieshin"},"content":"        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":170,"author":{"gitId":"jinnieshin"},"content":"        //                        + INVALID_PRIORITY_DESC + PID_DESC_BOB + TAG_DESC_HUSBAND + VALID_TAG_FRIEND","lastModifiedDate":"2023-03-31"},{"lineNumber":171,"author":{"gitId":"jinnieshin"},"content":"        //                        + WARD_DESC_BOB, PriorityTag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":172,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":174,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2023-03-12"},{"lineNumber":175,"author":{"gitId":"jinnieshin"},"content":"                + PRIORITY_DESC_BOB + PID_DESC_BOB + WARD_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":179,"author":{"gitId":"jinnieshin"},"content":"                + ADDRESS_DESC_BOB + PRIORITY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB","lastModifiedDate":"2023-03-31"},{"lineNumber":180,"author":{"gitId":"jinnieshin"},"content":"                + WARD_DESC_BOB, String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-31"},{"lineNumber":181,"author":{"gitId":"jinnieshin"},"content":"                AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"lukkesreysandeur":1,"euph00":26,"pzhengze":34,"-":60,"jinnieshin":62}},{"path":"src/test/java/seedu/patientist/logic/parser/AddPatientStatusCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.STATUS_DESC_AMY;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.STATUS_DESC_BOB;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_STATUS_AMY;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_STATUS_BOB;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientStatusCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"public class AddPatientStatusCommandParserTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientStatusCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    private AddPatientStatusCommandParser parser \u003d new AddPatientStatusCommandParser();","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"        // no index specified","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, STATUS_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        // no field specified","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        // no index and no field specified","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        // negative index","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"-5\" + STATUS_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        // zero index","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"0\" + STATUS_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\" + \" some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\" + \" i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        String userInput \u003d targetIndex.getOneBased() + STATUS_DESC_BOB;","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        AddPatientStatusCommand expectedCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"                new AddPatientStatusCommand(targetIndex, List.of(new PatientStatusDetails(VALID_STATUS_BOB)));","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"    public void parse_multipleRepeatedFields_acceptsAll() {","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        String userInput \u003d targetIndex.getOneBased() + STATUS_DESC_BOB + STATUS_DESC_AMY;","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        AddPatientStatusCommand expectedCommand \u003d new AddPatientStatusCommand(targetIndex,","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"                List.of(new PatientStatusDetails(VALID_STATUS_BOB), new PatientStatusDetails(VALID_STATUS_AMY)));","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":76}},{"path":"src/test/java/seedu/patientist/logic/parser/AddStaffCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_PID_DESC;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PID_DESC_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PID_DESC_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_WARD_AMY;","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_WARD_BOB;","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.WARD_DESC_AMY;","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.WARD_DESC_BOB;","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.AddStaffCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"public class AddStaffCommandParserTest {","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"    private final String staffTag \u003d \"Staff\";","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"    private AddStaffCommandParser parser \u003d new AddStaffCommandParser();","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff expectedStaff \u003d new StaffBuilder(BOB).withTags(VALID_TAG_FRIEND, staffTag).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"                new AddStaffCommand(VALID_WARD_BOB, expectedStaff));","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"                new AddStaffCommand(VALID_WARD_BOB, expectedStaff));","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"                new AddStaffCommand(VALID_WARD_BOB, expectedStaff));","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"                new AddStaffCommand(VALID_WARD_BOB, expectedStaff));","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":80,"author":{"gitId":"lukkesreysandeur"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2023-03-16"},{"lineNumber":81,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"lukkesreysandeur"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"lukkesreysandeur"},"content":"                new AddStaffCommand(VALID_WARD_BOB, expectedStaff));","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"lukkesreysandeur"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff expectedStaffMultipleTags \u003d new StaffBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND, staffTag)","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"lukkesreysandeur"},"content":"                .build();","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"lukkesreysandeur"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"lukkesreysandeur"},"content":"                        new AddStaffCommand(VALID_WARD_BOB, expectedStaffMultipleTags));","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"lukkesreysandeur"},"content":"        // zero tags","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff expectedStaff \u003d new StaffBuilder(AMY).withTags(staffTag).build();","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PID_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-03-16"},{"lineNumber":98,"author":{"gitId":"lukkesreysandeur"},"content":"                + ADDRESS_DESC_AMY + WARD_DESC_AMY, new AddStaffCommand(VALID_WARD_AMY, expectedStaff));","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":100,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":101,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStaffCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"lukkesreysandeur"},"content":"        // missing name prefix","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":107,"author":{"gitId":"lukkesreysandeur"},"content":"                + PID_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":108,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":109,"author":{"gitId":"lukkesreysandeur"},"content":"        // missing phone prefix","lastModifiedDate":"2023-03-16"},{"lineNumber":110,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":111,"author":{"gitId":"lukkesreysandeur"},"content":"                + PID_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":112,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":113,"author":{"gitId":"lukkesreysandeur"},"content":"        // missing email prefix","lastModifiedDate":"2023-03-16"},{"lineNumber":114,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":115,"author":{"gitId":"lukkesreysandeur"},"content":"                + PID_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":116,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":117,"author":{"gitId":"lukkesreysandeur"},"content":"        // missing address prefix","lastModifiedDate":"2023-03-16"},{"lineNumber":118,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":119,"author":{"gitId":"lukkesreysandeur"},"content":"                + PID_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":120,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":121,"author":{"gitId":"lukkesreysandeur"},"content":"        // missing pid prefix","lastModifiedDate":"2023-03-16"},{"lineNumber":122,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":123,"author":{"gitId":"lukkesreysandeur"},"content":"                + VALID_PID_BOB, expectedMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":124,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":125,"author":{"gitId":"lukkesreysandeur"},"content":"        // all prefixes missing","lastModifiedDate":"2023-03-16"},{"lineNumber":126,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":127,"author":{"gitId":"lukkesreysandeur"},"content":"                + VALID_PID_BOB, expectedMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":128,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":129,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":130,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":131,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-03-16"},{"lineNumber":132,"author":{"gitId":"lukkesreysandeur"},"content":"        // invalid name","lastModifiedDate":"2023-03-16"},{"lineNumber":133,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":134,"author":{"gitId":"lukkesreysandeur"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":136,"author":{"gitId":"lukkesreysandeur"},"content":"        // invalid phone","lastModifiedDate":"2023-03-16"},{"lineNumber":137,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":138,"author":{"gitId":"lukkesreysandeur"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":140,"author":{"gitId":"lukkesreysandeur"},"content":"        // invalid email","lastModifiedDate":"2023-03-16"},{"lineNumber":141,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":142,"author":{"gitId":"lukkesreysandeur"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":144,"author":{"gitId":"lukkesreysandeur"},"content":"        // invalid address","lastModifiedDate":"2023-03-16"},{"lineNumber":145,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2023-03-16"},{"lineNumber":146,"author":{"gitId":"lukkesreysandeur"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":148,"author":{"gitId":"lukkesreysandeur"},"content":"        // invalid tag","lastModifiedDate":"2023-03-16"},{"lineNumber":149,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":150,"author":{"gitId":"lukkesreysandeur"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND + PID_DESC_BOB + WARD_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":152,"author":{"gitId":"lukkesreysandeur"},"content":"        // invalid pid","lastModifiedDate":"2023-03-16"},{"lineNumber":153,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_PID_DESC","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"lukkesreysandeur"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + WARD_DESC_BOB, IdNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":156,"author":{"gitId":"lukkesreysandeur"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-03-16"},{"lineNumber":157,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2023-03-16"},{"lineNumber":158,"author":{"gitId":"lukkesreysandeur"},"content":"                + PID_DESC_BOB + WARD_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":160,"author":{"gitId":"lukkesreysandeur"},"content":"        // non-empty preamble","lastModifiedDate":"2023-03-16"},{"lineNumber":161,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-16"},{"lineNumber":162,"author":{"gitId":"lukkesreysandeur"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + PID_DESC_BOB + WARD_DESC_BOB,","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"lukkesreysandeur"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-16"},{"lineNumber":164,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":165,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"lukkesreysandeur":165}},{"path":"src/test/java/seedu/patientist/logic/parser/AddWardCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.WardBuilder.DEFAULT_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddWardCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.WardBuilder;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"public class AddWardCommandParserTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    private AddWardCommandParser parser \u003d new AddWardCommandParser();","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"        Ward expectedWard \u003d new WardBuilder().build();","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" \" + PREFIX_NAME + DEFAULT_NAME,","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"                new AddWardCommand(expectedWard));","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_NAME + DEFAULT_NAME + \" \" + PREFIX_NAME + DEFAULT_NAME,","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"                new AddWardCommand(expectedWard));","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"pzhengze":29}},{"path":"src/test/java/seedu/patientist/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"euph00":1,"-":149}},{"path":"src/test/java/seedu/patientist/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.Command;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput,","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            Command expectedCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"euph00":3,"-":36}},{"path":"src/test/java/seedu/patientist/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"euph00":6,"-":26}},{"path":"src/test/java/seedu/patientist/logic/parser/DeletePatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.DeletePatientCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeletePatientCommandParserTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    private DeletePatientCommandParser deletePatientCommandParser \u003d new DeletePatientCommandParser();","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_validArgs_returnsDeletePatientCommand() {","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        DeletePatientCommand expected \u003d new DeletePatientCommand(new IdNumber(\"A12345A\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(deletePatientCommandParser, PREAMBLE_WHITESPACE + \" id/A12345A\", expected);","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_nonEmptyPreamble_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deletePatientCommandParser, PREAMBLE_NON_EMPTY + \"id/A12345A\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_moreThanOneInput_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deletePatientCommandParser, \" id/A12345A A12345B\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_noPrefixId_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deletePatientCommandParser, \" A12345A\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_invalidIdNumber_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deletePatientCommandParser, \" id/!@#$%\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":45}},{"path":"src/test/java/seedu/patientist/logic/parser/DeletePatientStatusCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.DeletePatientStatusCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"public class DeletePatientStatusCommandParserTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientStatusCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    private DeletePatientStatusCommandParser parser \u003d new DeletePatientStatusCommandParser();","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"        // no status index specified","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        // no person index and no status index specified","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"        // negative index","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"-5\" + \" 1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\" + \" -5\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        // zero index","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"0\" + \" 1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\" + \" 0\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\" + \" some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"1\" + \" i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" 1\";","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        DeletePatientStatusCommand expectedCommand \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"                new DeletePatientStatusCommand(targetIndex, Index.fromOneBased(1));","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" 1\" + \" 1\";","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"pzhengze":64}},{"path":"src/test/java/seedu/patientist/logic/parser/DeleteStaffCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.DeleteStaffCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"public class DeleteStaffCommandParserTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    private DeleteStaffCommandParser deleteStaffCommandParser \u003d new DeleteStaffCommandParser();","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_validArgs_returnsDeleteStaffCommand() {","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        DeleteStaffCommand expected \u003d new DeleteStaffCommand(new IdNumber(\"A12345A\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(deleteStaffCommandParser, PREAMBLE_WHITESPACE + \" id/A12345A\", expected);","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_nonEmptyPreamble_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deleteStaffCommandParser, PREAMBLE_NON_EMPTY + \"id/A12345A\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_moreThanOneInput_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deleteStaffCommandParser, \" id/A12345A A12345B\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_noPrefixId_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deleteStaffCommandParser, \" A12345A\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_invalidIdNumber_throwsParserException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(deleteStaffCommandParser, \" id/!@#$%\", expectedMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":45}},{"path":"src/test/java/seedu/patientist/logic/parser/DeleteWardCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.WardBuilder.DEFAULT_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.DeleteWardCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.WardBuilder;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"public class DeleteWardCommandParserTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    private DeleteWardCommandParser parser \u003d new DeleteWardCommandParser();","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"        Ward expectedWard \u003d new WardBuilder().build();","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" \" + PREFIX_NAME + DEFAULT_NAME,","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"                new DeleteWardCommand(expectedWard.getWardName()));","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_NAME + DEFAULT_NAME + \" \" + PREFIX_NAME + DEFAULT_NAME,","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"                new DeleteWardCommand(expectedWard.getWardName()));","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"pzhengze":29}},{"path":"src/test/java/seedu/patientist/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid patientist","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"        // patientist","lastModifiedDate":"2023-03-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"euph00":43,"-":168}},{"path":"src/test/java/seedu/patientist/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.FindCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"euph00":6,"-":28}},{"path":"src/test/java/seedu/patientist/logic/parser/FindPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.FindPatientCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.patient.PatientIdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"public class FindPatientCommandParserTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    private FindPatientCommandParser parser \u003d new FindPatientCommandParser();","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    public void parse_validArgs_returnsFindPatientCommand() {","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        FindPatientCommand expectedFindCommand \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"                new FindPatientCommand(new PatientNameContainsKeywordsPredicate(List.of(\"Alice\")));","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice\", expectedFindCommand);","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        expectedFindCommand \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"                new FindPatientCommand(new PatientIdContainsKeywordsPredicate(Arrays.asList(\"A123\")));","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_ID + \"A123\", expectedFindCommand);","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, PREFIX_NAME + \"Alice \" + PREFIX_ID + \"A123\",","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"lukkesreysandeur":5,"pzhengze":40}},{"path":"src/test/java/seedu/patientist/logic/parser/FindStaffCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.logic.commands.FindStaffCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.StaffIdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.StaffNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"public class FindStaffCommandParserTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    private FindStaffCommandParser parser \u003d new FindStaffCommandParser();","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_validArgs_returnsFindPatientCommand() {","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        FindStaffCommand expectedFindCommand \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"                new FindStaffCommand(new StaffNameContainsKeywordsPredicate(List.of(\"Alice\")));","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice\", expectedFindCommand);","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        expectedFindCommand \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"                new FindStaffCommand(new StaffIdContainsKeywordsPredicate(Arrays.asList(\"A123\")));","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_ID + \"A123\", expectedFindCommand);","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        assertParseFailure(parser, PREFIX_NAME + \"Alice \" + PREFIX_ID + \"A123\",","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":45}},{"path":"src/test/java/seedu/patientist/logic/parser/ListWardPatientsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.ListWardPatientsCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"public class ListWardPatientsCommandParserTest {","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"    private ListWardPatientsCommandParser parser \u003d new ListWardPatientsCommandParser();","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListWardPatientsCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        ListWardPatientsCommand expectedFindCommand \u003d","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"                new ListWardPatientsCommand(\"Alice\");","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, \"Alice\", expectedFindCommand);","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"pzhengze":27}},{"path":"src/test/java/seedu/patientist/logic/parser/ListWardStaffCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.ListWardStaffCommand;","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"public class ListWardStaffCommandParserTest {","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"    private ListWardStaffCommandParser parser \u003d new ListWardStaffCommandParser();","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListWardStaffCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"        ListWardStaffCommand expectedFindCommand \u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"                new ListWardStaffCommand(\"Alice\");","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"        assertParseSuccess(parser, \"Alice\", expectedFindCommand);","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":28,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"GlennOngJunJie":28}},{"path":"src/test/java/seedu/patientist/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"euph00":10,"-":186}},{"path":"src/test/java/seedu/patientist/logic/parser/PatientistParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.FindCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.ListCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientUtil;","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"public class PatientistParserTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    private final PatientistParser parser \u003d new PatientistParser();","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"        //AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));","lastModifiedDate":"2023-03-31"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"        //assertEquals(new AddPatientCommand(\"Block A Ward 1\", patient), command);","lastModifiedDate":"2023-03-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"euph00":18,"-":73,"pzhengze":7,"jinnieshin":2}},{"path":"src/test/java/seedu/patientist/logic/parser/UpdatePatientWardParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"GlennOngJunJie"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"GlennOngJunJie"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"GlennOngJunJie"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"GlennOngJunJie"},"content":"import seedu.patientist.logic.commands.UpdatePatientWardCommand;","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"GlennOngJunJie"},"content":"public class UpdatePatientWardParserTest {","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"GlennOngJunJie"},"content":"    private UpdatePatientWardParser parser \u003d new UpdatePatientWardParser();","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"GlennOngJunJie"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2023-03-31"},{"lineNumber":18,"author":{"gitId":"GlennOngJunJie"},"content":"        assertParseSuccess(parser, \"2 w/Block A Ward 2\",","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"GlennOngJunJie"},"content":"                new UpdatePatientWardCommand(INDEX_SECOND_PERSON, \"Block A Ward 2\"));","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"GlennOngJunJie"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"GlennOngJunJie"},"content":"    @Test","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"GlennOngJunJie"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"GlennOngJunJie"},"content":"        assertParseFailure(parser, \"a w/Block A Ward 2\",","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"GlennOngJunJie"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdatePatientWardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"GlennOngJunJie"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"GlennOngJunJie"},"content":"}","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"GlennOngJunJie":27}},{"path":"src/test/java/seedu/patientist/logic/parser/ViewCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.ViewCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"public class ViewCommandParserTest {","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"pzhengze":24}},{"path":"src/test/java/seedu/patientist/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.PatientistBuilder;","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        assertEquals(new Patientist(), new Patientist(modelManager.getPatientist()));","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        userPrefs.setPatientistFilePath(Paths.get(\"patientist/book/file/path\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        userPrefs.setPatientistFilePath(Paths.get(\"new/patientist/book/file/path\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatientistFilePath(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        Path path \u003d Paths.get(\"patientist/book/file/path\");","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        modelManager.setPatientistFilePath(path);","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        assertEquals(path, modelManager.getPatientistFilePath());","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"pzhengze"},"content":"        assertFalse(modelManager.hasPerson(AMY));","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d new Ward(\"Temp\");","lastModifiedDate":"2023-03-27"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        modelManager.addWard(ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"        modelManager.addPatient(AMY, ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"        assertTrue(modelManager.hasPerson(AMY));","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"        Patientist patientist \u003d new PatientistBuilder().withPerson(AMY).withPerson(BOB).build();","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"        Patientist differentPatientist \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"        modelManager \u003d new ModelManager(patientist, userPrefs);","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(patientist, userPrefs);","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"        // different patientist -\u003e returns false","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentPatientist, userPrefs)));","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"pzhengze"},"content":"        String[] keywords \u003d AMY.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-03-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientist, userPrefs)));","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"        differentUserPrefs.setPatientistFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientist, differentUserPrefs)));","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"euph00":21,"-":104,"pzhengze":10}},{"path":"src/test/java/seedu/patientist/model/PatientistTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"//import java.util.Arrays;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"//import java.util.List;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"//import seedu.patientist.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"public class PatientistTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    private final Patientist patientist \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        assertEquals(Collections.emptyList(), patientist.getPersonList());","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientist.resetData(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"        Patientist newData \u003d getTypicalPatientist();","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        patientist.resetData(newData);","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        assertEquals(newData, patientist);","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientist.hasPerson(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        assertFalse(patientist.hasPerson(AMY));","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d new Ward(\"ward\");","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        patientist.addWard(ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        patientist.addPatient(AMY, ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"        assertTrue(patientist.hasPerson(AMY));","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        Ward ward \u003d new Ward(\"ward\");","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        patientist.addWard(ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        patientist.addPatient(AMY, ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        Person editedAlice \u003d new PatientBuilder(AMY).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        assertTrue(patientist.hasPerson(editedAlice));","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e patientist.getPersonList().remove(0));","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"     * A stub ReadOnlyPatientist whose persons list can violate interface constraints.","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"    private static class PatientistStub implements ReadOnlyPatientist {","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        private final ObservableList\u003cWard\u003e wards \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        PatientistStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"pzhengze"},"content":"        public void updatePersonList() {","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"pzhengze"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"        @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"        public ObservableList\u003cWard\u003e getWardList() {","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"            return wards;","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"pzhengze"},"content":"        public ObservableList\u003cPerson\u003e getPatientListInWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"pzhengze"},"content":"            return null;","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"pzhengze"},"content":"        @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"pzhengze"},"content":"        public ObservableList\u003cPerson\u003e getStaffListInWard(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"            return null;","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"euph00":23,"-":61,"pzhengze":32}},{"path":"src/test/java/seedu/patientist/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPatientistFilePath(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"euph00":3,"-":18}},{"path":"src/test/java/seedu/patientist/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    public void equals() {","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        Address a1 \u003d new Address(\"Test address 1\");","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"        Address a2 \u003d new Address(\"Test address 1\");","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        Address b1 \u003d new Address(\"Different test address\");","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        // same object -\u003e true","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        assertEquals(a1, a1);","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        // different object same content -\u003e true","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        assertEquals(a1, a2);","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        // different content -\u003e false","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"        assertNotEquals(b1, a1);","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"euph00":20,"-":34}},{"path":"src/test/java/seedu/patientist/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"euph00":2,"-":66}},{"path":"src/test/java/seedu/patientist/model/person/IdContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"public class IdContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        IdContainsKeywordsPredicate firstPredicate \u003d new IdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        IdContainsKeywordsPredicate secondPredicate \u003d new IdContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        IdContainsKeywordsPredicate firstPredicateCopy \u003d new IdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_idContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        // One keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        IdContainsKeywordsPredicate predicate \u003d new IdContainsKeywordsPredicate(Collections.singletonList(\"A123\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        // Multiple keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new IdContainsKeywordsPredicate(Arrays.asList(\"A123\", \"B123\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new IdContainsKeywordsPredicate(List.of(\"a123A\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new PatientBuilder().withIdNumber(\"A123A\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_idDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"        // Zero keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        IdContainsKeywordsPredicate predicate \u003d new IdContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new IdContainsKeywordsPredicate(Arrays.asList(\"C12345\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        // Keywords match phone, email and patientist, but does not match name","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new IdContainsKeywordsPredicate(","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"Doing\", \"good\", \"A1234567890B\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new PatientBuilder().withIdNumber(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withStatus(\"Doing good\")","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"                .withIdNumber(\"A12345\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":72}},{"path":"src/test/java/seedu/patientist/model/person/IdNumberTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"public class IdNumberTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"    private static final IdNumber PID1_UPPER \u003d new IdNumber(\"A12345B\");","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    private static final IdNumber PID1_LOWER \u003d new IdNumber(\"a12345b\");","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"    private static final IdNumber PID2_UPPER \u003d new IdNumber(\"C67890D\");","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"    private static final IdNumber PID2_LOWER \u003d new IdNumber(\"c67890d\");","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    private static final String INVALID_PID_1 \u003d \"there are spaces in this pid\";","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    private static final String INVALID_PID_2 \u003d \"+_(#$\";","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    public void equals_sameId_true() {","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        assertTrue(PID1_UPPER.equals(PID1_UPPER));","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(PID1_UPPER.equals(new IdNumber(\"A12345B\")));","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public void equals_diffId_false() {","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        assertFalse(PID1_UPPER.equals(PID2_UPPER));","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    public void equals_diffCase_true() {","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        assertTrue(PID1_UPPER.equals(PID1_LOWER));","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        assertTrue(PID2_LOWER.equals(PID2_UPPER));","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    public void constructor_invalidIdNumberInput() {","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IdNumber(INVALID_PID_1));","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IdNumber(INVALID_PID_2));","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    public void constructor_nullInput() {","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new IdNumber(null));","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":7,"euph00":38}},{"path":"src/test/java/seedu/patientist/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new StaffBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new StaffBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new StaffBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new StaffBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        assertFalse(predicate.test(new StaffBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        assertFalse(predicate.test(new StaffBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"        // Keywords match phone, email, ID and patientist, but does not match name","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\",","lastModifiedDate":"2023-03-20"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"                \"alice@email.com\",","lastModifiedDate":"2023-03-20"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"                \"Main\",","lastModifiedDate":"2023-03-20"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"                \"Street\",","lastModifiedDate":"2023-03-20"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"                \"A123456789\"));","lastModifiedDate":"2023-03-20"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"        assertFalse(predicate.test(new StaffBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2023-03-20"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withIdNumber(\"A123456789\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2023-03-20"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withIdNumber(\"A123456789\").build()));","lastModifiedDate":"2023-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"euph00":31,"-":62}},{"path":"src/test/java/seedu/patientist/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"euph00":2,"-":38}},{"path":"src/test/java/seedu/patientist/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalStaff.AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalStaff.BOB;","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"        Person person \u003d new StaffBuilder().build();","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        assertTrue(AMY.isSamePerson(AMY));","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.isSamePerson(null));","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        // same name, all other attributes different -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        Person editedAmy \u003d new StaffBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).withIdNumber(VALID_PID_BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.isSamePerson(editedAmy));","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"        // different name, all other attributes same -\u003e returns true","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"        editedAmy \u003d new StaffBuilder(AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        assertTrue(AMY.isSamePerson(editedAmy));","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        Person editedBob \u003d new StaffBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns true","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        editedBob \u003d new StaffBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        Person amyCopy \u003d new StaffBuilder(AMY).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        assertTrue(AMY.equals(amyCopy));","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        assertTrue(AMY.equals(AMY));","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(null));","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(5));","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(BOB));","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"pzhengze"},"content":"        Person editedAlice \u003d new StaffBuilder(AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(editedAlice));","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"        editedAlice \u003d new StaffBuilder(AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(editedAlice));","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"pzhengze"},"content":"        editedAlice \u003d new StaffBuilder(AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(editedAlice));","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        // different patientist -\u003e returns false","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        editedAlice \u003d new StaffBuilder(AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(editedAlice));","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        editedAlice \u003d new StaffBuilder(AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(editedAlice));","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"pzhengze"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"pzhengze"},"content":"        editedAlice \u003d new StaffBuilder(AMY).withIdNumber(VALID_PID_BOB).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"        assertFalse(AMY.equals(editedAlice));","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"euph00":4,"-":48,"pzhengze":44}},{"path":"src/test/java/seedu/patientist/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"euph00":2,"-":38}},{"path":"src/test/java/seedu/patientist/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalStaff.BOB;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalStaff.CHARLES;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    private static final String DUMMY_WARD_NAME \u003d \"DUMMY WARDNAME\";","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList(DUMMY_WARD_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        assertFalse(uniquePersonList.contains(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        assertTrue(uniquePersonList.contains(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    public void contains_personWithSameIdDifferentAttrsInList_returnsTrue() {","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        Person editedAmy \u003d new PatientBuilder(AMY).withAddress(\"different addr\")","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"                .withEmail(\"exampledifferentemail@email.com\").withTags(\"extratag\")","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"        assertTrue(uniquePersonList.contains(editedAmy));","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    public void add_differentPersonSameId_throwsDuplicatePersonException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"        Staff editedCharles \u003d new StaffBuilder(CHARLES).withIdNumber(BOB.getIdNumber().idNumber).build();","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(editedCharles));","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"    public void add_sameAttributesDifferentId_success() {","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        Staff editedBob \u003d new StaffBuilder(BOB).withIdNumber(\"D8439555H\").build();","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(editedBob);","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        assertTrue(uniquePersonList.contains(editedBob));","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(AMY, null));","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(AMY, AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"        uniquePersonList.setPerson(AMY, AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList(DUMMY_WARD_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"        expectedUniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"        Person editedAmy \u003d new PatientBuilder(AMY).withAddress(\"different test address\").build();","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"        uniquePersonList.setPerson(AMY, editedAmy);","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList(DUMMY_WARD_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"        expectedUniquePersonList.add(editedAmy);","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"        uniquePersonList.setPerson(AMY, BOB);","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList(DUMMY_WARD_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(AMY, BOB));","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"        uniquePersonList.remove(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList(DUMMY_WARD_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList(DUMMY_WARD_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"        uniquePersonList.add(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList(DUMMY_WARD_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(AMY, AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"euph00":63,"-":124}},{"path":"src/test/java/seedu/patientist/model/person/patient/DummyPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"public class DummyPatientTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"    public void isSamePerson_sameId_true() {","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber \u003d new IdNumber(\"A12345H\");","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyPatient dummyPatient1 \u003d new DummyPatient(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyPatient dummyPatient2 \u003d new DummyPatient(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(dummyPatient1.isSamePerson(dummyPatient2));","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    public void isSamePerson_differentId_false() {","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber1 \u003d new IdNumber(\"A12345G\");","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber2 \u003d new IdNumber(\"A12345H\");","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyPatient dummyPatient1 \u003d new DummyPatient(idNumber1);","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyPatient dummyPatient2 \u003d new DummyPatient(idNumber2);","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(dummyPatient1.isSamePerson(dummyPatient2));","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber1 \u003d new IdNumber(\"A12345G\");","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber2 \u003d new IdNumber(\"A12345H\");","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyPatient dummyPatient1 \u003d new DummyPatient(idNumber1);","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyPatient dummyPatient2 \u003d new DummyPatient(idNumber2);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyPatient dummyPatient3 \u003d new DummyPatient(idNumber1);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(dummyPatient1.equals(dummyPatient2));","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(dummyPatient1.equals(dummyPatient3));","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        assertEquals(dummyPatient1, dummyPatient3);","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":43}},{"path":"src/test/java/seedu/patientist/model/person/patient/IsPatientPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalStaff.AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"public class IsPatientPredicateTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"    public void equals() {","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"        IsPatientPredicate firstPredicate \u003d new IsPatientPredicate();","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"        IsPatientPredicate secondPredicate \u003d new IsPatientPredicate();","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"        // different object -\u003e returns true","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public void test() {","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        // BOB is patient -\u003e true","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        assertTrue(new IsPatientPredicate().test(BOB));","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        // AMY is staff -\u003e false","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        assertFalse(new IsPatientPredicate().test(AMY));","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"euph00":11,"pzhengze":21}},{"path":"src/test/java/seedu/patientist/model/person/patient/PatientIdContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"public class PatientIdContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientIdContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientIdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientIdContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientIdContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        IdContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientIdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_patientIdContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        // One keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientIdContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientIdContainsKeywordsPredicate(Collections.singletonList(\"A123\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"        // Multiple keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientIdContainsKeywordsPredicate(Arrays.asList(\"A123\", \"B123\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientIdContainsKeywordsPredicate(List.of(\"a123A\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new PatientBuilder().withIdNumber(\"A123A\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_patientIdDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        // Zero keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientIdContainsKeywordsPredicate predicate \u003d new PatientIdContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientIdContainsKeywordsPredicate(Arrays.asList(\"C12345\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new PatientBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        // Keywords match phone, email and patientist, but does not match name","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientIdContainsKeywordsPredicate(","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"Doing\", \"good\", \"A1234567890B\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new PatientBuilder().withIdNumber(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withStatus(\"Doing good\")","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"                .withIdNumber(\"A12345\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":77}},{"path":"src/test/java/seedu/patientist/model/person/patient/PatientNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"public class PatientNameContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_patientNameContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"        // One keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientNameContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientNameContainsKeywordsPredicate(Collections.singletonList(\"Amy\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        // Multiple keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientNameContainsKeywordsPredicate(Arrays.asList(\"Amy\", \"Bee\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientNameContainsKeywordsPredicate(List.of(\"aMy\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_patientNameContainsNoKeywords_returnsFalse() {","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        // Zero keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientNameContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientNameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientNameContainsKeywordsPredicate(Arrays.asList(\"Charles\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"        // Keywords match phone, email and patientist, but does not match name","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new PatientNameContainsKeywordsPredicate(","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"                Arrays.asList(VALID_PID_AMY, VALID_EMAIL_AMY, VALID_PHONE_AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientNameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        PatientNameContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"                new PatientNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":78}},{"path":"src/test/java/seedu/patientist/model/person/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.ADAM;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.RoleTag;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.PatientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.TypicalPatients;","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"class PatientTest {","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    public void isSamePerson_differentPatient_false() {","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"        assertFalse(ADAM.isSamePerson(BOB));","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    public void isSamePerson_samePatient_true() {","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        // same object -\u003e return true","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        assertTrue(ADAM.isSamePerson(ADAM));","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    public void isSamePerson_compareToNull_false() {","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        assertFalse(ADAM.isSamePerson(null));","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    public void isSamePerson_sameIdDifferentAttr_true() {","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        // same id, different attributes -\u003e returns true","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        Patient other \u003d new PatientBuilder()","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"                .withName(\"different name\")","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"                .withPhone(\"98843743\")","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"                .withEmail(\"example@email.com\")","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"                .withAddress(\"sampleaddress\")","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"                .withIdNumber(ADAM.getIdNumber().toString())","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"                .build();","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        assertTrue(other.isSamePerson(ADAM));","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    public void isSamePerson_sameIdDifferentCase_true() {","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        // same id but input in lowercase -\u003e returns true","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        Patient first \u003d new PatientBuilder().withIdNumber(\"a12345b\").build();","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        Patient second \u003d new PatientBuilder().withIdNumber(\"A12345B\").build();","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        assertTrue(first.isSamePerson(second));","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    public void isSamePerson_sameAttrDifferentId_false() {","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        Patient editedAdam \u003d new PatientBuilder(ADAM).withIdNumber(\"D902838J\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"        assertFalse(ADAM.isSamePerson(editedAdam));","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"    public void equals() {","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"        Patient aliceCopy \u003d new PatientBuilder(TypicalPatients.AMY).build();","lastModifiedDate":"2023-03-20"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"        assertTrue(TypicalPatients.AMY.equals(aliceCopy));","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        assertTrue(TypicalPatients.AMY.equals(TypicalPatients.AMY));","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(null));","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(5));","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(TypicalPatients.BOB));","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        Patient editedAmy \u003d new PatientBuilder(TypicalPatients.AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-20"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(editedAmy));","lastModifiedDate":"2023-03-20"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"        editedAmy \u003d new PatientBuilder(TypicalPatients.AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-03-20"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(editedAmy));","lastModifiedDate":"2023-03-20"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"        editedAmy \u003d new PatientBuilder(TypicalPatients.AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-03-20"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(editedAmy));","lastModifiedDate":"2023-03-20"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"        // different id","lastModifiedDate":"2023-03-20"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"        editedAmy \u003d new PatientBuilder(TypicalPatients.AMY).withIdNumber(\"A757575757B\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(editedAmy));","lastModifiedDate":"2023-03-20"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"        // different patientist -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"        editedAmy \u003d new PatientBuilder(TypicalPatients.AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-20"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"        assertFalse(TypicalPatients.AMY.equals(editedAmy));","lastModifiedDate":"2023-03-20"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"    public void getRoleTag_returnsCorrectTag() {","lastModifiedDate":"2023-03-20"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"        RoleTag patientTag \u003d new RoleTag(\"Patient\");","lastModifiedDate":"2023-03-20"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"        assertEquals(patientTag, ADAM.getRoleTag());","lastModifiedDate":"2023-03-20"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"        assertEquals(patientTag, AMY.getRoleTag());","lastModifiedDate":"2023-03-20"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":3,"euph00":107}},{"path":"src/test/java/seedu/patientist/model/person/staff/DummyStaffTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"public class DummyStaffTest {","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"    public void isSamePerson_sameId_true() {","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber \u003d new IdNumber(\"A12345H\");","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyStaff dummyStaff1 \u003d new DummyStaff(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyStaff dummyStaff2 \u003d new DummyStaff(idNumber);","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(dummyStaff1.isSamePerson(dummyStaff2));","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    public void isSamePerson_differentId_false() {","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber1 \u003d new IdNumber(\"A12345G\");","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber2 \u003d new IdNumber(\"A12345H\");","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyStaff dummyStaff1 \u003d new DummyStaff(idNumber1);","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyStaff dummyStaff2 \u003d new DummyStaff(idNumber2);","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(dummyStaff1.isSamePerson(dummyStaff2));","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber1 \u003d new IdNumber(\"A12345G\");","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        IdNumber idNumber2 \u003d new IdNumber(\"A12345H\");","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyStaff dummyStaff1 \u003d new DummyStaff(idNumber1);","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyStaff dummyStaff2 \u003d new DummyStaff(idNumber2);","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        DummyStaff dummyStaff3 \u003d new DummyStaff(idNumber1);","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(dummyStaff1.equals(dummyStaff2));","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(dummyStaff1.equals(dummyStaff3));","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        assertEquals(dummyStaff1, dummyStaff3);","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"lukkesreysandeur":43}},{"path":"src/test/java/seedu/patientist/model/person/staff/IsStaffPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalStaff.AMY;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"public class IsStaffPredicateTest {","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    public void equals() {","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        IsStaffPredicate first \u003d new IsStaffPredicate();","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        IsStaffPredicate second \u003d new IsStaffPredicate();","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        // same object -\u003e true","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        assertTrue(first.equals(first));","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        // different object -\u003e true","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        assertTrue(first.equals(second));","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public void test() {","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        // AMY is staff -\u003e true","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        assertTrue(new IsStaffPredicate().test(AMY));","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        // BOB is patient -\u003e false","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        assertFalse(new IsStaffPredicate().test(BOB));","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"euph00":31,"pzhengze":1}},{"path":"src/test/java/seedu/patientist/model/person/staff/StaffIdContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"public class StaffIdContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffIdContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffIdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffIdContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffIdContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffIdContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffIdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_staffIdContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"        // One keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffIdContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffIdContainsKeywordsPredicate(Collections.singletonList(\"A123\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new StaffBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"        // Multiple keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffIdContainsKeywordsPredicate(Arrays.asList(\"A123\", \"B123\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new StaffBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffIdContainsKeywordsPredicate(List.of(\"a123A\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(new StaffBuilder().withIdNumber(\"A123A\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_staffIdDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        // Zero keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffIdContainsKeywordsPredicate predicate \u003d new StaffIdContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new StaffBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffIdContainsKeywordsPredicate(Arrays.asList(\"C12345\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new StaffBuilder().withIdNumber(\"A123\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        // Keywords match phone, email and patientist, but does not match name","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffIdContainsKeywordsPredicate(","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"Doing\", \"good\", \"A1234567890B\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(new StaffBuilder().withIdNumber(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withIdNumber(\"A12345\").build()));","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":75}},{"path":"src/test/java/seedu/patientist/model/person/staff/StaffNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"public class StaffNameContainsKeywordsPredicateTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_staffNameContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"        // One keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffNameContainsKeywordsPredicate(Collections.singletonList(\"Amy\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"        // Multiple keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffNameContainsKeywordsPredicate(Arrays.asList(\"Amy\", \"Bee\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffNameContainsKeywordsPredicate(List.of(\"aMy\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"    public void test_staffNameContainsNoKeywords_returnsFalse() {","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"        // Zero keywords","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate predicate \u003d new StaffNameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffNameContainsKeywordsPredicate(Arrays.asList(\"Charles\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"        // Keywords match phone, email and patientist, but does not match name","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        predicate \u003d new StaffNameContainsKeywordsPredicate(","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"                Arrays.asList(VALID_PID_AMY, VALID_EMAIL_AMY, VALID_PHONE_AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(predicate.test(AMY));","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffNameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        StaffNameContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"                new StaffNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"lukkesreysandeur":78}},{"path":"src/test/java/seedu/patientist/model/person/staff/StaffTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.model.person.staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.CHARLES;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.testutil.TypicalStaff.DACIA;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.RoleTag;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.testutil.StaffBuilder;","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.testutil.TypicalPatients;","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.TypicalStaff;","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"public class StaffTest {","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    public void isSameStaff_compareToSameNamePatient_false() {","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(AMY.isSamePerson(TypicalPatients.AMY));","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    public void isSamePerson() {","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(AMY.isSamePerson(AMY));","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(DACIA.isSamePerson(null));","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        // same id, all other attributes different -\u003e returns true","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        Staff editedCharles \u003d new StaffBuilder(CHARLES).withName(\"BOB\").withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(CHARLES.isSamePerson(editedCharles));","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        // same name, all other attributes different -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        editedCharles \u003d new StaffBuilder(CHARLES).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"                .withAddress(VALID_ADDRESS_BOB).withIdNumber(\"TEST9328932932\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(CHARLES.isSamePerson(editedCharles));","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        // different ID, all other attributes same -\u003e returns false","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        editedCharles \u003d new StaffBuilder(CHARLES).withIdNumber(\"TEST912380\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        assertFalse(CHARLES.isSamePerson(editedCharles));","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    public void equals() {","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff aliceCopy \u003d new StaffBuilder(AMY).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(AMY.equals(aliceCopy));","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"        assertTrue(AMY.equals(AMY));","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(AMY.equals(null));","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(AMY.equals(5));","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        assertFalse(AMY.equals(TypicalStaff.BOB));","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"        Staff editedAmy \u003d new StaffBuilder(AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(AMY.equals(editedAmy));","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"        editedAmy \u003d new StaffBuilder(AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(AMY.equals(editedAmy));","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"        editedAmy \u003d new StaffBuilder(AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(AMY.equals(editedAmy));","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        // different id","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"        editedAmy \u003d new StaffBuilder(AMY).withIdNumber(\"A757575757B\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"        assertFalse(AMY.equals(editedAmy));","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":84,"author":{"gitId":"lukkesreysandeur"},"content":"        // different patientist -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"lukkesreysandeur"},"content":"        editedAmy \u003d new StaffBuilder(AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"lukkesreysandeur"},"content":"        assertFalse(AMY.equals(editedAmy));","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":88,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-20"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"    public void getRoleTag() {","lastModifiedDate":"2023-03-20"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        RoleTag staffTag \u003d new RoleTag(\"Staff\");","lastModifiedDate":"2023-03-20"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"        assertEquals(staffTag, AMY.getRoleTag());","lastModifiedDate":"2023-03-20"},{"lineNumber":93,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"lukkesreysandeur":71,"euph00":23}},{"path":"src/test/java/seedu/patientist/model/tag/RoleTagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.tag;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"public class RoleTagTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new RoleTag(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new RoleTag(\"invalid tag name\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    public void isValidTagName() {","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        assertTrue(RoleTag.isValidTagName(RoleTag.STAFF_TAG_NAME));","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        assertTrue(RoleTag.isValidTagName(RoleTag.PATIENT_TAG_NAME));","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        // RoleTag can only take values as determined in the class","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        assertFalse(RoleTag.isValidTagName(\"invalid tag name\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    public void equals() {","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        RoleTag staffTag \u003d new RoleTag(RoleTag.STAFF_TAG_NAME);","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        RoleTag staffTagCopy \u003d new RoleTag(RoleTag.STAFF_TAG_NAME);","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        RoleTag patientTag \u003d new RoleTag(RoleTag.PATIENT_TAG_NAME);","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        // Same object -\u003e equal","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        assertEquals(staffTag, staffTag);","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        // Diff object same role -\u003e equal","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"        assertEquals(staffTag, staffTagCopy);","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        // Diff role -\u003e not equal","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        assertNotEquals(staffTag, patientTag);","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"euph00":47}},{"path":"src/test/java/seedu/patientist/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(\"invalid, tags must be alnum\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"euph00":3,"-":24}},{"path":"src/test/java/seedu/patientist/model/ward/WardListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.ward;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"public class WardListTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"    private WardList wardList \u003d new WardList();","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    public void contains_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e wardList.contains((Ward) null));","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e wardList.contains((Person) null));","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"euph00":14,"pzhengze":4}},{"path":"src/test/java/seedu/patientist/model/ward/WardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.model.ward;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.ADAM;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.CHARLIE;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalStaff.CHARLES;","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalStaff.DACIA;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getBlockAWard1;","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalWards.getBlockAWard2;","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.WardBuilder;","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"public class WardTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    public void constructor_nullWardName_throwsNullPointerException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Ward(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    public void constructor_invalidWardName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Ward(\"\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    public void contains_personInWard_true() {","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsStaff(CHARLES));","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsPatient(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsPerson(CHARLIE));","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    public void contains_personNotInWard_false() {","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"        assertFalse(getBlockAWard2().containsStaff(CHARLES));","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        assertFalse(blockAWard1Copy.containsPatient(BOB));","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        assertFalse(getBlockAWard2().containsPerson(CHARLIE));","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        Ward emptyWard \u003d new Ward(\"empty test ward\");","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"        assertFalse(emptyWard.containsPerson(DACIA));","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        assertFalse(emptyWard.containsPatient(ADAM));","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"        assertFalse(emptyWard.containsStaff(CHARLES));","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        Ward emptyWard \u003d new Ward(\"empty test ward\");","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e emptyWard.addPatient(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard1Copy.addPatient(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        Ward emptyWard \u003d new Ward(\"empty test ward\");","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        emptyWard.addStaff(DACIA);","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        emptyWard.addPatient(ADAM);","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e emptyWard.addStaff(DACIA));","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e emptyWard.addPatient(ADAM));","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e blockAWard1Copy.addPatient(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"    public void add_success() {","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        Ward mock \u003d new Ward(\"empty test ward\");","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"        mock.addPatient(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"        mock.addStaff(DACIA);","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        assertTrue(mock.containsPatient(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        assertTrue(mock.containsStaff(DACIA));","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"    public void delete_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard2Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard2Copy.deletePatient(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard2Copy.deleteStaff(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard2Copy.deletePerson(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"        Ward emptyWard \u003d new Ward(\"empty test ward\");","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e emptyWard.deletePerson(null));","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"    public void delete_personNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e blockAWard1Copy.deletePatient(BOB));","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e blockAWard1Copy.deleteStaff(DACIA));","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e blockAWard1Copy.deletePerson(BOB));","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"        Ward emptyWard \u003d new Ward(\"empty test ward\");","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e emptyWard.deletePerson(ADAM));","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"    public void delete_personInList_success() {","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsPerson(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"        blockAWard1Copy.deletePerson(AMY);","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"        assertFalse(blockAWard1Copy.containsPerson(AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsPerson(CHARLIE));","lastModifiedDate":"2023-03-21"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"        blockAWard1Copy.deletePatient(CHARLIE);","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"        assertFalse(blockAWard1Copy.containsPerson(CHARLIE));","lastModifiedDate":"2023-03-21"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsPerson(CHARLES));","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"        blockAWard1Copy.deleteStaff(CHARLES);","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"        assertFalse(blockAWard1Copy.containsPerson(CHARLES));","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"    public void set_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard1Copy.setPatient(null, AMY));","lastModifiedDate":"2023-03-21"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard1Copy.setStaff(null, CHARLES));","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard1Copy.setPatient(ADAM, null));","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e blockAWard1Copy.setStaff(DACIA, null));","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"    public void set_targetNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":138,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e blockAWard1Copy.setStaff(DACIA, DACIA));","lastModifiedDate":"2023-03-21"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e blockAWard1Copy.setPatient(ADAM, BOB));","lastModifiedDate":"2023-03-21"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"    public void set_success() {","lastModifiedDate":"2023-03-21"},{"lineNumber":146,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"        blockAWard1Copy.setStaff(CHARLES, DACIA);","lastModifiedDate":"2023-03-21"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsPerson(DACIA));","lastModifiedDate":"2023-03-21"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"        blockAWard1Copy.setPatient(CHARLIE, BOB);","lastModifiedDate":"2023-03-21"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"        assertTrue(blockAWard1Copy.containsPerson(BOB));","lastModifiedDate":"2023-03-21"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"    public void equals() {","lastModifiedDate":"2023-03-21"},{"lineNumber":156,"author":{"gitId":"pzhengze"},"content":"        assertEquals(getBlockAWard1(), getBlockAWard1());","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"pzhengze"},"content":"        assertNotEquals(getBlockAWard1(), getBlockAWard2());","lastModifiedDate":"2023-03-25"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":159,"author":{"gitId":"pzhengze"},"content":"        Ward blockAWard1Copy \u003d new WardBuilder(getBlockAWard1()).build();","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"pzhengze"},"content":"        assertEquals(getBlockAWard1(), blockAWard1Copy);","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"        blockAWard1Copy.deleteStaff(CHARLES);","lastModifiedDate":"2023-03-21"},{"lineNumber":163,"author":{"gitId":"pzhengze"},"content":"        assertEquals(getBlockAWard1(), blockAWard1Copy);","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"euph00":145,"pzhengze":20}},{"path":"src/test/java/seedu/patientist/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"    private static final String INVALID_PID \u003d \"213545X\";","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"    private static final String VALID_NAME \u003d AMY.getName().toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    private static final String VALID_ID \u003d AMY.getIdNumber().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"    private static final String VALID_PHONE \u003d AMY.getPhone().toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    private static final String VALID_EMAIL \u003d AMY.getEmail().toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    private static final String VALID_ADDRESS \u003d AMY.getAddress().toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"    private static final List\u003cJsonAdaptedStatus\u003e VALID_STATUS \u003d AMY.getPatientStatusDetails().stream()","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"            .map(JsonAdaptedStatus::new)","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    private static final List\u003cJsonAdaptedToDo\u003e VALID_TODO \u003d List.of(new JsonAdaptedToDo(\"Take meds\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d AMY.getTags().stream()","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(AMY);","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"        assertEquals(AMY, person.toModelType());","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(INVALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"                        VALID_ADDRESS, VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(null, VALID_ID, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"                        VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_ID, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"                        VALID_ADDRESS, VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_ID, null, VALID_EMAIL,","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"                        VALID_ADDRESS, VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_ID, VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"                        VALID_ADDRESS, VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_ID, VALID_PHONE, null,","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"                        VALID_ADDRESS, VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"                        INVALID_ADDRESS, VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"                        VALID_STATUS, VALID_TODO, VALID_TAGS);","lastModifiedDate":"2023-03-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":124,"author":{"gitId":"pzhengze"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"pzhengze"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"                        VALID_STATUS, VALID_TODO, invalidTags);","lastModifiedDate":"2023-03-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"lukkesreysandeur":2,"euph00":19,"-":76,"pzhengze":33}},{"path":"src/test/java/seedu/patientist/storage/JsonPatientistStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.testutil.TypicalPatients.ADAM;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.testutil.TypicalPatients.CHARLIE;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"public class JsonPatientistStorageTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPatientistStorageTest\");","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    private java.util.Optional\u003cReadOnlyPatientist\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        return new JsonPatientistStorage(Paths.get(filePath)).readPatientist(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatPatientist.json\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonPatientist.json\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonPatientist.json\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        Patientist original \u003d getTypicalPatientist();","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"        JsonPatientistStorage jsonAddressBookStorage \u003d new JsonPatientistStorage(filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        jsonAddressBookStorage.savePatientist(original, filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        ReadOnlyPatientist readBack \u003d jsonAddressBookStorage.readPatientist(filePath).get();","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"        Patientist p \u003d new Patientist(readBack);","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"        assertEquals(original, p);","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        //original.addPerson(BOB);","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"pzhengze"},"content":"        original.removePerson(ADAM);","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        jsonAddressBookStorage.savePatientist(original, filePath);","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"        readBack \u003d jsonAddressBookStorage.readPatientist(filePath).get();","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        assertEquals(original, new Patientist(readBack));","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        //original.addPerson(AMY);","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        jsonAddressBookStorage.savePatientist(original); // file path not specified","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"        readBack \u003d jsonAddressBookStorage.readPatientist().get(); // file path not specified","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        assertEquals(original, new Patientist(readBack));","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"    private void saveAddressBook(ReadOnlyPatientist addressBook, String filePath) {","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"            new JsonPatientistStorage(Paths.get(filePath))","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"                    .savePatientist(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new Patientist(), null));","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"lukkesreysandeur":2,"euph00":31,"-":76,"pzhengze":2}},{"path":"src/test/java/seedu/patientist/storage/JsonSerializablePatientistTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.util.JsonUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.testutil.TypicalWards;","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"public class JsonSerializablePatientistTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePatientistTest\");","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientPatientist.json\");","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientPatientist.json\");","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateWardPatientist.json\");","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        JsonSerializablePatientist dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"                JsonSerializablePatientist.class).get();","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        Patientist patientistFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        Patientist typicalPersonsPatientist \u003d TypicalWards.getTypicalPatientist();","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        assertEquals(patientistFromFile, typicalPersonsPatientist);","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        JsonSerializablePatientist dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"                JsonSerializablePatientist.class).get();","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    public void toModelType_duplicateWards_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        JsonSerializablePatientist dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"                JsonSerializablePatientist.class).get();","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePatientist.MESSAGE_DUPLICATE_WARD,","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"euph00":42,"pzhengze":5}},{"path":"src/test/java/seedu/patientist/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        userPrefs.setPatientistFilePath(Paths.get(\"data/patientist.json\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"euph00":6,"-":117}},{"path":"src/test/java/seedu/patientist/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalWards.getTypicalPatientist;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ReadOnlyPatientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        JsonPatientistStorage addressBookStorage \u003d new JsonPatientistStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"         * {@link JsonPatientistStorage} class.","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonPatientistStorageTest} class.","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        Patientist original \u003d getTypicalPatientist();","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        storageManager.savePatientist(original);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"        ReadOnlyPatientist retrieved \u003d storageManager.readPatientist().get();","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"        assertEquals(original, new Patientist(retrieved));","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"        assertNotNull(storageManager.getPatientistFilePath());","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":14,"-":54}},{"path":"src/test/java/seedu/patientist/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"euph00":1,"-":33}},{"path":"src/test/java/seedu/patientist/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"euph00":8,"-":79}},{"path":"src/test/java/seedu/patientist/testutil/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientStatusDetails;","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.PatientToDo;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"import seedu.patientist.model.tag.PriorityTag;","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.util.SampleDataUtil;","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":" * A utility class to help with building Patient objects","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"public class PatientBuilder extends PersonBuilder {","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    public static final List\u003cPatientStatusDetails\u003e DEFAULT_STATUS \u003d List.of(new PatientStatusDetails(\"Doing good\"));","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public static final List\u003cPatientToDo\u003e DEFAULT_TODO \u003d List.of(new PatientToDo(\"Take medicine\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    public static final HashSet\u003cTag\u003e DEFAULT_TAGS \u003d new HashSet\u003c\u003e(List.of(new Tag(\"Patient\")));","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    private PriorityTag priority;","lastModifiedDate":"2023-03-31"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    private List\u003cPatientStatusDetails\u003e status;","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    private List\u003cPatientToDo\u003e todo;","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"     * Creates a Patient from default details, with defaults specified here and in PersonBuilder","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    public PatientBuilder() {","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        super();","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        this.status \u003d DEFAULT_STATUS;","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        this.todo \u003d DEFAULT_TODO;","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        this.tags \u003d DEFAULT_TAGS;","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"        idNumber \u003d patientToCopy.getIdNumber();","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        email \u003d patientToCopy.getEmail();","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"        address \u003d patientToCopy.getAddress();","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"        priority \u003d patientToCopy.getPriority();","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"        status \u003d new ArrayList\u003c\u003e(patientToCopy.getPatientStatusDetails());","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        todo \u003d new ArrayList\u003c\u003e(patientToCopy.getPatientToDoList());","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"    public PatientBuilder withTags(String ... tags) {","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2023-03-12"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"     * Sets the {@code Address} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"    public PatientBuilder withAddress(String address) {","lastModifiedDate":"2023-03-12"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2023-03-12"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2023-03-12"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2023-03-12"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"    public PatientBuilder withEmail(String email) {","lastModifiedDate":"2023-03-12"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2023-03-12"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"     * Sets the {@code Status} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":104,"author":{"gitId":"pzhengze"},"content":"    public PatientBuilder withStatus(String ... details) {","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"pzhengze"},"content":"        this.status \u003d SampleDataUtil.getDetailsList(details);","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"     * Sets the {@code Status} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-12"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":112,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"lukkesreysandeur"},"content":"    public PatientBuilder withIdNumber(String id) {","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"lukkesreysandeur"},"content":"        this.idNumber \u003d new IdNumber(id);","lastModifiedDate":"2023-03-16"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-12"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"    public Patient build() {","lastModifiedDate":"2023-03-12"},{"lineNumber":120,"author":{"gitId":"jinnieshin"},"content":"        return new Patient(idNumber, name, phone, email, address, priority, status, todo, tags);","lastModifiedDate":"2023-03-31"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":5,"euph00":91,"pzhengze":23,"jinnieshin":4}},{"path":"src/test/java/seedu/patientist/testutil/PatientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pzhengze"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.EditCommand;","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"pzhengze"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"pzhengze"},"content":" * A utility class for Patient.","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"pzhengze"},"content":"public class PatientUtil {","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    public static String getAddCommand(Patient patient) {","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    public static String getPatientDetails(Patient patient) {","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"        sb.append(PREFIX_NAME).append(patient.getName().fullName).append(\" \");","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"        sb.append(PREFIX_PRIORITY + patient.getPriority().tagName + \" \");","lastModifiedDate":"2023-03-31"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        sb.append(PREFIX_ID + patient.getIdNumber().toString() + \" \");","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"pzhengze"},"content":"        sb.append(PREFIX_WARD).append(\"Block A Ward 1\").append(\" \");","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"pzhengze"},"content":"        patient.getPatientStatusDetails().stream().forEach(","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"pzhengze"},"content":"                s -\u003e sb.append(PREFIX_STATUS).append(s.getDetails()).append(\" \")","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"pzhengze"},"content":"        );","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"pzhengze"},"content":"        patient.getTags().stream().forEach(","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"pzhengze"},"content":"                s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        );","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        return sb.toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"pzhengze"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"pzhengze"},"content":"    public static String getEditPatientDescriptorDetails(EditCommand.EditPersonDescriptor descriptor) {","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"pzhengze"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"pzhengze"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"pzhengze"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"pzhengze"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"pzhengze"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"pzhengze"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"pzhengze"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"pzhengze"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2023-03-12"},{"lineNumber":64,"author":{"gitId":"pzhengze"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2023-03-12"},{"lineNumber":65,"author":{"gitId":"pzhengze"},"content":"            } else {","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"pzhengze"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"pzhengze"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"pzhengze"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"pzhengze"},"content":"        return sb.toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":71,"author":{"gitId":"pzhengze"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":2,"pzhengze":67,"jinnieshin":2}},{"path":"src/test/java/seedu/patientist/testutil/PatientistBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":" *     {@code Patientist ab \u003d new PatientistBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"public class PatientistBuilder {","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    private Patientist patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"    private Ward ward \u003d new Ward(\"Ward\");","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"pzhengze"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"pzhengze"},"content":"     * Constructor for PatientistBuilder.","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"pzhengze"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    public PatientistBuilder() {","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        patientist \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"pzhengze"},"content":"        patientist.addWard(ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public PatientistBuilder(Patientist patientist) {","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        this.patientist \u003d patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"     * Adds a new {@code Person} to the {@code Patientist} that we are building.","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"    public PatientistBuilder withPerson(Patient patient) {","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"        patientist.addPatient(patient, ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    public Patientist build() {","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        return patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"euph00":31,"pzhengze":9}},{"path":"src/test/java/seedu/patientist/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.util.SampleDataUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"public abstract class PersonBuilder {","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String DEFAULT_ID_NUMBER \u003d \"A12345H\";","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    protected Name name;","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    protected Phone phone;","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    protected Email email;","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"    protected IdNumber idNumber;","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    protected Address address;","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    protected Set\u003cTag\u003e tags;","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        idNumber \u003d new IdNumber(DEFAULT_ID_NUMBER);","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"        idNumber \u003d personToCopy.getIdNumber();","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"lukkesreysandeur"},"content":"     * Sets the {@code IdNumber} of the {@code Person} that we are building.","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"lukkesreysandeur"},"content":"    public PersonBuilder withIdNumber(String idNumber) {","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"lukkesreysandeur"},"content":"        this.idNumber \u003d new IdNumber(idNumber);","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"lukkesreysandeur"},"content":"        return this;","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"    public abstract Person build();","lastModifiedDate":"2023-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"lukkesreysandeur":11,"euph00":15,"-":81}},{"path":"src/test/java/seedu/patientist/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import seedu.patientist.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import seedu.patientist.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"pzhengze"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"euph00":9,"-":51,"pzhengze":2}},{"path":"src/test/java/seedu/patientist/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":1,"-":71}},{"path":"src/test/java/seedu/patientist/testutil/StaffBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Address;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Email;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.IdNumber;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Name;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.Phone;","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.util.SampleDataUtil;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":" * A utility class to help with building Staff objects.","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"public class StaffBuilder extends PersonBuilder {","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"     * Creates a Staff from default details, with defaults specified here and in PersonBuilder","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder() {","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"        super();","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"lukkesreysandeur"},"content":"     * Initializes the StaffBuilder with the data of {@code staffToCopy}.","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder(Staff staffToCopy) {","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"        name \u003d staffToCopy.getName();","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"        phone \u003d staffToCopy.getPhone();","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"        email \u003d staffToCopy.getEmail();","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"lukkesreysandeur"},"content":"        address \u003d staffToCopy.getAddress();","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        idNumber \u003d staffToCopy.getIdNumber();","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"        tags \u003d new HashSet\u003c\u003e(staffToCopy.getTags());","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"lukkesreysandeur"},"content":"     * Sets the {@code Name} of the {@code Staff} that we are building.","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder withName(String name) {","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"lukkesreysandeur"},"content":"        return this;","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Staff} that we are building.","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder withTags(String ... tags) {","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"lukkesreysandeur"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"lukkesreysandeur"},"content":"        return this;","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"lukkesreysandeur"},"content":"     * Sets the {@code Address} of the {@code Staff} that we are building.","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder withAddress(String address) {","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"lukkesreysandeur"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"lukkesreysandeur"},"content":"        return this;","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"lukkesreysandeur"},"content":"     * Sets the {@code Phone} of the {@code Staff} that we are building.","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder withPhone(String phone) {","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"lukkesreysandeur"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"lukkesreysandeur"},"content":"        return this;","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"lukkesreysandeur"},"content":"     * Sets the {@code Email} of the {@code Staff} that we are building.","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder withEmail(String email) {","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"lukkesreysandeur"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"lukkesreysandeur"},"content":"        return this;","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":80,"author":{"gitId":"lukkesreysandeur"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":81,"author":{"gitId":"lukkesreysandeur"},"content":"     * Sets the {@code Status} of the {@code Staff} that we are building.","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"lukkesreysandeur"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"lukkesreysandeur"},"content":"    public StaffBuilder withIdNumber(String idNumber) {","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"lukkesreysandeur"},"content":"        this.idNumber \u003d new IdNumber(idNumber);","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"lukkesreysandeur"},"content":"        return this;","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"lukkesreysandeur"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"lukkesreysandeur"},"content":"    public Staff build() {","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"lukkesreysandeur"},"content":"        return new Staff(name, phone, email, idNumber, address, tags);","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"lukkesreysandeur":93,"euph00":1}},{"path":"src/test/java/seedu/patientist/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"euph00":4,"-":51}},{"path":"src/test/java/seedu/patientist/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.commons.core.index.Index;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"euph00":2,"-":10}},{"path":"src/test/java/seedu/patientist/testutil/TypicalPatients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_STATUS_AMY;","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"pzhengze"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_STATUS_BOB;","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":" * A utility class containing a list of {@code Patient} objects to be used in tests.","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"public class TypicalPatients {","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"            .withStatus(VALID_STATUS_AMY).withIdNumber(VALID_PID_AMY).build();","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    public static final Patient ADAM \u003d new PatientBuilder().withName(\"Adam Sandler\")","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"adam@example.com\")","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"            .withPhone(\"94351253\").withIdNumber(\"G73829173B\")","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"            .withStatus(\"Doing fine\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"            .withAddress(VALID_ADDRESS_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"            .withPhone(VALID_PHONE_BOB).withIdNumber(VALID_PID_BOB).withStatus(VALID_STATUS_BOB)","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"            .build(); //Default status","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"    public static final Patient CHARLIE \u003d new PatientBuilder().withName(\"Charlie Sandler\")","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"pzhengze"},"content":"            .withAddress(\"123, abc, #08-111\").withEmail(\"charlie@example.com\")","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"            .withPhone(\"2136784\").withIdNumber(\"G487659645D\")","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"            .withStatus(\"Doing good\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"GlennOngJunJie"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ADAM, CHARLIE));","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"lukkesreysandeur":4,"euph00":25,"GlennOngJunJie":1,"pzhengze":18}},{"path":"src/test/java/seedu/patientist/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"//import static seedu.patientist.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"//","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"//import java.util.ArrayList;","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"//import java.util.Arrays;","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    public static final Person ALICE \u003d null; //new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    //.withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    //.withPhone(\"94351253\")","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    //.withTags(\"friends\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    public static final Person BENSON \u003d null; //new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    //.withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    // .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    public static final Person CARL \u003d null; //new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    public static final Person DANIEL \u003d null; //new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"    public static final Person ELLE \u003d null; //new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    public static final Person FIONA \u003d null; //new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    public static final Person GEORGE \u003d null; //new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    public static final Person HOON \u003d null; //new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    public static final Person IDA \u003d null; //new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"    //.withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    public static final Person AMY \u003d null; //new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"    //.withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"    public static final Person BOB \u003d null; //new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    //.withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"    //.build();","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"     * Returns an {@code Patientist} with all the typical persons.","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    public static Patientist getTypicalPatientist() {","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        Patientist ab \u003d new Patientist();","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"            //ab.addPerson(person); todo","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        return null; //new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"euph00":48,"-":28}},{"path":"src/test/java/seedu/patientist/testutil/TypicalStaff.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lukkesreysandeur"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"lukkesreysandeur"},"content":"import static seedu.patientist.logic.commands.CommandTestUtil.VALID_PID_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"lukkesreysandeur"},"content":"import java.util.List;","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"lukkesreysandeur"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"lukkesreysandeur"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":" * A utility class containing a list of {@code Staff} objects to be used in tests.","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"lukkesreysandeur"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"lukkesreysandeur"},"content":"public class TypicalStaff {","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final Staff AMY \u003d new StaffBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"lukkesreysandeur"},"content":"            .withIdNumber(VALID_PID_AMY).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final Staff BOB \u003d new StaffBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"lukkesreysandeur"},"content":"            .withAddress(VALID_ADDRESS_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"lukkesreysandeur"},"content":"            .withPhone(VALID_PHONE_BOB).withIdNumber(VALID_PID_BOB)","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            .build();","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final Staff CHARLES \u003d new StaffBuilder().withName(\"Charles Lee\")","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"lukkesreysandeur"},"content":"            .withAddress(\"123, abc, #08-111\").withEmail(\"leecharles@example.com\")","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"lukkesreysandeur"},"content":"            .withPhone(\"2136784\").withIdNumber(\"G487659645D\")","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"            .build();","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final Staff DACIA \u003d new StaffBuilder().withName(\"Dacia Chin\")","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"lukkesreysandeur"},"content":"            .withAddress(\"970, Hindhede St, #07-27\").withEmail(\"daciachin@example.com\")","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"lukkesreysandeur"},"content":"            .withPhone(\"96128393\").withIdNumber(\"L73825263J\")","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"            .build();","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"lukkesreysandeur"},"content":"    private TypicalStaff() {} // prevents instantiation","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"lukkesreysandeur"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"lukkesreysandeur"},"content":"    public static List\u003cStaff\u003e getTypicalStaff() {","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"lukkesreysandeur"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(AMY, BOB, CHARLES, DACIA));","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"lukkesreysandeur"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"lukkesreysandeur"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"lukkesreysandeur":44,"euph00":4}},{"path":"src/test/java/seedu/patientist/testutil/TypicalWards.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.ADAM;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalPatients.CHARLIE;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalStaff.CHARLES;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.TypicalStaff.DACIA;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.Patientist;","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" * A utility class containing a list of {@code Ward} objects to be used in tests.","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"public class TypicalWards {","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"lukkesreysandeur"},"content":"    public static final String VALID_WARD_NAME \u003d \"Block A Ward 1\";","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    private TypicalWards() {}","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public static List\u003cWard\u003e getTypicalWards() {","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"pzhengze"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(getBlockAWard1(), getBlockAWard2()));","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"pzhengze"},"content":"    public static Ward getBlockAWard1() {","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"pzhengze"},"content":"        return new WardBuilder().withName(\"Block A Ward 1\")","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"pzhengze"},"content":"                .withPatient(new PatientBuilder(AMY).build())","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"pzhengze"},"content":"                .withPatient(new PatientBuilder(CHARLIE).build())","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"pzhengze"},"content":"                .withStaff(new StaffBuilder(CHARLES).build()).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"pzhengze"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"pzhengze"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"pzhengze"},"content":"    public static Ward getBlockAWard2() {","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"pzhengze"},"content":"        return new WardBuilder().withName(\"Block A Ward 2\")","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"pzhengze"},"content":"                .withPatient(new PatientBuilder(ADAM).build())","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"pzhengze"},"content":"                .withPatient(new PatientBuilder(BOB).build())","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"pzhengze"},"content":"                .withStaff(new StaffBuilder(DACIA).build()).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"     * Creates a generic Patientist using the typical wards.","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    public static Patientist getTypicalPatientist() {","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        Patientist pt \u003d new Patientist();","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"pzhengze"},"content":"        pt.addWard(getBlockAWard1());","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"pzhengze"},"content":"        pt.addWard(getBlockAWard2());","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"        return pt;","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"lukkesreysandeur":1,"euph00":34,"pzhengze":17}},{"path":"src/test/java/seedu/patientist/testutil/WardBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.testutil;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.Person;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.UniquePersonList;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.patient.Patient;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.person.staff.Staff;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import seedu.patientist.model.ward.Ward;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":" * A utility class to help with building Ward objects","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"public class WardBuilder {","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    public static final String DEFAULT_NAME \u003d \"Block A Ward 1\";","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    private String wardName;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    private UniquePersonList patients;","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    private UniquePersonList staffs;","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"     * Creates a {@code WardBuilder} with the default details.","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    public WardBuilder() {","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"        wardName \u003d DEFAULT_NAME;","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        patients \u003d new UniquePersonList(DEFAULT_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        staffs \u003d new UniquePersonList(DEFAULT_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"     * Clones {@code toCopy} into the WardBuilder.","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    public WardBuilder(Ward toCopy) {","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        wardName \u003d toCopy.getWardName();","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        patients \u003d new UniquePersonList(wardName);","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        for (Person pat : toCopy.getPatientsAsUnmodifiableObservableList()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"            patients.add(pat);","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        staffs \u003d new UniquePersonList(wardName);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        for (Person stf : toCopy.getStaffsAsUnmodifiableObservableList()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"            staffs.add(stf);","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"     * Adds {@code patient} into ward we are building.","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"    public WardBuilder withPatient(Patient patient) {","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        this.patients.add(patient);","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"     * Adds {@code staff} into ward we are building.","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    public WardBuilder withStaff(Staff staff) {","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        this.staffs.add(staff);","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-20"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"     * Sets {@code name} of the ward we are building.","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"    public WardBuilder withName(String name) {","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"        this.wardName \u003d name;","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"        return this;","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"     * Builds and returns the ward.","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"    public Ward build() {","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        Ward result \u003d new Ward(wardName);","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        for (Person patient : patients) {","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"            result.addPatient((Patient) patient);","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"        for (Person staff : staffs) {","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"            result.addStaff((Staff) staff);","lastModifiedDate":"2023-03-20"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"        return result;","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"euph00":81}},{"path":"src/test/java/seedu/patientist/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"euph00":1,"-":34}},{"path":"src/test/java/seedu/patientist/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package seedu.patientist.ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import static seedu.patientist.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import seedu.patientist.MainApp;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"euph00":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"\u003c?import seedu.patientist.ui.TestFxmlObject?\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"euph00":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"\u003cfx:root type\u003d\"seedu.patientist.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"euph00":1,"-":5}}]
